
tft_display_tactile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006470  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002190  08006580  08006580  00007580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008710  08008710  0000a074  2**0
                  CONTENTS
  4 .ARM          00000000  08008710  08008710  0000a074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008710  08008710  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008710  08008710  00009710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008714  08008714  00009714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008718  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  20000074  0800878c  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  0800878c  0000a41c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ca1  00000000  00000000  0000a09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee5  00000000  00000000  0001ad3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  0001dc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d51  00000000  00000000  0001ed90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a718  00000000  00000000  0001fae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e08  00000000  00000000  0003a1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000934df  00000000  00000000  0004e001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e14e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c98  00000000  00000000  000e1524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000e61bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006568 	.word	0x08006568

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006568 	.word	0x08006568

08000150 <Display>:
QueueHandle_t queue;

#define MAIN_COLOR			COLOR_YELLOW
#define BACKGROUND_COLOR	COLOR_BLACK

static void Display(void *pvParameters){
 8000150:	b580      	push	{r7, lr}
 8000152:	b08a      	sub	sp, #40	@ 0x28
 8000154:	af04      	add	r7, sp, #16
 8000156:	6078      	str	r0, [r7, #4]

	TFT_TOUCH_COORDS coords;
	coords.x = 0;
 8000158:	2300      	movs	r3, #0
 800015a:	82bb      	strh	r3, [r7, #20]
	coords.y = 0;
 800015c:	2300      	movs	r3, #0
 800015e:	82fb      	strh	r3, [r7, #22]

	char value_x[] = "000";
 8000160:	4b63      	ldr	r3, [pc, #396]	@ (80002f0 <Display+0x1a0>)
 8000162:	613b      	str	r3, [r7, #16]
	char value_y[] = "000";
 8000164:	4b62      	ldr	r3, [pc, #392]	@ (80002f0 <Display+0x1a0>)
 8000166:	60fb      	str	r3, [r7, #12]

	xSemaphoreTake(mutex, portMAX_DELAY);
 8000168:	4b62      	ldr	r3, [pc, #392]	@ (80002f4 <Display+0x1a4>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	f04f 31ff 	mov.w	r1, #4294967295
 8000170:	4618      	mov	r0, r3
 8000172:	f003 fa4d 	bl	8003610 <xQueueSemaphoreTake>

	TFT_Display_FillScreen(BACKGROUND_COLOR);
 8000176:	2000      	movs	r0, #0
 8000178:	f000 ffc0 	bl	80010fc <TFT_Display_FillScreen>
	TFT_Display_DrawRectangle(MAIN_COLOR,5, 5, TFT_Display_WIDTH-6, TFT_Display_HEIGHT-6);
 800017c:	23ea      	movs	r3, #234	@ 0xea
 800017e:	9300      	str	r3, [sp, #0]
 8000180:	f44f 739d 	mov.w	r3, #314	@ 0x13a
 8000184:	2205      	movs	r2, #5
 8000186:	2105      	movs	r1, #5
 8000188:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 800018c:	f000 ff1d 	bl	8000fca <TFT_Display_DrawRectangle>

	TFT_Display_WriteString(100, 50, "X =", Font_16x26, MAIN_COLOR, BACKGROUND_COLOR);
 8000190:	4b59      	ldr	r3, [pc, #356]	@ (80002f8 <Display+0x1a8>)
 8000192:	2200      	movs	r2, #0
 8000194:	9202      	str	r2, [sp, #8]
 8000196:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800019a:	9201      	str	r2, [sp, #4]
 800019c:	685a      	ldr	r2, [r3, #4]
 800019e:	9200      	str	r2, [sp, #0]
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	4a56      	ldr	r2, [pc, #344]	@ (80002fc <Display+0x1ac>)
 80001a4:	2132      	movs	r1, #50	@ 0x32
 80001a6:	2064      	movs	r0, #100	@ 0x64
 80001a8:	f000 fe3d 	bl	8000e26 <TFT_Display_WriteString>
	TFT_Display_WriteString(100, 120, "Y =", Font_16x26, MAIN_COLOR, BACKGROUND_COLOR);
 80001ac:	4b52      	ldr	r3, [pc, #328]	@ (80002f8 <Display+0x1a8>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	9202      	str	r2, [sp, #8]
 80001b2:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80001b6:	9201      	str	r2, [sp, #4]
 80001b8:	685a      	ldr	r2, [r3, #4]
 80001ba:	9200      	str	r2, [sp, #0]
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4a50      	ldr	r2, [pc, #320]	@ (8000300 <Display+0x1b0>)
 80001c0:	2178      	movs	r1, #120	@ 0x78
 80001c2:	2064      	movs	r0, #100	@ 0x64
 80001c4:	f000 fe2f 	bl	8000e26 <TFT_Display_WriteString>
	TFT_Display_WriteString(70, 200, "Touch the screen", Font_11x18, MAIN_COLOR, BACKGROUND_COLOR);
 80001c8:	4b4e      	ldr	r3, [pc, #312]	@ (8000304 <Display+0x1b4>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	9202      	str	r2, [sp, #8]
 80001ce:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80001d2:	9201      	str	r2, [sp, #4]
 80001d4:	685a      	ldr	r2, [r3, #4]
 80001d6:	9200      	str	r2, [sp, #0]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a4b      	ldr	r2, [pc, #300]	@ (8000308 <Display+0x1b8>)
 80001dc:	21c8      	movs	r1, #200	@ 0xc8
 80001de:	2046      	movs	r0, #70	@ 0x46
 80001e0:	f000 fe21 	bl	8000e26 <TFT_Display_WriteString>

	xSemaphoreGive(mutex);
 80001e4:	4b43      	ldr	r3, [pc, #268]	@ (80002f4 <Display+0x1a4>)
 80001e6:	6818      	ldr	r0, [r3, #0]
 80001e8:	2300      	movs	r3, #0
 80001ea:	2200      	movs	r2, #0
 80001ec:	2100      	movs	r1, #0
 80001ee:	f003 f82b 	bl	8003248 <xQueueGenericSend>

	while(1){

		// Get the pressed coordinates from the queue, after timeout reset the coordinates
		if ( xQueueReceive(queue,&coords,100) != pdPASS ){
 80001f2:	4b46      	ldr	r3, [pc, #280]	@ (800030c <Display+0x1bc>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f107 0114 	add.w	r1, r7, #20
 80001fa:	2264      	movs	r2, #100	@ 0x64
 80001fc:	4618      	mov	r0, r3
 80001fe:	f003 f925 	bl	800344c <xQueueReceive>
 8000202:	4603      	mov	r3, r0
 8000204:	2b01      	cmp	r3, #1
 8000206:	d003      	beq.n	8000210 <Display+0xc0>
			coords.x = 0;
 8000208:	2300      	movs	r3, #0
 800020a:	82bb      	strh	r3, [r7, #20]
			coords.y = 0;
 800020c:	2300      	movs	r3, #0
 800020e:	82fb      	strh	r3, [r7, #22]
		}

		// Formatting
		if(coords.x < 10){
 8000210:	8abb      	ldrh	r3, [r7, #20]
 8000212:	2b09      	cmp	r3, #9
 8000214:	d808      	bhi.n	8000228 <Display+0xd8>
			sprintf(value_x, "00%i", coords.x);
 8000216:	8abb      	ldrh	r3, [r7, #20]
 8000218:	461a      	mov	r2, r3
 800021a:	f107 0310 	add.w	r3, r7, #16
 800021e:	493c      	ldr	r1, [pc, #240]	@ (8000310 <Display+0x1c0>)
 8000220:	4618      	mov	r0, r3
 8000222:	f005 fd9f 	bl	8005d64 <siprintf>
 8000226:	e013      	b.n	8000250 <Display+0x100>
		}
		else{
			if(coords.x < 100){
 8000228:	8abb      	ldrh	r3, [r7, #20]
 800022a:	2b63      	cmp	r3, #99	@ 0x63
 800022c:	d808      	bhi.n	8000240 <Display+0xf0>
				sprintf(value_x, "0%i", coords.x);
 800022e:	8abb      	ldrh	r3, [r7, #20]
 8000230:	461a      	mov	r2, r3
 8000232:	f107 0310 	add.w	r3, r7, #16
 8000236:	4937      	ldr	r1, [pc, #220]	@ (8000314 <Display+0x1c4>)
 8000238:	4618      	mov	r0, r3
 800023a:	f005 fd93 	bl	8005d64 <siprintf>
 800023e:	e007      	b.n	8000250 <Display+0x100>
			}
			else{
				sprintf(value_x, "%i", coords.x);
 8000240:	8abb      	ldrh	r3, [r7, #20]
 8000242:	461a      	mov	r2, r3
 8000244:	f107 0310 	add.w	r3, r7, #16
 8000248:	4933      	ldr	r1, [pc, #204]	@ (8000318 <Display+0x1c8>)
 800024a:	4618      	mov	r0, r3
 800024c:	f005 fd8a 	bl	8005d64 <siprintf>
			}
		}

		if(coords.y < 10){
 8000250:	8afb      	ldrh	r3, [r7, #22]
 8000252:	2b09      	cmp	r3, #9
 8000254:	d808      	bhi.n	8000268 <Display+0x118>
			sprintf(value_y, "00%i", coords.y);
 8000256:	8afb      	ldrh	r3, [r7, #22]
 8000258:	461a      	mov	r2, r3
 800025a:	f107 030c 	add.w	r3, r7, #12
 800025e:	492c      	ldr	r1, [pc, #176]	@ (8000310 <Display+0x1c0>)
 8000260:	4618      	mov	r0, r3
 8000262:	f005 fd7f 	bl	8005d64 <siprintf>
 8000266:	e013      	b.n	8000290 <Display+0x140>
		}
		else{
			if(coords.y < 100){
 8000268:	8afb      	ldrh	r3, [r7, #22]
 800026a:	2b63      	cmp	r3, #99	@ 0x63
 800026c:	d808      	bhi.n	8000280 <Display+0x130>
				sprintf(value_y, "0%i", coords.y);
 800026e:	8afb      	ldrh	r3, [r7, #22]
 8000270:	461a      	mov	r2, r3
 8000272:	f107 030c 	add.w	r3, r7, #12
 8000276:	4927      	ldr	r1, [pc, #156]	@ (8000314 <Display+0x1c4>)
 8000278:	4618      	mov	r0, r3
 800027a:	f005 fd73 	bl	8005d64 <siprintf>
 800027e:	e007      	b.n	8000290 <Display+0x140>
			}
			else{
				sprintf(value_y, "%i", coords.y);
 8000280:	8afb      	ldrh	r3, [r7, #22]
 8000282:	461a      	mov	r2, r3
 8000284:	f107 030c 	add.w	r3, r7, #12
 8000288:	4923      	ldr	r1, [pc, #140]	@ (8000318 <Display+0x1c8>)
 800028a:	4618      	mov	r0, r3
 800028c:	f005 fd6a 	bl	8005d64 <siprintf>
			}
		}


		xSemaphoreTake(mutex, portMAX_DELAY);
 8000290:	4b18      	ldr	r3, [pc, #96]	@ (80002f4 <Display+0x1a4>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f04f 31ff 	mov.w	r1, #4294967295
 8000298:	4618      	mov	r0, r3
 800029a:	f003 f9b9 	bl	8003610 <xQueueSemaphoreTake>

		TFT_Display_WriteString(160, 50, value_x, Font_16x26, MAIN_COLOR, BACKGROUND_COLOR);
 800029e:	4b16      	ldr	r3, [pc, #88]	@ (80002f8 <Display+0x1a8>)
 80002a0:	f107 0110 	add.w	r1, r7, #16
 80002a4:	2200      	movs	r2, #0
 80002a6:	9202      	str	r2, [sp, #8]
 80002a8:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80002ac:	9201      	str	r2, [sp, #4]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	9200      	str	r2, [sp, #0]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	460a      	mov	r2, r1
 80002b6:	2132      	movs	r1, #50	@ 0x32
 80002b8:	20a0      	movs	r0, #160	@ 0xa0
 80002ba:	f000 fdb4 	bl	8000e26 <TFT_Display_WriteString>
		TFT_Display_WriteString(160, 120, value_y, Font_16x26, MAIN_COLOR, BACKGROUND_COLOR);
 80002be:	4b0e      	ldr	r3, [pc, #56]	@ (80002f8 <Display+0x1a8>)
 80002c0:	f107 010c 	add.w	r1, r7, #12
 80002c4:	2200      	movs	r2, #0
 80002c6:	9202      	str	r2, [sp, #8]
 80002c8:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80002cc:	9201      	str	r2, [sp, #4]
 80002ce:	685a      	ldr	r2, [r3, #4]
 80002d0:	9200      	str	r2, [sp, #0]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	460a      	mov	r2, r1
 80002d6:	2178      	movs	r1, #120	@ 0x78
 80002d8:	20a0      	movs	r0, #160	@ 0xa0
 80002da:	f000 fda4 	bl	8000e26 <TFT_Display_WriteString>

		xSemaphoreGive(mutex);
 80002de:	4b05      	ldr	r3, [pc, #20]	@ (80002f4 <Display+0x1a4>)
 80002e0:	6818      	ldr	r0, [r3, #0]
 80002e2:	2300      	movs	r3, #0
 80002e4:	2200      	movs	r2, #0
 80002e6:	2100      	movs	r1, #0
 80002e8:	f002 ffae 	bl	8003248 <xQueueGenericSend>
		if ( xQueueReceive(queue,&coords,100) != pdPASS ){
 80002ec:	e781      	b.n	80001f2 <Display+0xa2>
 80002ee:	bf00      	nop
 80002f0:	00303030 	.word	0x00303030
 80002f4:	200000e8 	.word	0x200000e8
 80002f8:	2000000c 	.word	0x2000000c
 80002fc:	08006580 	.word	0x08006580
 8000300:	08006584 	.word	0x08006584
 8000304:	20000004 	.word	0x20000004
 8000308:	08006588 	.word	0x08006588
 800030c:	200000ec 	.word	0x200000ec
 8000310:	0800659c 	.word	0x0800659c
 8000314:	080065a4 	.word	0x080065a4
 8000318:	080065a8 	.word	0x080065a8

0800031c <Touch>:
	}
}

static void Touch(void *pvParameters){
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]

	TFT_TOUCH_COORDS coords;
	coords.x = 0;
 8000324:	2300      	movs	r3, #0
 8000326:	81bb      	strh	r3, [r7, #12]
	coords.y = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	81fb      	strh	r3, [r7, #14]

	while(1){

		if( TFT_Touch_ScreenPressed() ){
 800032c:	f000 ff10 	bl	8001150 <TFT_Touch_ScreenPressed>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d0fa      	beq.n	800032c <Touch+0x10>

			xSemaphoreTake(mutex, portMAX_DELAY);
 8000336:	4b23      	ldr	r3, [pc, #140]	@ (80003c4 <Touch+0xa8>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f04f 31ff 	mov.w	r1, #4294967295
 800033e:	4618      	mov	r0, r3
 8000340:	f003 f966 	bl	8003610 <xQueueSemaphoreTake>

			// Reduce SPI speed to give time to the touch controller (only necessary if using same SPI for both touch and display controllers)
			while(HAL_SPI_DeInit(&TFT_TOUCH_SPI_PORT) != HAL_OK);
 8000344:	bf00      	nop
 8000346:	4820      	ldr	r0, [pc, #128]	@ (80003c8 <Touch+0xac>)
 8000348:	f002 f83c 	bl	80023c4 <HAL_SPI_DeInit>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d1f9      	bne.n	8000346 <Touch+0x2a>
			TFT_TOUCH_SPI_PORT.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128; // 562K bits/s
 8000352:	4b1d      	ldr	r3, [pc, #116]	@ (80003c8 <Touch+0xac>)
 8000354:	2230      	movs	r2, #48	@ 0x30
 8000356:	61da      	str	r2, [r3, #28]
			while(HAL_SPI_Init(&TFT_TOUCH_SPI_PORT) != HAL_OK);
 8000358:	bf00      	nop
 800035a:	481b      	ldr	r0, [pc, #108]	@ (80003c8 <Touch+0xac>)
 800035c:	f001 ffae 	bl	80022bc <HAL_SPI_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d1f9      	bne.n	800035a <Touch+0x3e>

			// Get pressed coordinates
			TFT_Touch_GetCoordinates(&coords.y, &coords.x);
 8000366:	f107 020c 	add.w	r2, r7, #12
 800036a:	f107 030c 	add.w	r3, r7, #12
 800036e:	3302      	adds	r3, #2
 8000370:	4611      	mov	r1, r2
 8000372:	4618      	mov	r0, r3
 8000374:	f000 fefc 	bl	8001170 <TFT_Touch_GetCoordinates>

			// Revert SPI speed value for appropriate communication with the display controller
			while(HAL_SPI_DeInit(&TFT_TOUCH_SPI_PORT) != HAL_OK);
 8000378:	bf00      	nop
 800037a:	4813      	ldr	r0, [pc, #76]	@ (80003c8 <Touch+0xac>)
 800037c:	f002 f822 	bl	80023c4 <HAL_SPI_DeInit>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d1f9      	bne.n	800037a <Touch+0x5e>
			TFT_TOUCH_SPI_PORT.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4; // 18M bits/s
 8000386:	4b10      	ldr	r3, [pc, #64]	@ (80003c8 <Touch+0xac>)
 8000388:	2208      	movs	r2, #8
 800038a:	61da      	str	r2, [r3, #28]
			while(HAL_SPI_Init(&TFT_TOUCH_SPI_PORT) != HAL_OK);
 800038c:	bf00      	nop
 800038e:	480e      	ldr	r0, [pc, #56]	@ (80003c8 <Touch+0xac>)
 8000390:	f001 ff94 	bl	80022bc <HAL_SPI_Init>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d1f9      	bne.n	800038e <Touch+0x72>

			xSemaphoreGive(mutex);
 800039a:	4b0a      	ldr	r3, [pc, #40]	@ (80003c4 <Touch+0xa8>)
 800039c:	6818      	ldr	r0, [r3, #0]
 800039e:	2300      	movs	r3, #0
 80003a0:	2200      	movs	r2, #0
 80003a2:	2100      	movs	r1, #0
 80003a4:	f002 ff50 	bl	8003248 <xQueueGenericSend>

			xQueueSendToBack(queue,&coords,portMAX_DELAY);
 80003a8:	4b08      	ldr	r3, [pc, #32]	@ (80003cc <Touch+0xb0>)
 80003aa:	6818      	ldr	r0, [r3, #0]
 80003ac:	f107 010c 	add.w	r1, r7, #12
 80003b0:	2300      	movs	r3, #0
 80003b2:	f04f 32ff 	mov.w	r2, #4294967295
 80003b6:	f002 ff47 	bl	8003248 <xQueueGenericSend>

			vTaskDelay(100/portTICK_PERIOD_MS);
 80003ba:	2064      	movs	r0, #100	@ 0x64
 80003bc:	f003 fd40 	bl	8003e40 <vTaskDelay>
		if( TFT_Touch_ScreenPressed() ){
 80003c0:	e7b4      	b.n	800032c <Touch+0x10>
 80003c2:	bf00      	nop
 80003c4:	200000e8 	.word	0x200000e8
 80003c8:	20000090 	.word	0x20000090
 80003cc:	200000ec 	.word	0x200000ec

080003d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d6:	f000 ff9f 	bl	8001318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003da:	f000 f83b 	bl	8000454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003de:	f000 f8b5 	bl	800054c <MX_GPIO_Init>
  MX_SPI1_Init();
 80003e2:	f000 f87d 	bl	80004e0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  TFT_Touch_Unselect();
 80003e6:	f000 fea7 	bl	8001138 <TFT_Touch_Unselect>
  TFT_Display_Unselect();
 80003ea:	f000 fa8d 	bl	8000908 <TFT_Display_Unselect>
  TFT_Display_Init();
 80003ee:	f000 fb47 	bl	8000a80 <TFT_Display_Init>

  mutex = xSemaphoreCreateMutex();
 80003f2:	2001      	movs	r0, #1
 80003f4:	f002 ff10 	bl	8003218 <xQueueCreateMutex>
 80003f8:	4603      	mov	r3, r0
 80003fa:	4a11      	ldr	r2, [pc, #68]	@ (8000440 <main+0x70>)
 80003fc:	6013      	str	r3, [r2, #0]
  queue = xQueueCreate(1,sizeof(TFT_TOUCH_COORDS));
 80003fe:	2200      	movs	r2, #0
 8000400:	2104      	movs	r1, #4
 8000402:	2001      	movs	r0, #1
 8000404:	f002 fe7c 	bl	8003100 <xQueueGenericCreate>
 8000408:	4603      	mov	r3, r0
 800040a:	4a0e      	ldr	r2, [pc, #56]	@ (8000444 <main+0x74>)
 800040c:	6013      	str	r3, [r2, #0]

  xTaskCreate(Display,
 800040e:	2300      	movs	r3, #0
 8000410:	9301      	str	r3, [sp, #4]
 8000412:	2301      	movs	r3, #1
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	2300      	movs	r3, #0
 8000418:	2280      	movs	r2, #128	@ 0x80
 800041a:	490b      	ldr	r1, [pc, #44]	@ (8000448 <main+0x78>)
 800041c:	480b      	ldr	r0, [pc, #44]	@ (800044c <main+0x7c>)
 800041e:	f003 fba1 	bl	8003b64 <xTaskCreate>
         		configMINIMAL_STACK_SIZE,
				NULL,
				(tskIDLE_PRIORITY + 1UL),
         		NULL);

  xTaskCreate(Touch,
 8000422:	2300      	movs	r3, #0
 8000424:	9301      	str	r3, [sp, #4]
 8000426:	2301      	movs	r3, #1
 8000428:	9300      	str	r3, [sp, #0]
 800042a:	2300      	movs	r3, #0
 800042c:	2280      	movs	r2, #128	@ 0x80
 800042e:	4906      	ldr	r1, [pc, #24]	@ (8000448 <main+0x78>)
 8000430:	4807      	ldr	r0, [pc, #28]	@ (8000450 <main+0x80>)
 8000432:	f003 fb97 	bl	8003b64 <xTaskCreate>
     	    	configMINIMAL_STACK_SIZE,
				NULL,
				(tskIDLE_PRIORITY + 1UL),
     	    	NULL);

  vTaskStartScheduler();
 8000436:	f003 fd39 	bl	8003eac <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800043a:	bf00      	nop
 800043c:	e7fd      	b.n	800043a <main+0x6a>
 800043e:	bf00      	nop
 8000440:	200000e8 	.word	0x200000e8
 8000444:	200000ec 	.word	0x200000ec
 8000448:	080065ac 	.word	0x080065ac
 800044c:	08000151 	.word	0x08000151
 8000450:	0800031d 	.word	0x0800031d

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b090      	sub	sp, #64	@ 0x40
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	f107 0318 	add.w	r3, r7, #24
 800045e:	2228      	movs	r2, #40	@ 0x28
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f005 fc9e 	bl	8005da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
 8000474:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000476:	2301      	movs	r3, #1
 8000478:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800047a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800047e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000484:	2301      	movs	r3, #1
 8000486:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000488:	2302      	movs	r3, #2
 800048a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800048c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000490:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000492:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000496:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000498:	f107 0318 	add.w	r3, r7, #24
 800049c:	4618      	mov	r0, r3
 800049e:	f001 fae1 	bl	8001a64 <HAL_RCC_OscConfig>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004a8:	f000 f8cc 	bl	8000644 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ac:	230f      	movs	r3, #15
 80004ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b0:	2302      	movs	r3, #2
 80004b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2102      	movs	r1, #2
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 fd4e 	bl	8001f68 <HAL_RCC_ClockConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004d2:	f000 f8b7 	bl	8000644 <Error_Handler>
  }
}
 80004d6:	bf00      	nop
 80004d8:	3740      	adds	r7, #64	@ 0x40
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004e4:	4b17      	ldr	r3, [pc, #92]	@ (8000544 <MX_SPI1_Init+0x64>)
 80004e6:	4a18      	ldr	r2, [pc, #96]	@ (8000548 <MX_SPI1_Init+0x68>)
 80004e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004ea:	4b16      	ldr	r3, [pc, #88]	@ (8000544 <MX_SPI1_Init+0x64>)
 80004ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80004f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004f2:	4b14      	ldr	r3, [pc, #80]	@ (8000544 <MX_SPI1_Init+0x64>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004f8:	4b12      	ldr	r3, [pc, #72]	@ (8000544 <MX_SPI1_Init+0x64>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004fe:	4b11      	ldr	r3, [pc, #68]	@ (8000544 <MX_SPI1_Init+0x64>)
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000504:	4b0f      	ldr	r3, [pc, #60]	@ (8000544 <MX_SPI1_Init+0x64>)
 8000506:	2200      	movs	r2, #0
 8000508:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800050a:	4b0e      	ldr	r3, [pc, #56]	@ (8000544 <MX_SPI1_Init+0x64>)
 800050c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000510:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000512:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <MX_SPI1_Init+0x64>)
 8000514:	2208      	movs	r2, #8
 8000516:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000518:	4b0a      	ldr	r3, [pc, #40]	@ (8000544 <MX_SPI1_Init+0x64>)
 800051a:	2200      	movs	r2, #0
 800051c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800051e:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <MX_SPI1_Init+0x64>)
 8000520:	2200      	movs	r2, #0
 8000522:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000524:	4b07      	ldr	r3, [pc, #28]	@ (8000544 <MX_SPI1_Init+0x64>)
 8000526:	2200      	movs	r2, #0
 8000528:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <MX_SPI1_Init+0x64>)
 800052c:	220a      	movs	r2, #10
 800052e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000530:	4804      	ldr	r0, [pc, #16]	@ (8000544 <MX_SPI1_Init+0x64>)
 8000532:	f001 fec3 	bl	80022bc <HAL_SPI_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800053c:	f000 f882 	bl	8000644 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000090 	.word	0x20000090
 8000548:	40013000 	.word	0x40013000

0800054c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	f107 0310 	add.w	r3, r7, #16
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000560:	4b2c      	ldr	r3, [pc, #176]	@ (8000614 <MX_GPIO_Init+0xc8>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a2b      	ldr	r2, [pc, #172]	@ (8000614 <MX_GPIO_Init+0xc8>)
 8000566:	f043 0320 	orr.w	r3, r3, #32
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b29      	ldr	r3, [pc, #164]	@ (8000614 <MX_GPIO_Init+0xc8>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0320 	and.w	r3, r3, #32
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	4b26      	ldr	r3, [pc, #152]	@ (8000614 <MX_GPIO_Init+0xc8>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a25      	ldr	r2, [pc, #148]	@ (8000614 <MX_GPIO_Init+0xc8>)
 800057e:	f043 0304 	orr.w	r3, r3, #4
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b23      	ldr	r3, [pc, #140]	@ (8000614 <MX_GPIO_Init+0xc8>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000590:	4b20      	ldr	r3, [pc, #128]	@ (8000614 <MX_GPIO_Init+0xc8>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a1f      	ldr	r2, [pc, #124]	@ (8000614 <MX_GPIO_Init+0xc8>)
 8000596:	f043 0308 	orr.w	r3, r3, #8
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b1d      	ldr	r3, [pc, #116]	@ (8000614 <MX_GPIO_Init+0xc8>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0308 	and.w	r3, r3, #8
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPLAY_LED_Pin|DISPLAY_DC_Pin|DISPLAY_RESET_Pin|DISPLAY_CS_Pin, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	211e      	movs	r1, #30
 80005ac:	481a      	ldr	r0, [pc, #104]	@ (8000618 <MX_GPIO_Init+0xcc>)
 80005ae:	f001 fa40 	bl	8001a32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2101      	movs	r1, #1
 80005b6:	4819      	ldr	r0, [pc, #100]	@ (800061c <MX_GPIO_Init+0xd0>)
 80005b8:	f001 fa3b 	bl	8001a32 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISPLAY_LED_Pin DISPLAY_DC_Pin DISPLAY_RESET_Pin DISPLAY_CS_Pin */
  GPIO_InitStruct.Pin = DISPLAY_LED_Pin|DISPLAY_DC_Pin|DISPLAY_RESET_Pin|DISPLAY_CS_Pin;
 80005bc:	231e      	movs	r3, #30
 80005be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c0:	2301      	movs	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c8:	2302      	movs	r3, #2
 80005ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	4619      	mov	r1, r3
 80005d2:	4811      	ldr	r0, [pc, #68]	@ (8000618 <MX_GPIO_Init+0xcc>)
 80005d4:	f000 ffd6 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 80005d8:	2301      	movs	r3, #1
 80005da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2302      	movs	r3, #2
 80005e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	4619      	mov	r1, r3
 80005ee:	480b      	ldr	r0, [pc, #44]	@ (800061c <MX_GPIO_Init+0xd0>)
 80005f0:	f000 ffc8 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 80005f4:	2302      	movs	r3, #2
 80005f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4619      	mov	r1, r3
 8000606:	4805      	ldr	r0, [pc, #20]	@ (800061c <MX_GPIO_Init+0xd0>)
 8000608:	f000 ffbc 	bl	8001584 <HAL_GPIO_Init>

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000
 8000618:	40010800 	.word	0x40010800
 800061c:	40010c00 	.word	0x40010c00

08000620 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a04      	ldr	r2, [pc, #16]	@ (8000640 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d101      	bne.n	8000636 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000632:	f000 fe87 	bl	8001344 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40012c00 	.word	0x40012c00

08000644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000648:	b672      	cpsid	i
}
 800064a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <Error_Handler+0x8>

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000656:	4b15      	ldr	r3, [pc, #84]	@ (80006ac <HAL_MspInit+0x5c>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	4a14      	ldr	r2, [pc, #80]	@ (80006ac <HAL_MspInit+0x5c>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6193      	str	r3, [r2, #24]
 8000662:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <HAL_MspInit+0x5c>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <HAL_MspInit+0x5c>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	4a0e      	ldr	r2, [pc, #56]	@ (80006ac <HAL_MspInit+0x5c>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000678:	61d3      	str	r3, [r2, #28]
 800067a:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <HAL_MspInit+0x5c>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000686:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <HAL_MspInit+0x60>)
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	4a04      	ldr	r2, [pc, #16]	@ (80006b0 <HAL_MspInit+0x60>)
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40010000 	.word	0x40010000

080006b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a1b      	ldr	r2, [pc, #108]	@ (800073c <HAL_SPI_MspInit+0x88>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d12f      	bne.n	8000734 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000740 <HAL_SPI_MspInit+0x8c>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a19      	ldr	r2, [pc, #100]	@ (8000740 <HAL_SPI_MspInit+0x8c>)
 80006da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b17      	ldr	r3, [pc, #92]	@ (8000740 <HAL_SPI_MspInit+0x8c>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <HAL_SPI_MspInit+0x8c>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a13      	ldr	r2, [pc, #76]	@ (8000740 <HAL_SPI_MspInit+0x8c>)
 80006f2:	f043 0304 	orr.w	r3, r3, #4
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <HAL_SPI_MspInit+0x8c>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MOSI_Pin;
 8000704:	23a0      	movs	r3, #160	@ 0xa0
 8000706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070c:	2303      	movs	r3, #3
 800070e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	4619      	mov	r1, r3
 8000716:	480b      	ldr	r0, [pc, #44]	@ (8000744 <HAL_SPI_MspInit+0x90>)
 8000718:	f000 ff34 	bl	8001584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MISO_Pin;
 800071c:	2340      	movs	r3, #64	@ 0x40
 800071e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	4619      	mov	r1, r3
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <HAL_SPI_MspInit+0x90>)
 8000730:	f000 ff28 	bl	8001584 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40013000 	.word	0x40013000
 8000740:	40021000 	.word	0x40021000
 8000744:	40010800 	.word	0x40010800

08000748 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a08      	ldr	r2, [pc, #32]	@ (8000778 <HAL_SPI_MspDeInit+0x30>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d109      	bne.n	800076e <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <HAL_SPI_MspDeInit+0x34>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	4a07      	ldr	r2, [pc, #28]	@ (800077c <HAL_SPI_MspDeInit+0x34>)
 8000760:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000764:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin);
 8000766:	21e0      	movs	r1, #224	@ 0xe0
 8000768:	4805      	ldr	r0, [pc, #20]	@ (8000780 <HAL_SPI_MspDeInit+0x38>)
 800076a:	f001 f88f 	bl	800188c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40013000 	.word	0x40013000
 800077c:	40021000 	.word	0x40021000
 8000780:	40010800 	.word	0x40010800

08000784 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	@ 0x30
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000794:	2200      	movs	r2, #0
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	2019      	movs	r0, #25
 800079a:	f000 fec8 	bl	800152e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800079e:	2019      	movs	r0, #25
 80007a0:	f000 fee1 	bl	8001566 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000820 <HAL_InitTick+0x9c>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000820 <HAL_InitTick+0x9c>)
 80007aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <HAL_InitTick+0x9c>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007bc:	f107 0210 	add.w	r2, r7, #16
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4611      	mov	r1, r2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 fd2a 	bl	8002220 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007cc:	f001 fd14 	bl	80021f8 <HAL_RCC_GetPCLK2Freq>
 80007d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007d4:	4a13      	ldr	r2, [pc, #76]	@ (8000824 <HAL_InitTick+0xa0>)
 80007d6:	fba2 2303 	umull	r2, r3, r2, r3
 80007da:	0c9b      	lsrs	r3, r3, #18
 80007dc:	3b01      	subs	r3, #1
 80007de:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <HAL_InitTick+0xa4>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	@ (800082c <HAL_InitTick+0xa8>)
 80007e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <HAL_InitTick+0xa4>)
 80007e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80007ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000828 <HAL_InitTick+0xa4>)
 80007f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <HAL_InitTick+0xa4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <HAL_InitTick+0xa4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000800:	4809      	ldr	r0, [pc, #36]	@ (8000828 <HAL_InitTick+0xa4>)
 8000802:	f002 f9a1 	bl	8002b48 <HAL_TIM_Base_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d104      	bne.n	8000816 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800080c:	4806      	ldr	r0, [pc, #24]	@ (8000828 <HAL_InitTick+0xa4>)
 800080e:	f002 f9f3 	bl	8002bf8 <HAL_TIM_Base_Start_IT>
 8000812:	4603      	mov	r3, r0
 8000814:	e000      	b.n	8000818 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	3730      	adds	r7, #48	@ 0x30
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40021000 	.word	0x40021000
 8000824:	431bde83 	.word	0x431bde83
 8000828:	200000f0 	.word	0x200000f0
 800082c:	40012c00 	.word	0x40012c00

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <NMI_Handler+0x4>

08000838 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <HardFault_Handler+0x4>

08000840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <MemManage_Handler+0x4>

08000848 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <BusFault_Handler+0x4>

08000850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <UsageFault_Handler+0x4>

08000858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000868:	4802      	ldr	r0, [pc, #8]	@ (8000874 <TIM1_UP_IRQHandler+0x10>)
 800086a:	f002 fa17 	bl	8002c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200000f0 	.word	0x200000f0

08000878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000880:	4a14      	ldr	r2, [pc, #80]	@ (80008d4 <_sbrk+0x5c>)
 8000882:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <_sbrk+0x60>)
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d102      	bne.n	800089a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <_sbrk+0x64>)
 8000896:	4a12      	ldr	r2, [pc, #72]	@ (80008e0 <_sbrk+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <_sbrk+0x64>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d207      	bcs.n	80008b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a8:	f005 fa94 	bl	8005dd4 <__errno>
 80008ac:	4603      	mov	r3, r0
 80008ae:	220c      	movs	r2, #12
 80008b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	e009      	b.n	80008cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b8:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <_sbrk+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008be:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	4a05      	ldr	r2, [pc, #20]	@ (80008dc <_sbrk+0x64>)
 80008c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ca:	68fb      	ldr	r3, [r7, #12]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20005000 	.word	0x20005000
 80008d8:	00000400 	.word	0x00000400
 80008dc:	20000138 	.word	0x20000138
 80008e0:	20000420 	.word	0x20000420

080008e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <TFT_Display_Select>:
#include "stm32f1xx_hal.h"
#include "tft_display.h"
#include <stdlib.h>

void TFT_Display_Select() {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TFT_Display_CS_GPIO_Port, TFT_Display_CS_Pin, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2110      	movs	r1, #16
 80008f8:	4802      	ldr	r0, [pc, #8]	@ (8000904 <TFT_Display_Select+0x14>)
 80008fa:	f001 f89a 	bl	8001a32 <HAL_GPIO_WritePin>
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40010800 	.word	0x40010800

08000908 <TFT_Display_Unselect>:

void TFT_Display_Unselect() {
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TFT_Display_CS_GPIO_Port, TFT_Display_CS_Pin, GPIO_PIN_SET);
 800090c:	2201      	movs	r2, #1
 800090e:	2110      	movs	r1, #16
 8000910:	4802      	ldr	r0, [pc, #8]	@ (800091c <TFT_Display_Unselect+0x14>)
 8000912:	f001 f88e 	bl	8001a32 <HAL_GPIO_WritePin>
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40010800 	.word	0x40010800

08000920 <TFT_Display_TurnOn>:

void TFT_Display_TurnOn() {
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TFT_Display_LED_GPIO_Port, TFT_Display_LED_Pin, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2102      	movs	r1, #2
 8000928:	4802      	ldr	r0, [pc, #8]	@ (8000934 <TFT_Display_TurnOn+0x14>)
 800092a:	f001 f882 	bl	8001a32 <HAL_GPIO_WritePin>
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40010800 	.word	0x40010800

08000938 <TFT_Display_Reset>:

void TFT_Display_TurnOff() {
    HAL_GPIO_WritePin(TFT_Display_LED_GPIO_Port, TFT_Display_LED_Pin, GPIO_PIN_RESET);
}

static void TFT_Display_Reset() {
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TFT_Display_RES_GPIO_Port, TFT_Display_RES_Pin, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2108      	movs	r1, #8
 8000940:	4806      	ldr	r0, [pc, #24]	@ (800095c <TFT_Display_Reset+0x24>)
 8000942:	f001 f876 	bl	8001a32 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000946:	2005      	movs	r0, #5
 8000948:	f000 fd18 	bl	800137c <HAL_Delay>
    HAL_GPIO_WritePin(TFT_Display_RES_GPIO_Port, TFT_Display_RES_Pin, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	2108      	movs	r1, #8
 8000950:	4802      	ldr	r0, [pc, #8]	@ (800095c <TFT_Display_Reset+0x24>)
 8000952:	f001 f86e 	bl	8001a32 <HAL_GPIO_WritePin>
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40010800 	.word	0x40010800

08000960 <TFT_Display_WriteCommand>:

static void TFT_Display_WriteCommand(uint8_t cmd) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(TFT_Display_DC_GPIO_Port, TFT_Display_DC_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2104      	movs	r1, #4
 800096e:	4807      	ldr	r0, [pc, #28]	@ (800098c <TFT_Display_WriteCommand+0x2c>)
 8000970:	f001 f85f 	bl	8001a32 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&TFT_Display_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000974:	1df9      	adds	r1, r7, #7
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
 800097a:	2201      	movs	r2, #1
 800097c:	4804      	ldr	r0, [pc, #16]	@ (8000990 <TFT_Display_WriteCommand+0x30>)
 800097e:	f001 fd49 	bl	8002414 <HAL_SPI_Transmit>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40010800 	.word	0x40010800
 8000990:	20000090 	.word	0x20000090

08000994 <TFT_Display_WriteData>:

static void TFT_Display_WriteData(uint8_t* buff, size_t buff_size) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(TFT_Display_DC_GPIO_Port, TFT_Display_DC_Pin, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	2104      	movs	r1, #4
 80009a2:	4811      	ldr	r0, [pc, #68]	@ (80009e8 <TFT_Display_WriteData+0x54>)
 80009a4:	f001 f845 	bl	8001a32 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 80009a8:	e015      	b.n	80009d6 <TFT_Display_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80009b0:	bf28      	it	cs
 80009b2:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80009b6:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&TFT_Display_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80009b8:	89fa      	ldrh	r2, [r7, #14]
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	480a      	ldr	r0, [pc, #40]	@ (80009ec <TFT_Display_WriteData+0x58>)
 80009c2:	f001 fd27 	bl	8002414 <HAL_SPI_Transmit>
        buff += chunk_size;
 80009c6:	89fb      	ldrh	r3, [r7, #14]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	4413      	add	r3, r2
 80009cc:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 80009ce:	89fb      	ldrh	r3, [r7, #14]
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d1e6      	bne.n	80009aa <TFT_Display_WriteData+0x16>
    }
}
 80009dc:	bf00      	nop
 80009de:	bf00      	nop
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40010800 	.word	0x40010800
 80009ec:	20000090 	.word	0x20000090

080009f0 <TFT_Display_SetAddressWindow>:

static void TFT_Display_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4604      	mov	r4, r0
 80009f8:	4608      	mov	r0, r1
 80009fa:	4611      	mov	r1, r2
 80009fc:	461a      	mov	r2, r3
 80009fe:	4623      	mov	r3, r4
 8000a00:	80fb      	strh	r3, [r7, #6]
 8000a02:	4603      	mov	r3, r0
 8000a04:	80bb      	strh	r3, [r7, #4]
 8000a06:	460b      	mov	r3, r1
 8000a08:	807b      	strh	r3, [r7, #2]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	803b      	strh	r3, [r7, #0]
    // column address set
	TFT_Display_WriteCommand(0x2A); // CASET
 8000a0e:	202a      	movs	r0, #42	@ 0x2a
 8000a10:	f7ff ffa6 	bl	8000960 <TFT_Display_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	0a1b      	lsrs	r3, r3, #8
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	733b      	strb	r3, [r7, #12]
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	737b      	strb	r3, [r7, #13]
 8000a24:	887b      	ldrh	r3, [r7, #2]
 8000a26:	0a1b      	lsrs	r3, r3, #8
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	73bb      	strb	r3, [r7, #14]
 8000a2e:	887b      	ldrh	r3, [r7, #2]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	73fb      	strb	r3, [r7, #15]
        TFT_Display_WriteData(data, sizeof(data));
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	2104      	movs	r1, #4
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ffaa 	bl	8000994 <TFT_Display_WriteData>
    }

    // row address set
    TFT_Display_WriteCommand(0x2B); // RASET
 8000a40:	202b      	movs	r0, #43	@ 0x2b
 8000a42:	f7ff ff8d 	bl	8000960 <TFT_Display_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000a46:	88bb      	ldrh	r3, [r7, #4]
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	723b      	strb	r3, [r7, #8]
 8000a50:	88bb      	ldrh	r3, [r7, #4]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	727b      	strb	r3, [r7, #9]
 8000a56:	883b      	ldrh	r3, [r7, #0]
 8000a58:	0a1b      	lsrs	r3, r3, #8
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	72bb      	strb	r3, [r7, #10]
 8000a60:	883b      	ldrh	r3, [r7, #0]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	72fb      	strb	r3, [r7, #11]
        TFT_Display_WriteData(data, sizeof(data));
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	2104      	movs	r1, #4
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff91 	bl	8000994 <TFT_Display_WriteData>
    }

    // write to RAM
    TFT_Display_WriteCommand(0x2C); // RAMWR
 8000a72:	202c      	movs	r0, #44	@ 0x2c
 8000a74:	f7ff ff74 	bl	8000960 <TFT_Display_WriteCommand>
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd90      	pop	{r4, r7, pc}

08000a80 <TFT_Display_Init>:

void TFT_Display_Init() {
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b09b      	sub	sp, #108	@ 0x6c
 8000a84:	af00      	add	r7, sp, #0
	TFT_Display_Select();
 8000a86:	f7ff ff33 	bl	80008f0 <TFT_Display_Select>
	TFT_Display_Reset();
 8000a8a:	f7ff ff55 	bl	8000938 <TFT_Display_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
	TFT_Display_WriteCommand(0x01);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff ff66 	bl	8000960 <TFT_Display_WriteCommand>
    HAL_Delay(1000);
 8000a94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a98:	f000 fc70 	bl	800137c <HAL_Delay>
        
    // POWER CONTROL A
    TFT_Display_WriteCommand(0xCB);
 8000a9c:	20cb      	movs	r0, #203	@ 0xcb
 8000a9e:	f7ff ff5f 	bl	8000960 <TFT_Display_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8000aa2:	4a88      	ldr	r2, [pc, #544]	@ (8000cc4 <TFT_Display_Init+0x244>)
 8000aa4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000aa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aac:	6018      	str	r0, [r3, #0]
 8000aae:	3304      	adds	r3, #4
 8000ab0:	7019      	strb	r1, [r3, #0]
        TFT_Display_WriteData(data, sizeof(data));
 8000ab2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000ab6:	2105      	movs	r1, #5
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff6b 	bl	8000994 <TFT_Display_WriteData>
    }

    // POWER CONTROL B
    TFT_Display_WriteCommand(0xCF);
 8000abe:	20cf      	movs	r0, #207	@ 0xcf
 8000ac0:	f7ff ff4e 	bl	8000960 <TFT_Display_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8000ac4:	4a80      	ldr	r2, [pc, #512]	@ (8000cc8 <TFT_Display_Init+0x248>)
 8000ac6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000aca:	6812      	ldr	r2, [r2, #0]
 8000acc:	4611      	mov	r1, r2
 8000ace:	8019      	strh	r1, [r3, #0]
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	0c12      	lsrs	r2, r2, #16
 8000ad4:	701a      	strb	r2, [r3, #0]
        TFT_Display_WriteData(data, sizeof(data));
 8000ad6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ada:	2103      	movs	r1, #3
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff59 	bl	8000994 <TFT_Display_WriteData>
    }

    // DRIVER TIMING CONTROL A
    TFT_Display_WriteCommand(0xE8);
 8000ae2:	20e8      	movs	r0, #232	@ 0xe8
 8000ae4:	f7ff ff3c 	bl	8000960 <TFT_Display_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8000ae8:	4a78      	ldr	r2, [pc, #480]	@ (8000ccc <TFT_Display_Init+0x24c>)
 8000aea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000aee:	6812      	ldr	r2, [r2, #0]
 8000af0:	4611      	mov	r1, r2
 8000af2:	8019      	strh	r1, [r3, #0]
 8000af4:	3302      	adds	r3, #2
 8000af6:	0c12      	lsrs	r2, r2, #16
 8000af8:	701a      	strb	r2, [r3, #0]
        TFT_Display_WriteData(data, sizeof(data));
 8000afa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000afe:	2103      	movs	r1, #3
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff47 	bl	8000994 <TFT_Display_WriteData>
    }

    // DRIVER TIMING CONTROL B
    TFT_Display_WriteCommand(0xEA);
 8000b06:	20ea      	movs	r0, #234	@ 0xea
 8000b08:	f7ff ff2a 	bl	8000960 <TFT_Display_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        TFT_Display_WriteData(data, sizeof(data));
 8000b12:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b16:	2102      	movs	r1, #2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff3b 	bl	8000994 <TFT_Display_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    TFT_Display_WriteCommand(0xED);
 8000b1e:	20ed      	movs	r0, #237	@ 0xed
 8000b20:	f7ff ff1e 	bl	8000960 <TFT_Display_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8000b24:	4b6a      	ldr	r3, [pc, #424]	@ (8000cd0 <TFT_Display_Init+0x250>)
 8000b26:	653b      	str	r3, [r7, #80]	@ 0x50
        TFT_Display_WriteData(data, sizeof(data));
 8000b28:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000b2c:	2104      	movs	r1, #4
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ff30 	bl	8000994 <TFT_Display_WriteData>
    }

    // PUMP RATIO CONTROL
    TFT_Display_WriteCommand(0xF7);
 8000b34:	20f7      	movs	r0, #247	@ 0xf7
 8000b36:	f7ff ff13 	bl	8000960 <TFT_Display_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8000b3a:	2320      	movs	r3, #32
 8000b3c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        TFT_Display_WriteData(data, sizeof(data));
 8000b40:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b44:	2101      	movs	r1, #1
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ff24 	bl	8000994 <TFT_Display_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    TFT_Display_WriteCommand(0xC0);
 8000b4c:	20c0      	movs	r0, #192	@ 0xc0
 8000b4e:	f7ff ff07 	bl	8000960 <TFT_Display_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8000b52:	2323      	movs	r3, #35	@ 0x23
 8000b54:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        TFT_Display_WriteData(data, sizeof(data));
 8000b58:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff18 	bl	8000994 <TFT_Display_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    TFT_Display_WriteCommand(0xC1);
 8000b64:	20c1      	movs	r0, #193	@ 0xc1
 8000b66:	f7ff fefb 	bl	8000960 <TFT_Display_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8000b6a:	2310      	movs	r3, #16
 8000b6c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        TFT_Display_WriteData(data, sizeof(data));
 8000b70:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000b74:	2101      	movs	r1, #1
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ff0c 	bl	8000994 <TFT_Display_WriteData>
    }

    // VCM CONTROL
    TFT_Display_WriteCommand(0xC5);
 8000b7c:	20c5      	movs	r0, #197	@ 0xc5
 8000b7e:	f7ff feef 	bl	8000960 <TFT_Display_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8000b82:	f642 033e 	movw	r3, #10302	@ 0x283e
 8000b86:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        TFT_Display_WriteData(data, sizeof(data));
 8000b8a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b8e:	2102      	movs	r1, #2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff feff 	bl	8000994 <TFT_Display_WriteData>
    }

    // VCM CONTROL 2
    TFT_Display_WriteCommand(0xC7);
 8000b96:	20c7      	movs	r0, #199	@ 0xc7
 8000b98:	f7ff fee2 	bl	8000960 <TFT_Display_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8000b9c:	2386      	movs	r3, #134	@ 0x86
 8000b9e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        TFT_Display_WriteData(data, sizeof(data));
 8000ba2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fef3 	bl	8000994 <TFT_Display_WriteData>
    }

    // MEMORY ACCESS CONTROL
    TFT_Display_WriteCommand(0x36);
 8000bae:	2036      	movs	r0, #54	@ 0x36
 8000bb0:	f7ff fed6 	bl	8000960 <TFT_Display_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8000bb4:	2348      	movs	r3, #72	@ 0x48
 8000bb6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        TFT_Display_WriteData(data, sizeof(data));
 8000bba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fee7 	bl	8000994 <TFT_Display_WriteData>
    }

    // PIXEL FORMAT
    TFT_Display_WriteCommand(0x3A);
 8000bc6:	203a      	movs	r0, #58	@ 0x3a
 8000bc8:	f7ff feca 	bl	8000960 <TFT_Display_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8000bcc:	2355      	movs	r3, #85	@ 0x55
 8000bce:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        TFT_Display_WriteData(data, sizeof(data));
 8000bd2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fedb 	bl	8000994 <TFT_Display_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    TFT_Display_WriteCommand(0xB1);
 8000bde:	20b1      	movs	r0, #177	@ 0xb1
 8000be0:	f7ff febe 	bl	8000960 <TFT_Display_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8000be4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000be8:	863b      	strh	r3, [r7, #48]	@ 0x30
        TFT_Display_WriteData(data, sizeof(data));
 8000bea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bee:	2102      	movs	r1, #2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fecf 	bl	8000994 <TFT_Display_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    TFT_Display_WriteCommand(0xB6);
 8000bf6:	20b6      	movs	r0, #182	@ 0xb6
 8000bf8:	f7ff feb2 	bl	8000960 <TFT_Display_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8000bfc:	4a35      	ldr	r2, [pc, #212]	@ (8000cd4 <TFT_Display_Init+0x254>)
 8000bfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c02:	6812      	ldr	r2, [r2, #0]
 8000c04:	4611      	mov	r1, r2
 8000c06:	8019      	strh	r1, [r3, #0]
 8000c08:	3302      	adds	r3, #2
 8000c0a:	0c12      	lsrs	r2, r2, #16
 8000c0c:	701a      	strb	r2, [r3, #0]
        TFT_Display_WriteData(data, sizeof(data));
 8000c0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c12:	2103      	movs	r1, #3
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff febd 	bl	8000994 <TFT_Display_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    TFT_Display_WriteCommand(0xF2);
 8000c1a:	20f2      	movs	r0, #242	@ 0xf2
 8000c1c:	f7ff fea0 	bl	8000960 <TFT_Display_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8000c20:	2300      	movs	r3, #0
 8000c22:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        TFT_Display_WriteData(data, sizeof(data));
 8000c26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff feb1 	bl	8000994 <TFT_Display_WriteData>
    }

    // GAMMA CURVE SELECTED
    TFT_Display_WriteCommand(0x26);
 8000c32:	2026      	movs	r0, #38	@ 0x26
 8000c34:	f7ff fe94 	bl	8000960 <TFT_Display_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8000c38:	2301      	movs	r3, #1
 8000c3a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        TFT_Display_WriteData(data, sizeof(data));
 8000c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c42:	2101      	movs	r1, #1
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fea5 	bl	8000994 <TFT_Display_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    TFT_Display_WriteCommand(0xE0);
 8000c4a:	20e0      	movs	r0, #224	@ 0xe0
 8000c4c:	f7ff fe88 	bl	8000960 <TFT_Display_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8000c50:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <TFT_Display_Init+0x258>)
 8000c52:	f107 0414 	add.w	r4, r7, #20
 8000c56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c58:	c407      	stmia	r4!, {r0, r1, r2}
 8000c5a:	8023      	strh	r3, [r4, #0]
 8000c5c:	3402      	adds	r4, #2
 8000c5e:	0c1b      	lsrs	r3, r3, #16
 8000c60:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        TFT_Display_WriteData(data, sizeof(data));
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	210f      	movs	r1, #15
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fe93 	bl	8000994 <TFT_Display_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    TFT_Display_WriteCommand(0xE1);
 8000c6e:	20e1      	movs	r0, #225	@ 0xe1
 8000c70:	f7ff fe76 	bl	8000960 <TFT_Display_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8000c74:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <TFT_Display_Init+0x25c>)
 8000c76:	1d3c      	adds	r4, r7, #4
 8000c78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c7a:	c407      	stmia	r4!, {r0, r1, r2}
 8000c7c:	8023      	strh	r3, [r4, #0]
 8000c7e:	3402      	adds	r4, #2
 8000c80:	0c1b      	lsrs	r3, r3, #16
 8000c82:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        TFT_Display_WriteData(data, sizeof(data));
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	210f      	movs	r1, #15
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fe83 	bl	8000994 <TFT_Display_WriteData>
    }

    // EXIT SLEEP
    TFT_Display_WriteCommand(0x11);
 8000c8e:	2011      	movs	r0, #17
 8000c90:	f7ff fe66 	bl	8000960 <TFT_Display_WriteCommand>
    HAL_Delay(120);
 8000c94:	2078      	movs	r0, #120	@ 0x78
 8000c96:	f000 fb71 	bl	800137c <HAL_Delay>

    // TURN ON DISPLAY
    TFT_Display_WriteCommand(0x29);
 8000c9a:	2029      	movs	r0, #41	@ 0x29
 8000c9c:	f7ff fe60 	bl	8000960 <TFT_Display_WriteCommand>

    // MADCTL
    TFT_Display_WriteCommand(0x36);
 8000ca0:	2036      	movs	r0, #54	@ 0x36
 8000ca2:	f7ff fe5d 	bl	8000960 <TFT_Display_WriteCommand>
    {
        uint8_t data[] = { TFT_Display_ROTATION };
 8000ca6:	2328      	movs	r3, #40	@ 0x28
 8000ca8:	703b      	strb	r3, [r7, #0]
        TFT_Display_WriteData(data, sizeof(data));
 8000caa:	463b      	mov	r3, r7
 8000cac:	2101      	movs	r1, #1
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fe70 	bl	8000994 <TFT_Display_WriteData>
    }

    TFT_Display_TurnOn();
 8000cb4:	f7ff fe34 	bl	8000920 <TFT_Display_TurnOn>

    TFT_Display_Unselect();
 8000cb8:	f7ff fe26 	bl	8000908 <TFT_Display_Unselect>
}
 8000cbc:	bf00      	nop
 8000cbe:	376c      	adds	r7, #108	@ 0x6c
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd90      	pop	{r4, r7, pc}
 8000cc4:	080065b0 	.word	0x080065b0
 8000cc8:	080065b8 	.word	0x080065b8
 8000ccc:	080065bc 	.word	0x080065bc
 8000cd0:	81120364 	.word	0x81120364
 8000cd4:	080065c0 	.word	0x080065c0
 8000cd8:	080065c4 	.word	0x080065c4
 8000cdc:	080065d4 	.word	0x080065d4

08000ce0 <TFT_Display_DrawPixel>:

void TFT_Display_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80fb      	strh	r3, [r7, #6]
 8000cea:	460b      	mov	r3, r1
 8000cec:	80bb      	strh	r3, [r7, #4]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	807b      	strh	r3, [r7, #2]
    if((x >= TFT_Display_WIDTH) || (y >= TFT_Display_HEIGHT))
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000cf8:	d21f      	bcs.n	8000d3a <TFT_Display_DrawPixel+0x5a>
 8000cfa:	88bb      	ldrh	r3, [r7, #4]
 8000cfc:	2bef      	cmp	r3, #239	@ 0xef
 8000cfe:	d81c      	bhi.n	8000d3a <TFT_Display_DrawPixel+0x5a>
        return;

    TFT_Display_Select();
 8000d00:	f7ff fdf6 	bl	80008f0 <TFT_Display_Select>

    TFT_Display_SetAddressWindow(x, y, x+1, y+1);
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	3301      	adds	r3, #1
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	88bb      	ldrh	r3, [r7, #4]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	88b9      	ldrh	r1, [r7, #4]
 8000d12:	88f8      	ldrh	r0, [r7, #6]
 8000d14:	f7ff fe6c 	bl	80009f0 <TFT_Display_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000d18:	887b      	ldrh	r3, [r7, #2]
 8000d1a:	0a1b      	lsrs	r3, r3, #8
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	733b      	strb	r3, [r7, #12]
 8000d22:	887b      	ldrh	r3, [r7, #2]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	737b      	strb	r3, [r7, #13]
    TFT_Display_WriteData(data, sizeof(data));
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fe30 	bl	8000994 <TFT_Display_WriteData>

    TFT_Display_Unselect();
 8000d34:	f7ff fde8 	bl	8000908 <TFT_Display_Unselect>
 8000d38:	e000      	b.n	8000d3c <TFT_Display_DrawPixel+0x5c>
        return;
 8000d3a:	bf00      	nop
}
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <TFT_Display_WriteChar>:

static void TFT_Display_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000d42:	b082      	sub	sp, #8
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	80fb      	strh	r3, [r7, #6]
 8000d50:	460b      	mov	r3, r1
 8000d52:	80bb      	strh	r3, [r7, #4]
 8000d54:	4613      	mov	r3, r2
 8000d56:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    TFT_Display_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000d58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	4413      	add	r3, r2
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	3b01      	subs	r3, #1
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	88bb      	ldrh	r3, [r7, #4]
 8000d70:	440b      	add	r3, r1
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	3b01      	subs	r3, #1
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	88b9      	ldrh	r1, [r7, #4]
 8000d7a:	88f8      	ldrh	r0, [r7, #6]
 8000d7c:	f7ff fe38 	bl	80009f0 <TFT_Display_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
 8000d84:	e041      	b.n	8000e0a <TFT_Display_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 8000d86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	3b20      	subs	r3, #32
 8000d8c:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8000d90:	fb01 f303 	mul.w	r3, r1, r3
 8000d94:	4619      	mov	r1, r3
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	440b      	add	r3, r1
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4413      	add	r3, r2
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
 8000da6:	e027      	b.n	8000df8 <TFT_Display_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d00e      	beq.n	8000dd6 <TFT_Display_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000db8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000dba:	0a1b      	lsrs	r3, r3, #8
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	743b      	strb	r3, [r7, #16]
 8000dc2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	747b      	strb	r3, [r7, #17]
                TFT_Display_WriteData(data, sizeof(data));
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	2102      	movs	r1, #2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fde0 	bl	8000994 <TFT_Display_WriteData>
 8000dd4:	e00d      	b.n	8000df2 <TFT_Display_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000dd6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	733b      	strb	r3, [r7, #12]
 8000de0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	737b      	strb	r3, [r7, #13]
                TFT_Display_WriteData(data, sizeof(data));
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	2102      	movs	r1, #2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fdd1 	bl	8000994 <TFT_Display_WriteData>
        for(j = 0; j < font.width; j++) {
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	3301      	adds	r3, #1
 8000df6:	61bb      	str	r3, [r7, #24]
 8000df8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d3d1      	bcc.n	8000da8 <TFT_Display_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	3301      	adds	r3, #1
 8000e08:	61fb      	str	r3, [r7, #28]
 8000e0a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000e0e:	461a      	mov	r2, r3
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d3b7      	bcc.n	8000d86 <TFT_Display_WriteChar+0x44>
            }
        }
    }
}
 8000e16:	bf00      	nop
 8000e18:	bf00      	nop
 8000e1a:	3720      	adds	r7, #32
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e22:	b002      	add	sp, #8
 8000e24:	4770      	bx	lr

08000e26 <TFT_Display_WriteString>:

void TFT_Display_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000e26:	b082      	sub	sp, #8
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af04      	add	r7, sp, #16
 8000e2e:	603a      	str	r2, [r7, #0]
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	4603      	mov	r3, r0
 8000e34:	80fb      	strh	r3, [r7, #6]
 8000e36:	460b      	mov	r3, r1
 8000e38:	80bb      	strh	r3, [r7, #4]
	TFT_Display_Select();
 8000e3a:	f7ff fd59 	bl	80008f0 <TFT_Display_Select>

    while(*str) {
 8000e3e:	e02e      	b.n	8000e9e <TFT_Display_WriteString+0x78>
        if(x + font.width >= TFT_Display_WIDTH) {
 8000e40:	88fb      	ldrh	r3, [r7, #6]
 8000e42:	7d3a      	ldrb	r2, [r7, #20]
 8000e44:	4413      	add	r3, r2
 8000e46:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e4a:	db13      	blt.n	8000e74 <TFT_Display_WriteString+0x4e>
            x = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000e50:	7d7b      	ldrb	r3, [r7, #21]
 8000e52:	461a      	mov	r2, r3
 8000e54:	88bb      	ldrh	r3, [r7, #4]
 8000e56:	4413      	add	r3, r2
 8000e58:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= TFT_Display_HEIGHT) {
 8000e5a:	88bb      	ldrh	r3, [r7, #4]
 8000e5c:	7d7a      	ldrb	r2, [r7, #21]
 8000e5e:	4413      	add	r3, r2
 8000e60:	2bef      	cmp	r3, #239	@ 0xef
 8000e62:	dc21      	bgt.n	8000ea8 <TFT_Display_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b20      	cmp	r3, #32
 8000e6a:	d103      	bne.n	8000e74 <TFT_Display_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	603b      	str	r3, [r7, #0]
                continue;
 8000e72:	e014      	b.n	8000e9e <TFT_Display_WriteString+0x78>
            }
        }

        TFT_Display_WriteChar(x, y, *str, font, color, bgcolor);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	781a      	ldrb	r2, [r3, #0]
 8000e78:	88b9      	ldrh	r1, [r7, #4]
 8000e7a:	88f8      	ldrh	r0, [r7, #6]
 8000e7c:	8c3b      	ldrh	r3, [r7, #32]
 8000e7e:	9302      	str	r3, [sp, #8]
 8000e80:	8bbb      	ldrh	r3, [r7, #28]
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f7ff ff5a 	bl	8000d42 <TFT_Display_WriteChar>
        x += font.width;
 8000e8e:	7d3b      	ldrb	r3, [r7, #20]
 8000e90:	461a      	mov	r2, r3
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	4413      	add	r3, r2
 8000e96:	80fb      	strh	r3, [r7, #6]
        str++;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1cc      	bne.n	8000e40 <TFT_Display_WriteString+0x1a>
 8000ea6:	e000      	b.n	8000eaa <TFT_Display_WriteString+0x84>
                break;
 8000ea8:	bf00      	nop
    }

    TFT_Display_Unselect();
 8000eaa:	f7ff fd2d 	bl	8000908 <TFT_Display_Unselect>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000eb8:	b002      	add	sp, #8
 8000eba:	4770      	bx	lr

08000ebc <TFT_Display_DrawLine>:

void TFT_Display_DrawLine(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08c      	sub	sp, #48	@ 0x30
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 8000eca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000ed4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000ed8:	6839      	ldr	r1, [r7, #0]
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	1acb      	subs	r3, r1, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	bfb8      	it	lt
 8000ee2:	425b      	neglt	r3, r3
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	bfcc      	ite	gt
 8000ee8:	2301      	movgt	r3, #1
 8000eea:	2300      	movle	r3, #0
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24

	if (steep)
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00d      	beq.n	8000f12 <TFT_Display_DrawLine+0x56>
	{
		swap(x1,y1);
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000f02:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	843b      	strh	r3, [r7, #32]
 8000f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000f10:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	if(x1>x2)
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d90d      	bls.n	8000f36 <TFT_Display_DrawLine+0x7a>
	{
		swap(x1,x2);
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	83fb      	strh	r3, [r7, #30]
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f26:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	83bb      	strh	r3, [r7, #28]
 8000f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000f34:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000f3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	bfb8      	it	lt
 8000f48:	425b      	neglt	r3, r3
 8000f4a:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	0fda      	lsrs	r2, r3, #31
 8000f50:	4413      	add	r3, r2
 8000f52:	105b      	asrs	r3, r3, #1
 8000f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ystep;
	if(y1 < y2)
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d202      	bcs.n	8000f64 <TFT_Display_DrawLine+0xa8>
	{
		ystep = 1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f62:	e029      	b.n	8000fb8 <TFT_Display_DrawLine+0xfc>
	}
	else
	{
		ystep = -1;
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295
 8000f68:	62bb      	str	r3, [r7, #40]	@ 0x28
	}
	for (; x1 <= x2; x1++)
 8000f6a:	e025      	b.n	8000fb8 <TFT_Display_DrawLine+0xfc>
	{
		if (steep)
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d009      	beq.n	8000f86 <TFT_Display_DrawLine+0xca>
		{
			TFT_Display_DrawPixel(y1, x1, color);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	b291      	uxth	r1, r2
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	b292      	uxth	r2, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff feae 	bl	8000ce0 <TFT_Display_DrawPixel>
 8000f84:	e008      	b.n	8000f98 <TFT_Display_DrawLine+0xdc>

		}
		else
		{
			TFT_Display_DrawPixel(x1, y1, color);
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	b291      	uxth	r1, r2
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	b292      	uxth	r2, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fea4 	bl	8000ce0 <TFT_Display_DrawPixel>
		}
		err -= dy;
 8000f98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (err < 0)
 8000fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	da05      	bge.n	8000fb2 <TFT_Display_DrawLine+0xf6>
		{
			y1 += ystep;
 8000fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	4413      	add	r3, r2
 8000fac:	607b      	str	r3, [r7, #4]
			err = dx;
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (; x1 <= x2; x1++)
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d9d5      	bls.n	8000f6c <TFT_Display_DrawLine+0xb0>
		}
	}
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3730      	adds	r7, #48	@ 0x30
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <TFT_Display_DrawRectangle>:

void TFT_Display_DrawRectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af02      	add	r7, sp, #8
 8000fd0:	60f8      	str	r0, [r7, #12]
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	603b      	str	r3, [r7, #0]
	TFT_Display_DrawLine(color, x1, y1, x2, y1);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f7ff ff6a 	bl	8000ebc <TFT_Display_DrawLine>
	TFT_Display_DrawLine(color, x2, y1, x2, y2);
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	6839      	ldr	r1, [r7, #0]
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	f7ff ff62 	bl	8000ebc <TFT_Display_DrawLine>
	TFT_Display_DrawLine(color, x1, y1, x1, y2);
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f7ff ff5a 	bl	8000ebc <TFT_Display_DrawLine>
	TFT_Display_DrawLine(color, x1, y2, x2, y2);
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f7ff ff52 	bl	8000ebc <TFT_Display_DrawLine>
}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <TFT_Display_FillRectangle>:

void TFT_Display_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	4604      	mov	r4, r0
 8001028:	4608      	mov	r0, r1
 800102a:	4611      	mov	r1, r2
 800102c:	461a      	mov	r2, r3
 800102e:	4623      	mov	r3, r4
 8001030:	80fb      	strh	r3, [r7, #6]
 8001032:	4603      	mov	r3, r0
 8001034:	80bb      	strh	r3, [r7, #4]
 8001036:	460b      	mov	r3, r1
 8001038:	807b      	strh	r3, [r7, #2]
 800103a:	4613      	mov	r3, r2
 800103c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= TFT_Display_WIDTH) || (y >= TFT_Display_HEIGHT)) return;
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001044:	d252      	bcs.n	80010ec <TFT_Display_FillRectangle+0xcc>
 8001046:	88bb      	ldrh	r3, [r7, #4]
 8001048:	2bef      	cmp	r3, #239	@ 0xef
 800104a:	d84f      	bhi.n	80010ec <TFT_Display_FillRectangle+0xcc>
    if((x + w - 1) >= TFT_Display_WIDTH) w = TFT_Display_WIDTH - x;
 800104c:	88fa      	ldrh	r2, [r7, #6]
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	4413      	add	r3, r2
 8001052:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001056:	dd03      	ble.n	8001060 <TFT_Display_FillRectangle+0x40>
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 800105e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= TFT_Display_HEIGHT) h = TFT_Display_HEIGHT - y;
 8001060:	88ba      	ldrh	r2, [r7, #4]
 8001062:	883b      	ldrh	r3, [r7, #0]
 8001064:	4413      	add	r3, r2
 8001066:	2bf0      	cmp	r3, #240	@ 0xf0
 8001068:	dd03      	ble.n	8001072 <TFT_Display_FillRectangle+0x52>
 800106a:	88bb      	ldrh	r3, [r7, #4]
 800106c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001070:	803b      	strh	r3, [r7, #0]

    TFT_Display_Select();
 8001072:	f7ff fc3d 	bl	80008f0 <TFT_Display_Select>
    TFT_Display_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001076:	88fa      	ldrh	r2, [r7, #6]
 8001078:	887b      	ldrh	r3, [r7, #2]
 800107a:	4413      	add	r3, r2
 800107c:	b29b      	uxth	r3, r3
 800107e:	3b01      	subs	r3, #1
 8001080:	b29c      	uxth	r4, r3
 8001082:	88ba      	ldrh	r2, [r7, #4]
 8001084:	883b      	ldrh	r3, [r7, #0]
 8001086:	4413      	add	r3, r2
 8001088:	b29b      	uxth	r3, r3
 800108a:	3b01      	subs	r3, #1
 800108c:	b29b      	uxth	r3, r3
 800108e:	88b9      	ldrh	r1, [r7, #4]
 8001090:	88f8      	ldrh	r0, [r7, #6]
 8001092:	4622      	mov	r2, r4
 8001094:	f7ff fcac 	bl	80009f0 <TFT_Display_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001098:	8c3b      	ldrh	r3, [r7, #32]
 800109a:	0a1b      	lsrs	r3, r3, #8
 800109c:	b29b      	uxth	r3, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	733b      	strb	r3, [r7, #12]
 80010a2:	8c3b      	ldrh	r3, [r7, #32]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(TFT_Display_DC_GPIO_Port, TFT_Display_DC_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2104      	movs	r1, #4
 80010ac:	4811      	ldr	r0, [pc, #68]	@ (80010f4 <TFT_Display_FillRectangle+0xd4>)
 80010ae:	f000 fcc0 	bl	8001a32 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80010b2:	883b      	ldrh	r3, [r7, #0]
 80010b4:	80bb      	strh	r3, [r7, #4]
 80010b6:	e013      	b.n	80010e0 <TFT_Display_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 80010b8:	887b      	ldrh	r3, [r7, #2]
 80010ba:	80fb      	strh	r3, [r7, #6]
 80010bc:	e00a      	b.n	80010d4 <TFT_Display_FillRectangle+0xb4>
            HAL_SPI_Transmit(&TFT_Display_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80010be:	f107 010c 	add.w	r1, r7, #12
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	2202      	movs	r2, #2
 80010c8:	480b      	ldr	r0, [pc, #44]	@ (80010f8 <TFT_Display_FillRectangle+0xd8>)
 80010ca:	f001 f9a3 	bl	8002414 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	80fb      	strh	r3, [r7, #6]
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f1      	bne.n	80010be <TFT_Display_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 80010da:	88bb      	ldrh	r3, [r7, #4]
 80010dc:	3b01      	subs	r3, #1
 80010de:	80bb      	strh	r3, [r7, #4]
 80010e0:	88bb      	ldrh	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1e8      	bne.n	80010b8 <TFT_Display_FillRectangle+0x98>
        }
    }

    TFT_Display_Unselect();
 80010e6:	f7ff fc0f 	bl	8000908 <TFT_Display_Unselect>
 80010ea:	e000      	b.n	80010ee <TFT_Display_FillRectangle+0xce>
    if((x >= TFT_Display_WIDTH) || (y >= TFT_Display_HEIGHT)) return;
 80010ec:	bf00      	nop
}
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd90      	pop	{r4, r7, pc}
 80010f4:	40010800 	.word	0x40010800
 80010f8:	20000090 	.word	0x20000090

080010fc <TFT_Display_FillScreen>:

void TFT_Display_FillScreen(uint16_t color) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af02      	add	r7, sp, #8
 8001102:	4603      	mov	r3, r0
 8001104:	80fb      	strh	r3, [r7, #6]
	TFT_Display_FillRectangle(0, 0, TFT_Display_WIDTH, TFT_Display_HEIGHT, color);
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	23f0      	movs	r3, #240	@ 0xf0
 800110c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001110:	2100      	movs	r1, #0
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff ff84 	bl	8001020 <TFT_Display_FillRectangle>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <TFT_Touch_Select>:

#define READ_X 0xD0
#define READ_Y 0x90
#define NSAMPLES 16

void TFT_Touch_Select() {
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TFT_TOUCH_CS_GPIO_Port, TFT_TOUCH_CS_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	2101      	movs	r1, #1
 8001128:	4802      	ldr	r0, [pc, #8]	@ (8001134 <TFT_Touch_Select+0x14>)
 800112a:	f000 fc82 	bl	8001a32 <HAL_GPIO_WritePin>
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40010c00 	.word	0x40010c00

08001138 <TFT_Touch_Unselect>:

void TFT_Touch_Unselect() {
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TFT_TOUCH_CS_GPIO_Port, TFT_TOUCH_CS_Pin, GPIO_PIN_SET);
 800113c:	2201      	movs	r2, #1
 800113e:	2101      	movs	r1, #1
 8001140:	4802      	ldr	r0, [pc, #8]	@ (800114c <TFT_Touch_Unselect+0x14>)
 8001142:	f000 fc76 	bl	8001a32 <HAL_GPIO_WritePin>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40010c00 	.word	0x40010c00

08001150 <TFT_Touch_ScreenPressed>:

bool TFT_Touch_ScreenPressed() {
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(TFT_TOUCH_IRQ_GPIO_Port, TFT_TOUCH_IRQ_Pin) == GPIO_PIN_RESET;
 8001154:	2102      	movs	r1, #2
 8001156:	4805      	ldr	r0, [pc, #20]	@ (800116c <TFT_Touch_ScreenPressed+0x1c>)
 8001158:	f000 fc54 	bl	8001a04 <HAL_GPIO_ReadPin>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	bf0c      	ite	eq
 8001162:	2301      	moveq	r3, #1
 8001164:	2300      	movne	r3, #0
 8001166:	b2db      	uxtb	r3, r3
}
 8001168:	4618      	mov	r0, r3
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40010c00 	.word	0x40010c00

08001170 <TFT_Touch_GetCoordinates>:

bool TFT_Touch_GetCoordinates(uint16_t* x, uint16_t* y) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af02      	add	r7, sp, #8
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_x[] = { READ_X };
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

    TFT_Touch_Select();
 800117a:	f7ff ffd1 	bl	8001120 <TFT_Touch_Select>

    uint32_t avg_x = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
    uint32_t avg_y = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
    uint8_t nsamples = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	73fb      	strb	r3, [r7, #15]
    uint8_t x_raw[2], y_raw[2];

    for(uint8_t i = 0; i < NSAMPLES; i++) {
 800118a:	2300      	movs	r3, #0
 800118c:	73bb      	strb	r3, [r7, #14]
 800118e:	e043      	b.n	8001218 <TFT_Touch_GetCoordinates+0xa8>
        if(!TFT_Touch_ScreenPressed())
 8001190:	f7ff ffde 	bl	8001150 <TFT_Touch_ScreenPressed>
 8001194:	4603      	mov	r3, r0
 8001196:	f083 0301 	eor.w	r3, r3, #1
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d13f      	bne.n	8001220 <TFT_Touch_GetCoordinates+0xb0>
            break;

        nsamples++;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	3301      	adds	r3, #1
 80011a4:	73fb      	strb	r3, [r7, #15]

        /* Read Y coords: Have to transmit the command and then read the next 2 bytes */
        HAL_SPI_Transmit(&TFT_TOUCH_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	2201      	movs	r2, #1
 80011ac:	4942      	ldr	r1, [pc, #264]	@ (80012b8 <TFT_Touch_GetCoordinates+0x148>)
 80011ae:	4843      	ldr	r0, [pc, #268]	@ (80012bc <TFT_Touch_GetCoordinates+0x14c>)
 80011b0:	f001 f930 	bl	8002414 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&TFT_TOUCH_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 80011b4:	f107 0208 	add.w	r2, r7, #8
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2302      	movs	r3, #2
 80011c0:	493f      	ldr	r1, [pc, #252]	@ (80012c0 <TFT_Touch_GetCoordinates+0x150>)
 80011c2:	483e      	ldr	r0, [pc, #248]	@ (80012bc <TFT_Touch_GetCoordinates+0x14c>)
 80011c4:	f001 fa69 	bl	800269a <HAL_SPI_TransmitReceive>

        /* Read X coords: Have to transmit the command and then read the next 2 bytes */
        HAL_SPI_Transmit(&TFT_TOUCH_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295
 80011cc:	2201      	movs	r2, #1
 80011ce:	493d      	ldr	r1, [pc, #244]	@ (80012c4 <TFT_Touch_GetCoordinates+0x154>)
 80011d0:	483a      	ldr	r0, [pc, #232]	@ (80012bc <TFT_Touch_GetCoordinates+0x14c>)
 80011d2:	f001 f91f 	bl	8002414 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&TFT_TOUCH_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 80011d6:	f107 020c 	add.w	r2, r7, #12
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2302      	movs	r3, #2
 80011e2:	4937      	ldr	r1, [pc, #220]	@ (80012c0 <TFT_Touch_GetCoordinates+0x150>)
 80011e4:	4835      	ldr	r0, [pc, #212]	@ (80012bc <TFT_Touch_GetCoordinates+0x14c>)
 80011e6:	f001 fa58 	bl	800269a <HAL_SPI_TransmitReceive>

        /* The values are conformed by 12 bits only */
        avg_x += (((uint16_t)x_raw[0]) << 4) | ((uint16_t)x_raw[1] >> 4);
 80011ea:	7b3b      	ldrb	r3, [r7, #12]
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	7b7a      	ldrb	r2, [r7, #13]
 80011f0:	0912      	lsrs	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	4313      	orrs	r3, r2
 80011f6:	461a      	mov	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	4413      	add	r3, r2
 80011fc:	617b      	str	r3, [r7, #20]
        avg_y += (((uint16_t)y_raw[0]) << 4) | ((uint16_t)y_raw[1] >> 4);
 80011fe:	7a3b      	ldrb	r3, [r7, #8]
 8001200:	011b      	lsls	r3, r3, #4
 8001202:	7a7a      	ldrb	r2, [r7, #9]
 8001204:	0912      	lsrs	r2, r2, #4
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	4313      	orrs	r3, r2
 800120a:	461a      	mov	r2, r3
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4413      	add	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
    for(uint8_t i = 0; i < NSAMPLES; i++) {
 8001212:	7bbb      	ldrb	r3, [r7, #14]
 8001214:	3301      	adds	r3, #1
 8001216:	73bb      	strb	r3, [r7, #14]
 8001218:	7bbb      	ldrb	r3, [r7, #14]
 800121a:	2b0f      	cmp	r3, #15
 800121c:	d9b8      	bls.n	8001190 <TFT_Touch_GetCoordinates+0x20>
 800121e:	e000      	b.n	8001222 <TFT_Touch_GetCoordinates+0xb2>
            break;
 8001220:	bf00      	nop
    }

    TFT_Touch_Unselect();
 8001222:	f7ff ff89 	bl	8001138 <TFT_Touch_Unselect>

    if(nsamples < NSAMPLES)
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d801      	bhi.n	8001230 <TFT_Touch_GetCoordinates+0xc0>
        return false;
 800122c:	2300      	movs	r3, #0
 800122e:	e03e      	b.n	80012ae <TFT_Touch_GetCoordinates+0x13e>

    avg_x = (avg_x / NSAMPLES);
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	091b      	lsrs	r3, r3, #4
 8001234:	617b      	str	r3, [r7, #20]
    if(avg_x < TFT_TOUCH_MIN_RAW_X) avg_x = TFT_TOUCH_MIN_RAW_X;
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	2bf9      	cmp	r3, #249	@ 0xf9
 800123a:	d801      	bhi.n	8001240 <TFT_Touch_GetCoordinates+0xd0>
 800123c:	23fa      	movs	r3, #250	@ 0xfa
 800123e:	617b      	str	r3, [r7, #20]
    if(avg_x > TFT_TOUCH_MAX_RAW_X) avg_x = TFT_TOUCH_MAX_RAW_X;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8001246:	d902      	bls.n	800124e <TFT_Touch_GetCoordinates+0xde>
 8001248:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 800124c:	617b      	str	r3, [r7, #20]

    avg_y = (avg_y / 16);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	091b      	lsrs	r3, r3, #4
 8001252:	613b      	str	r3, [r7, #16]
    if(avg_y < TFT_TOUCH_MIN_RAW_X) avg_y = TFT_TOUCH_MIN_RAW_Y;
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	2bf9      	cmp	r3, #249	@ 0xf9
 8001258:	d801      	bhi.n	800125e <TFT_Touch_GetCoordinates+0xee>
 800125a:	23fa      	movs	r3, #250	@ 0xfa
 800125c:	613b      	str	r3, [r7, #16]
    if(avg_y > TFT_TOUCH_MAX_RAW_Y) avg_y = TFT_TOUCH_MAX_RAW_Y;
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8001264:	d902      	bls.n	800126c <TFT_Touch_GetCoordinates+0xfc>
 8001266:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 800126a:	613b      	str	r3, [r7, #16]

    *x = (avg_x - TFT_TOUCH_MIN_RAW_X) * TFT_TOUCH_SCALE_X / (TFT_TOUCH_MAX_RAW_X - TFT_TOUCH_MIN_RAW_X);
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	4613      	mov	r3, r2
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	1a9b      	subs	r3, r3, r2
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 800127a:	3b60      	subs	r3, #96	@ 0x60
 800127c:	085b      	lsrs	r3, r3, #1
 800127e:	4a12      	ldr	r2, [pc, #72]	@ (80012c8 <TFT_Touch_GetCoordinates+0x158>)
 8001280:	fba2 2303 	umull	r2, r3, r2, r3
 8001284:	0a5b      	lsrs	r3, r3, #9
 8001286:	b29a      	uxth	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	801a      	strh	r2, [r3, #0]
    *y = (avg_y - TFT_TOUCH_MIN_RAW_Y) * TFT_TOUCH_SCALE_Y / (TFT_TOUCH_MAX_RAW_Y - TFT_TOUCH_MIN_RAW_Y);
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	019b      	lsls	r3, r3, #6
 8001296:	f5a3 339c 	sub.w	r3, r3, #79872	@ 0x13800
 800129a:	3b80      	subs	r3, #128	@ 0x80
 800129c:	085b      	lsrs	r3, r3, #1
 800129e:	4a0a      	ldr	r2, [pc, #40]	@ (80012c8 <TFT_Touch_GetCoordinates+0x158>)
 80012a0:	fba2 2303 	umull	r2, r3, r2, r3
 80012a4:	0a5b      	lsrs	r3, r3, #9
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	801a      	strh	r2, [r3, #0]

    return true;
 80012ac:	2301      	movs	r3, #1
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	080086bc 	.word	0x080086bc
 80012bc:	20000090 	.word	0x20000090
 80012c0:	080086c0 	.word	0x080086c0
 80012c4:	080086c4 	.word	0x080086c4
 80012c8:	a9200a93 	.word	0xa9200a93

080012cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012cc:	f7ff fb0a 	bl	80008e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d0:	480b      	ldr	r0, [pc, #44]	@ (8001300 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012d2:	490c      	ldr	r1, [pc, #48]	@ (8001304 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001308 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d8:	e002      	b.n	80012e0 <LoopCopyDataInit>

080012da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012de:	3304      	adds	r3, #4

080012e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e4:	d3f9      	bcc.n	80012da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e6:	4a09      	ldr	r2, [pc, #36]	@ (800130c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012e8:	4c09      	ldr	r4, [pc, #36]	@ (8001310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ec:	e001      	b.n	80012f2 <LoopFillZerobss>

080012ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f0:	3204      	adds	r2, #4

080012f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f4:	d3fb      	bcc.n	80012ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012f6:	f004 fd73 	bl	8005de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012fa:	f7ff f869 	bl	80003d0 <main>
  bx lr
 80012fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001304:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001308:	08008718 	.word	0x08008718
  ldr r2, =_sbss
 800130c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001310:	2000041c 	.word	0x2000041c

08001314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC1_2_IRQHandler>
	...

08001318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800131c:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <HAL_Init+0x28>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a07      	ldr	r2, [pc, #28]	@ (8001340 <HAL_Init+0x28>)
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001328:	2003      	movs	r0, #3
 800132a:	f000 f8f5 	bl	8001518 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff fa28 	bl	8000784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001334:	f7ff f98c 	bl	8000650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40022000 	.word	0x40022000

08001344 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001348:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <HAL_IncTick+0x1c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <HAL_IncTick+0x20>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a03      	ldr	r2, [pc, #12]	@ (8001364 <HAL_IncTick+0x20>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	20000018 	.word	0x20000018
 8001364:	2000013c 	.word	0x2000013c

08001368 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b02      	ldr	r3, [pc, #8]	@ (8001378 <HAL_GetTick+0x10>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	2000013c 	.word	0x2000013c

0800137c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001384:	f7ff fff0 	bl	8001368 <HAL_GetTick>
 8001388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001394:	d005      	beq.n	80013a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001396:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <HAL_Delay+0x44>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013a2:	bf00      	nop
 80013a4:	f7ff ffe0 	bl	8001368 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d8f7      	bhi.n	80013a4 <HAL_Delay+0x28>
  {
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000018 	.word	0x20000018

080013c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013e0:	4013      	ands	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f6:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	60d3      	str	r3, [r2, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001410:	4b04      	ldr	r3, [pc, #16]	@ (8001424 <__NVIC_GetPriorityGrouping+0x18>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 0307 	and.w	r3, r3, #7
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db0b      	blt.n	8001452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	f003 021f 	and.w	r2, r3, #31
 8001440:	4906      	ldr	r1, [pc, #24]	@ (800145c <__NVIC_EnableIRQ+0x34>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	095b      	lsrs	r3, r3, #5
 8001448:	2001      	movs	r0, #1
 800144a:	fa00 f202 	lsl.w	r2, r0, r2
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	e000e100 	.word	0xe000e100

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	@ (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	@ (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	@ 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
         );
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	@ 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ff4f 	bl	80013c4 <__NVIC_SetPriorityGrouping>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800152e:	b580      	push	{r7, lr}
 8001530:	b086      	sub	sp, #24
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001540:	f7ff ff64 	bl	800140c <__NVIC_GetPriorityGrouping>
 8001544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68b9      	ldr	r1, [r7, #8]
 800154a:	6978      	ldr	r0, [r7, #20]
 800154c:	f7ff ffb2 	bl	80014b4 <NVIC_EncodePriority>
 8001550:	4602      	mov	r2, r0
 8001552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff81 	bl	8001460 <__NVIC_SetPriority>
}
 800155e:	bf00      	nop
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff57 	bl	8001428 <__NVIC_EnableIRQ>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001584:	b480      	push	{r7}
 8001586:	b08b      	sub	sp, #44	@ 0x2c
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001596:	e169      	b.n	800186c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001598:	2201      	movs	r2, #1
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	f040 8158 	bne.w	8001866 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4a9a      	ldr	r2, [pc, #616]	@ (8001824 <HAL_GPIO_Init+0x2a0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d05e      	beq.n	800167e <HAL_GPIO_Init+0xfa>
 80015c0:	4a98      	ldr	r2, [pc, #608]	@ (8001824 <HAL_GPIO_Init+0x2a0>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d875      	bhi.n	80016b2 <HAL_GPIO_Init+0x12e>
 80015c6:	4a98      	ldr	r2, [pc, #608]	@ (8001828 <HAL_GPIO_Init+0x2a4>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d058      	beq.n	800167e <HAL_GPIO_Init+0xfa>
 80015cc:	4a96      	ldr	r2, [pc, #600]	@ (8001828 <HAL_GPIO_Init+0x2a4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d86f      	bhi.n	80016b2 <HAL_GPIO_Init+0x12e>
 80015d2:	4a96      	ldr	r2, [pc, #600]	@ (800182c <HAL_GPIO_Init+0x2a8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d052      	beq.n	800167e <HAL_GPIO_Init+0xfa>
 80015d8:	4a94      	ldr	r2, [pc, #592]	@ (800182c <HAL_GPIO_Init+0x2a8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d869      	bhi.n	80016b2 <HAL_GPIO_Init+0x12e>
 80015de:	4a94      	ldr	r2, [pc, #592]	@ (8001830 <HAL_GPIO_Init+0x2ac>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d04c      	beq.n	800167e <HAL_GPIO_Init+0xfa>
 80015e4:	4a92      	ldr	r2, [pc, #584]	@ (8001830 <HAL_GPIO_Init+0x2ac>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d863      	bhi.n	80016b2 <HAL_GPIO_Init+0x12e>
 80015ea:	4a92      	ldr	r2, [pc, #584]	@ (8001834 <HAL_GPIO_Init+0x2b0>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d046      	beq.n	800167e <HAL_GPIO_Init+0xfa>
 80015f0:	4a90      	ldr	r2, [pc, #576]	@ (8001834 <HAL_GPIO_Init+0x2b0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d85d      	bhi.n	80016b2 <HAL_GPIO_Init+0x12e>
 80015f6:	2b12      	cmp	r3, #18
 80015f8:	d82a      	bhi.n	8001650 <HAL_GPIO_Init+0xcc>
 80015fa:	2b12      	cmp	r3, #18
 80015fc:	d859      	bhi.n	80016b2 <HAL_GPIO_Init+0x12e>
 80015fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001604 <HAL_GPIO_Init+0x80>)
 8001600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001604:	0800167f 	.word	0x0800167f
 8001608:	08001659 	.word	0x08001659
 800160c:	0800166b 	.word	0x0800166b
 8001610:	080016ad 	.word	0x080016ad
 8001614:	080016b3 	.word	0x080016b3
 8001618:	080016b3 	.word	0x080016b3
 800161c:	080016b3 	.word	0x080016b3
 8001620:	080016b3 	.word	0x080016b3
 8001624:	080016b3 	.word	0x080016b3
 8001628:	080016b3 	.word	0x080016b3
 800162c:	080016b3 	.word	0x080016b3
 8001630:	080016b3 	.word	0x080016b3
 8001634:	080016b3 	.word	0x080016b3
 8001638:	080016b3 	.word	0x080016b3
 800163c:	080016b3 	.word	0x080016b3
 8001640:	080016b3 	.word	0x080016b3
 8001644:	080016b3 	.word	0x080016b3
 8001648:	08001661 	.word	0x08001661
 800164c:	08001675 	.word	0x08001675
 8001650:	4a79      	ldr	r2, [pc, #484]	@ (8001838 <HAL_GPIO_Init+0x2b4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d013      	beq.n	800167e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001656:	e02c      	b.n	80016b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	623b      	str	r3, [r7, #32]
          break;
 800165e:	e029      	b.n	80016b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	3304      	adds	r3, #4
 8001666:	623b      	str	r3, [r7, #32]
          break;
 8001668:	e024      	b.n	80016b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	3308      	adds	r3, #8
 8001670:	623b      	str	r3, [r7, #32]
          break;
 8001672:	e01f      	b.n	80016b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	330c      	adds	r3, #12
 800167a:	623b      	str	r3, [r7, #32]
          break;
 800167c:	e01a      	b.n	80016b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d102      	bne.n	800168c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001686:	2304      	movs	r3, #4
 8001688:	623b      	str	r3, [r7, #32]
          break;
 800168a:	e013      	b.n	80016b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d105      	bne.n	80016a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001694:	2308      	movs	r3, #8
 8001696:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	611a      	str	r2, [r3, #16]
          break;
 800169e:	e009      	b.n	80016b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016a0:	2308      	movs	r3, #8
 80016a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	615a      	str	r2, [r3, #20]
          break;
 80016aa:	e003      	b.n	80016b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
          break;
 80016b0:	e000      	b.n	80016b4 <HAL_GPIO_Init+0x130>
          break;
 80016b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	2bff      	cmp	r3, #255	@ 0xff
 80016b8:	d801      	bhi.n	80016be <HAL_GPIO_Init+0x13a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	e001      	b.n	80016c2 <HAL_GPIO_Init+0x13e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3304      	adds	r3, #4
 80016c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2bff      	cmp	r3, #255	@ 0xff
 80016c8:	d802      	bhi.n	80016d0 <HAL_GPIO_Init+0x14c>
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	e002      	b.n	80016d6 <HAL_GPIO_Init+0x152>
 80016d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d2:	3b08      	subs	r3, #8
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	210f      	movs	r1, #15
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	401a      	ands	r2, r3
 80016e8:	6a39      	ldr	r1, [r7, #32]
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	fa01 f303 	lsl.w	r3, r1, r3
 80016f0:	431a      	orrs	r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 80b1 	beq.w	8001866 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001704:	4b4d      	ldr	r3, [pc, #308]	@ (800183c <HAL_GPIO_Init+0x2b8>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	4a4c      	ldr	r2, [pc, #304]	@ (800183c <HAL_GPIO_Init+0x2b8>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6193      	str	r3, [r2, #24]
 8001710:	4b4a      	ldr	r3, [pc, #296]	@ (800183c <HAL_GPIO_Init+0x2b8>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800171c:	4a48      	ldr	r2, [pc, #288]	@ (8001840 <HAL_GPIO_Init+0x2bc>)
 800171e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	3302      	adds	r3, #2
 8001724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001728:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800172a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	220f      	movs	r2, #15
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a40      	ldr	r2, [pc, #256]	@ (8001844 <HAL_GPIO_Init+0x2c0>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d013      	beq.n	8001770 <HAL_GPIO_Init+0x1ec>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a3f      	ldr	r2, [pc, #252]	@ (8001848 <HAL_GPIO_Init+0x2c4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d00d      	beq.n	800176c <HAL_GPIO_Init+0x1e8>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a3e      	ldr	r2, [pc, #248]	@ (800184c <HAL_GPIO_Init+0x2c8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d007      	beq.n	8001768 <HAL_GPIO_Init+0x1e4>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a3d      	ldr	r2, [pc, #244]	@ (8001850 <HAL_GPIO_Init+0x2cc>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d101      	bne.n	8001764 <HAL_GPIO_Init+0x1e0>
 8001760:	2303      	movs	r3, #3
 8001762:	e006      	b.n	8001772 <HAL_GPIO_Init+0x1ee>
 8001764:	2304      	movs	r3, #4
 8001766:	e004      	b.n	8001772 <HAL_GPIO_Init+0x1ee>
 8001768:	2302      	movs	r3, #2
 800176a:	e002      	b.n	8001772 <HAL_GPIO_Init+0x1ee>
 800176c:	2301      	movs	r3, #1
 800176e:	e000      	b.n	8001772 <HAL_GPIO_Init+0x1ee>
 8001770:	2300      	movs	r3, #0
 8001772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001774:	f002 0203 	and.w	r2, r2, #3
 8001778:	0092      	lsls	r2, r2, #2
 800177a:	4093      	lsls	r3, r2
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001782:	492f      	ldr	r1, [pc, #188]	@ (8001840 <HAL_GPIO_Init+0x2bc>)
 8001784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	3302      	adds	r3, #2
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d006      	beq.n	80017aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800179c:	4b2d      	ldr	r3, [pc, #180]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	492c      	ldr	r1, [pc, #176]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	608b      	str	r3, [r1, #8]
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	4928      	ldr	r1, [pc, #160]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d006      	beq.n	80017d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017c4:	4b23      	ldr	r3, [pc, #140]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	4922      	ldr	r1, [pc, #136]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	60cb      	str	r3, [r1, #12]
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017d2:	4b20      	ldr	r3, [pc, #128]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	43db      	mvns	r3, r3
 80017da:	491e      	ldr	r1, [pc, #120]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017dc:	4013      	ands	r3, r2
 80017de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d006      	beq.n	80017fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017ec:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	4918      	ldr	r1, [pc, #96]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]
 80017f8:	e006      	b.n	8001808 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017fa:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	43db      	mvns	r3, r3
 8001802:	4914      	ldr	r1, [pc, #80]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 8001804:	4013      	ands	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d021      	beq.n	8001858 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001814:	4b0f      	ldr	r3, [pc, #60]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	490e      	ldr	r1, [pc, #56]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	600b      	str	r3, [r1, #0]
 8001820:	e021      	b.n	8001866 <HAL_GPIO_Init+0x2e2>
 8001822:	bf00      	nop
 8001824:	10320000 	.word	0x10320000
 8001828:	10310000 	.word	0x10310000
 800182c:	10220000 	.word	0x10220000
 8001830:	10210000 	.word	0x10210000
 8001834:	10120000 	.word	0x10120000
 8001838:	10110000 	.word	0x10110000
 800183c:	40021000 	.word	0x40021000
 8001840:	40010000 	.word	0x40010000
 8001844:	40010800 	.word	0x40010800
 8001848:	40010c00 	.word	0x40010c00
 800184c:	40011000 	.word	0x40011000
 8001850:	40011400 	.word	0x40011400
 8001854:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001858:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <HAL_GPIO_Init+0x304>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	43db      	mvns	r3, r3
 8001860:	4909      	ldr	r1, [pc, #36]	@ (8001888 <HAL_GPIO_Init+0x304>)
 8001862:	4013      	ands	r3, r2
 8001864:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001868:	3301      	adds	r3, #1
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001872:	fa22 f303 	lsr.w	r3, r2, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	f47f ae8e 	bne.w	8001598 <HAL_GPIO_Init+0x14>
  }
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	372c      	adds	r7, #44	@ 0x2c
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	40010400 	.word	0x40010400

0800188c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	@ 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800189a:	e09a      	b.n	80019d2 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800189c:	2201      	movs	r2, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 808d 	beq.w	80019cc <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80018b2:	4a4e      	ldr	r2, [pc, #312]	@ (80019ec <HAL_GPIO_DeInit+0x160>)
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	3302      	adds	r3, #2
 80018ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018be:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	220f      	movs	r2, #15
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	4013      	ands	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a46      	ldr	r2, [pc, #280]	@ (80019f0 <HAL_GPIO_DeInit+0x164>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d013      	beq.n	8001904 <HAL_GPIO_DeInit+0x78>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a45      	ldr	r2, [pc, #276]	@ (80019f4 <HAL_GPIO_DeInit+0x168>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d00d      	beq.n	8001900 <HAL_GPIO_DeInit+0x74>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a44      	ldr	r2, [pc, #272]	@ (80019f8 <HAL_GPIO_DeInit+0x16c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d007      	beq.n	80018fc <HAL_GPIO_DeInit+0x70>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a43      	ldr	r2, [pc, #268]	@ (80019fc <HAL_GPIO_DeInit+0x170>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d101      	bne.n	80018f8 <HAL_GPIO_DeInit+0x6c>
 80018f4:	2303      	movs	r3, #3
 80018f6:	e006      	b.n	8001906 <HAL_GPIO_DeInit+0x7a>
 80018f8:	2304      	movs	r3, #4
 80018fa:	e004      	b.n	8001906 <HAL_GPIO_DeInit+0x7a>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e002      	b.n	8001906 <HAL_GPIO_DeInit+0x7a>
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <HAL_GPIO_DeInit+0x7a>
 8001904:	2300      	movs	r3, #0
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	f002 0203 	and.w	r2, r2, #3
 800190c:	0092      	lsls	r2, r2, #2
 800190e:	4093      	lsls	r3, r2
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	429a      	cmp	r2, r3
 8001914:	d132      	bne.n	800197c <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001916:	4b3a      	ldr	r3, [pc, #232]	@ (8001a00 <HAL_GPIO_DeInit+0x174>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	43db      	mvns	r3, r3
 800191e:	4938      	ldr	r1, [pc, #224]	@ (8001a00 <HAL_GPIO_DeInit+0x174>)
 8001920:	4013      	ands	r3, r2
 8001922:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001924:	4b36      	ldr	r3, [pc, #216]	@ (8001a00 <HAL_GPIO_DeInit+0x174>)
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	43db      	mvns	r3, r3
 800192c:	4934      	ldr	r1, [pc, #208]	@ (8001a00 <HAL_GPIO_DeInit+0x174>)
 800192e:	4013      	ands	r3, r2
 8001930:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001932:	4b33      	ldr	r3, [pc, #204]	@ (8001a00 <HAL_GPIO_DeInit+0x174>)
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	43db      	mvns	r3, r3
 800193a:	4931      	ldr	r1, [pc, #196]	@ (8001a00 <HAL_GPIO_DeInit+0x174>)
 800193c:	4013      	ands	r3, r2
 800193e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001940:	4b2f      	ldr	r3, [pc, #188]	@ (8001a00 <HAL_GPIO_DeInit+0x174>)
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	43db      	mvns	r3, r3
 8001948:	492d      	ldr	r1, [pc, #180]	@ (8001a00 <HAL_GPIO_DeInit+0x174>)
 800194a:	4013      	ands	r3, r2
 800194c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800195e:	4a23      	ldr	r2, [pc, #140]	@ (80019ec <HAL_GPIO_DeInit+0x160>)
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	089b      	lsrs	r3, r3, #2
 8001964:	3302      	adds	r3, #2
 8001966:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	43da      	mvns	r2, r3
 800196e:	481f      	ldr	r0, [pc, #124]	@ (80019ec <HAL_GPIO_DeInit+0x160>)
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	400a      	ands	r2, r1
 8001976:	3302      	adds	r3, #2
 8001978:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2bff      	cmp	r3, #255	@ 0xff
 8001980:	d801      	bhi.n	8001986 <HAL_GPIO_DeInit+0xfa>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	e001      	b.n	800198a <HAL_GPIO_DeInit+0xfe>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3304      	adds	r3, #4
 800198a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2bff      	cmp	r3, #255	@ 0xff
 8001990:	d802      	bhi.n	8001998 <HAL_GPIO_DeInit+0x10c>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	e002      	b.n	800199e <HAL_GPIO_DeInit+0x112>
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	3b08      	subs	r3, #8
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	210f      	movs	r1, #15
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	401a      	ands	r2, r3
 80019b0:	2104      	movs	r1, #4
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	431a      	orrs	r2, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	401a      	ands	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	60da      	str	r2, [r3, #12]
    }

    position++;
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	3301      	adds	r3, #1
 80019d0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	fa22 f303 	lsr.w	r3, r2, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f47f af5e 	bne.w	800189c <HAL_GPIO_DeInit+0x10>
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3724      	adds	r7, #36	@ 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	40010000 	.word	0x40010000
 80019f0:	40010800 	.word	0x40010800
 80019f4:	40010c00 	.word	0x40010c00
 80019f8:	40011000 	.word	0x40011000
 80019fc:	40011400 	.word	0x40011400
 8001a00:	40010400 	.word	0x40010400

08001a04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	e001      	b.n	8001a26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	807b      	strh	r3, [r7, #2]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a42:	787b      	ldrb	r3, [r7, #1]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a48:	887a      	ldrh	r2, [r7, #2]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a4e:	e003      	b.n	8001a58 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a50:	887b      	ldrh	r3, [r7, #2]
 8001a52:	041a      	lsls	r2, r3, #16
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	611a      	str	r2, [r3, #16]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e272      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8087 	beq.w	8001b92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a84:	4b92      	ldr	r3, [pc, #584]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d00c      	beq.n	8001aaa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a90:	4b8f      	ldr	r3, [pc, #572]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d112      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x5e>
 8001a9c:	4b8c      	ldr	r3, [pc, #560]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa8:	d10b      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aaa:	4b89      	ldr	r3, [pc, #548]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d06c      	beq.n	8001b90 <HAL_RCC_OscConfig+0x12c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d168      	bne.n	8001b90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e24c      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_OscConfig+0x76>
 8001acc:	4b80      	ldr	r3, [pc, #512]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a7f      	ldr	r2, [pc, #508]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e02e      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0x98>
 8001ae2:	4b7b      	ldr	r3, [pc, #492]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a7a      	ldr	r2, [pc, #488]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b78      	ldr	r3, [pc, #480]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a77      	ldr	r2, [pc, #476]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e01d      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0xbc>
 8001b06:	4b72      	ldr	r3, [pc, #456]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a71      	ldr	r2, [pc, #452]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b6f      	ldr	r3, [pc, #444]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a6e      	ldr	r2, [pc, #440]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001b20:	4b6b      	ldr	r3, [pc, #428]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a6a      	ldr	r2, [pc, #424]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b68      	ldr	r3, [pc, #416]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a67      	ldr	r2, [pc, #412]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fc12 	bl	8001368 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff fc0e 	bl	8001368 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	@ 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e200      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b5d      	ldr	r3, [pc, #372]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0xe4>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7ff fbfe 	bl	8001368 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff fbfa 	bl	8001368 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	@ 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e1ec      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	4b53      	ldr	r3, [pc, #332]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x10c>
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d063      	beq.n	8001c66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b9e:	4b4c      	ldr	r3, [pc, #304]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001baa:	4b49      	ldr	r3, [pc, #292]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d11c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x18c>
 8001bb6:	4b46      	ldr	r3, [pc, #280]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d116      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	4b43      	ldr	r3, [pc, #268]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_RCC_OscConfig+0x176>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d001      	beq.n	8001bda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e1c0      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bda:	4b3d      	ldr	r3, [pc, #244]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4939      	ldr	r1, [pc, #228]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	e03a      	b.n	8001c66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d020      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf8:	4b36      	ldr	r3, [pc, #216]	@ (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7ff fbb3 	bl	8001368 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c06:	f7ff fbaf 	bl	8001368 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e1a1      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c24:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4927      	ldr	r1, [pc, #156]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]
 8001c38:	e015      	b.n	8001c66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3a:	4b26      	ldr	r3, [pc, #152]	@ (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fb92 	bl	8001368 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c48:	f7ff fb8e 	bl	8001368 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e180      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d03a      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d019      	beq.n	8001cae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7a:	4b17      	ldr	r3, [pc, #92]	@ (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c80:	f7ff fb72 	bl	8001368 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c88:	f7ff fb6e 	bl	8001368 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e160      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f000 faea 	bl	8002280 <RCC_Delay>
 8001cac:	e01c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cae:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb4:	f7ff fb58 	bl	8001368 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cba:	e00f      	b.n	8001cdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7ff fb54 	bl	8001368 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d908      	bls.n	8001cdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e146      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	42420000 	.word	0x42420000
 8001cd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cdc:	4b92      	ldr	r3, [pc, #584]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e9      	bne.n	8001cbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80a6 	beq.w	8001e42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfa:	4b8b      	ldr	r3, [pc, #556]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10d      	bne.n	8001d22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b88      	ldr	r3, [pc, #544]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a87      	ldr	r2, [pc, #540]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	61d3      	str	r3, [r2, #28]
 8001d12:	4b85      	ldr	r3, [pc, #532]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d22:	4b82      	ldr	r3, [pc, #520]	@ (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d118      	bne.n	8001d60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d2e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a7e      	ldr	r2, [pc, #504]	@ (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff fb15 	bl	8001368 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d42:	f7ff fb11 	bl	8001368 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b64      	cmp	r3, #100	@ 0x64
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e103      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	4b75      	ldr	r3, [pc, #468]	@ (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x312>
 8001d68:	4b6f      	ldr	r3, [pc, #444]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a6e      	ldr	r2, [pc, #440]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	e02d      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x334>
 8001d7e:	4b6a      	ldr	r3, [pc, #424]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4a69      	ldr	r2, [pc, #420]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	6213      	str	r3, [r2, #32]
 8001d8a:	4b67      	ldr	r3, [pc, #412]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4a66      	ldr	r2, [pc, #408]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	f023 0304 	bic.w	r3, r3, #4
 8001d94:	6213      	str	r3, [r2, #32]
 8001d96:	e01c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d10c      	bne.n	8001dba <HAL_RCC_OscConfig+0x356>
 8001da0:	4b61      	ldr	r3, [pc, #388]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a60      	ldr	r2, [pc, #384]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	4b5e      	ldr	r3, [pc, #376]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4a5d      	ldr	r2, [pc, #372]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6213      	str	r3, [r2, #32]
 8001db8:	e00b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001dba:	4b5b      	ldr	r3, [pc, #364]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	4a5a      	ldr	r2, [pc, #360]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	6213      	str	r3, [r2, #32]
 8001dc6:	4b58      	ldr	r3, [pc, #352]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4a57      	ldr	r2, [pc, #348]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	f023 0304 	bic.w	r3, r3, #4
 8001dd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d015      	beq.n	8001e06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dda:	f7ff fac5 	bl	8001368 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7ff fac1 	bl	8001368 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0b1      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df8:	4b4b      	ldr	r3, [pc, #300]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0ee      	beq.n	8001de2 <HAL_RCC_OscConfig+0x37e>
 8001e04:	e014      	b.n	8001e30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7ff faaf 	bl	8001368 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7ff faab 	bl	8001368 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e09b      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e24:	4b40      	ldr	r3, [pc, #256]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1ee      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d105      	bne.n	8001e42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e36:	4b3c      	ldr	r3, [pc, #240]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a3b      	ldr	r2, [pc, #236]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8087 	beq.w	8001f5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e4c:	4b36      	ldr	r3, [pc, #216]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d061      	beq.n	8001f1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d146      	bne.n	8001eee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e60:	4b33      	ldr	r3, [pc, #204]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7ff fa7f 	bl	8001368 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7ff fa7b 	bl	8001368 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e06d      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e80:	4b29      	ldr	r3, [pc, #164]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e94:	d108      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e96:	4b24      	ldr	r3, [pc, #144]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	4921      	ldr	r1, [pc, #132]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a19      	ldr	r1, [r3, #32]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	491b      	ldr	r1, [pc, #108]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7ff fa4f 	bl	8001368 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ece:	f7ff fa4b 	bl	8001368 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e03d      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee0:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x46a>
 8001eec:	e035      	b.n	8001f5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eee:	4b10      	ldr	r3, [pc, #64]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff fa38 	bl	8001368 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efc:	f7ff fa34 	bl	8001368 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e026      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0e:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x498>
 8001f1a:	e01e      	b.n	8001f5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d107      	bne.n	8001f34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e019      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40007000 	.word	0x40007000
 8001f30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f34:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <HAL_RCC_OscConfig+0x500>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000

08001f68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0d0      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b6a      	ldr	r3, [pc, #424]	@ (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d910      	bls.n	8001fac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b67      	ldr	r3, [pc, #412]	@ (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 0207 	bic.w	r2, r3, #7
 8001f92:	4965      	ldr	r1, [pc, #404]	@ (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b63      	ldr	r3, [pc, #396]	@ (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0b8      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc4:	4b59      	ldr	r3, [pc, #356]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a58      	ldr	r2, [pc, #352]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fdc:	4b53      	ldr	r3, [pc, #332]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a52      	ldr	r2, [pc, #328]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001fe6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4b50      	ldr	r3, [pc, #320]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	494d      	ldr	r1, [pc, #308]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d040      	beq.n	8002088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b47      	ldr	r3, [pc, #284]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d115      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e07f      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002026:	4b41      	ldr	r3, [pc, #260]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e073      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002036:	4b3d      	ldr	r3, [pc, #244]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e06b      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002046:	4b39      	ldr	r3, [pc, #228]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f023 0203 	bic.w	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4936      	ldr	r1, [pc, #216]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002058:	f7ff f986 	bl	8001368 <HAL_GetTick>
 800205c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	e00a      	b.n	8002076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002060:	f7ff f982 	bl	8001368 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e053      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	4b2d      	ldr	r3, [pc, #180]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 020c 	and.w	r2, r3, #12
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	429a      	cmp	r2, r3
 8002086:	d1eb      	bne.n	8002060 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002088:	4b27      	ldr	r3, [pc, #156]	@ (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d210      	bcs.n	80020b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b24      	ldr	r3, [pc, #144]	@ (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 0207 	bic.w	r2, r3, #7
 800209e:	4922      	ldr	r1, [pc, #136]	@ (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b20      	ldr	r3, [pc, #128]	@ (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e032      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c4:	4b19      	ldr	r3, [pc, #100]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4916      	ldr	r1, [pc, #88]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020e2:	4b12      	ldr	r3, [pc, #72]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	490e      	ldr	r1, [pc, #56]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020f6:	f000 f821 	bl	800213c <HAL_RCC_GetSysClockFreq>
 80020fa:	4602      	mov	r2, r0
 80020fc:	4b0b      	ldr	r3, [pc, #44]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	490a      	ldr	r1, [pc, #40]	@ (8002130 <HAL_RCC_ClockConfig+0x1c8>)
 8002108:	5ccb      	ldrb	r3, [r1, r3]
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	4a09      	ldr	r2, [pc, #36]	@ (8002134 <HAL_RCC_ClockConfig+0x1cc>)
 8002110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002112:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <HAL_RCC_ClockConfig+0x1d0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fb34 	bl	8000784 <HAL_InitTick>

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40022000 	.word	0x40022000
 800212c:	40021000 	.word	0x40021000
 8002130:	080065fc 	.word	0x080065fc
 8002134:	20000000 	.word	0x20000000
 8002138:	20000014 	.word	0x20000014

0800213c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002156:	4b1e      	ldr	r3, [pc, #120]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b04      	cmp	r3, #4
 8002164:	d002      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x30>
 8002166:	2b08      	cmp	r3, #8
 8002168:	d003      	beq.n	8002172 <HAL_RCC_GetSysClockFreq+0x36>
 800216a:	e027      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800216c:	4b19      	ldr	r3, [pc, #100]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800216e:	613b      	str	r3, [r7, #16]
      break;
 8002170:	e027      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	0c9b      	lsrs	r3, r3, #18
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	4a17      	ldr	r2, [pc, #92]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800217c:	5cd3      	ldrb	r3, [r2, r3]
 800217e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d010      	beq.n	80021ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800218a:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	0c5b      	lsrs	r3, r3, #17
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	4a11      	ldr	r2, [pc, #68]	@ (80021dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002196:	5cd3      	ldrb	r3, [r2, r3]
 8002198:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a0d      	ldr	r2, [pc, #52]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800219e:	fb03 f202 	mul.w	r2, r3, r2
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	e004      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a0c      	ldr	r2, [pc, #48]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021b0:	fb02 f303 	mul.w	r3, r2, r3
 80021b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	613b      	str	r3, [r7, #16]
      break;
 80021ba:	e002      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021bc:	4b05      	ldr	r3, [pc, #20]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80021be:	613b      	str	r3, [r7, #16]
      break;
 80021c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021c2:	693b      	ldr	r3, [r7, #16]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	371c      	adds	r7, #28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	007a1200 	.word	0x007a1200
 80021d8:	080086c8 	.word	0x080086c8
 80021dc:	080086d8 	.word	0x080086d8
 80021e0:	003d0900 	.word	0x003d0900

080021e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e8:	4b02      	ldr	r3, [pc, #8]	@ (80021f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	20000000 	.word	0x20000000

080021f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021fc:	f7ff fff2 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 8002200:	4602      	mov	r2, r0
 8002202:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	0adb      	lsrs	r3, r3, #11
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	4903      	ldr	r1, [pc, #12]	@ (800221c <HAL_RCC_GetPCLK2Freq+0x24>)
 800220e:	5ccb      	ldrb	r3, [r1, r3]
 8002210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002214:	4618      	mov	r0, r3
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	0800660c 	.word	0x0800660c

08002220 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	220f      	movs	r2, #15
 800222e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002230:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <HAL_RCC_GetClockConfig+0x58>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0203 	and.w	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800223c:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <HAL_RCC_GetClockConfig+0x58>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002248:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <HAL_RCC_GetClockConfig+0x58>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002254:	4b08      	ldr	r3, [pc, #32]	@ (8002278 <HAL_RCC_GetClockConfig+0x58>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	08db      	lsrs	r3, r3, #3
 800225a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002262:	4b06      	ldr	r3, [pc, #24]	@ (800227c <HAL_RCC_GetClockConfig+0x5c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0207 	and.w	r2, r3, #7
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	40021000 	.word	0x40021000
 800227c:	40022000 	.word	0x40022000

08002280 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002288:	4b0a      	ldr	r3, [pc, #40]	@ (80022b4 <RCC_Delay+0x34>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0a      	ldr	r2, [pc, #40]	@ (80022b8 <RCC_Delay+0x38>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	0a5b      	lsrs	r3, r3, #9
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800229c:	bf00      	nop
  }
  while (Delay --);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1e5a      	subs	r2, r3, #1
 80022a2:	60fa      	str	r2, [r7, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f9      	bne.n	800229c <RCC_Delay+0x1c>
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	20000000 	.word	0x20000000
 80022b8:	10624dd3 	.word	0x10624dd3

080022bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e076      	b.n	80023bc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d108      	bne.n	80022e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022de:	d009      	beq.n	80022f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	61da      	str	r2, [r3, #28]
 80022e6:	e005      	b.n	80022f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d106      	bne.n	8002314 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7fe f9d0 	bl	80006b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2202      	movs	r2, #2
 8002318:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800232a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002378:	ea42 0103 	orr.w	r1, r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002380:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	0c1a      	lsrs	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f002 0204 	and.w	r2, r2, #4
 800239a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	69da      	ldr	r2, [r3, #28]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e01a      	b.n	800240c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2202      	movs	r2, #2
 80023da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023ec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fe f9aa 	bl	8000748 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	4613      	mov	r3, r2
 8002422:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_SPI_Transmit+0x22>
 8002432:	2302      	movs	r3, #2
 8002434:	e12d      	b.n	8002692 <HAL_SPI_Transmit+0x27e>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800243e:	f7fe ff93 	bl	8001368 <HAL_GetTick>
 8002442:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b01      	cmp	r3, #1
 8002452:	d002      	beq.n	800245a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002454:	2302      	movs	r3, #2
 8002456:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002458:	e116      	b.n	8002688 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <HAL_SPI_Transmit+0x52>
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d102      	bne.n	800246c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	77fb      	strb	r3, [r7, #31]
    goto error;
 800246a:	e10d      	b.n	8002688 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2203      	movs	r2, #3
 8002470:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	88fa      	ldrh	r2, [r7, #6]
 8002484:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	88fa      	ldrh	r2, [r7, #6]
 800248a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024b2:	d10f      	bne.n	80024d4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024de:	2b40      	cmp	r3, #64	@ 0x40
 80024e0:	d007      	beq.n	80024f2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024fa:	d14f      	bne.n	800259c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <HAL_SPI_Transmit+0xf6>
 8002504:	8afb      	ldrh	r3, [r7, #22]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d142      	bne.n	8002590 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	881a      	ldrh	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	1c9a      	adds	r2, r3, #2
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800252e:	e02f      	b.n	8002590 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b02      	cmp	r3, #2
 800253c:	d112      	bne.n	8002564 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	881a      	ldrh	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	1c9a      	adds	r2, r3, #2
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002558:	b29b      	uxth	r3, r3
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002562:	e015      	b.n	8002590 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002564:	f7fe ff00 	bl	8001368 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d803      	bhi.n	800257c <HAL_SPI_Transmit+0x168>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257a:	d102      	bne.n	8002582 <HAL_SPI_Transmit+0x16e>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800258e:	e07b      	b.n	8002688 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1ca      	bne.n	8002530 <HAL_SPI_Transmit+0x11c>
 800259a:	e050      	b.n	800263e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <HAL_SPI_Transmit+0x196>
 80025a4:	8afb      	ldrh	r3, [r7, #22]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d144      	bne.n	8002634 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	330c      	adds	r3, #12
 80025b4:	7812      	ldrb	r2, [r2, #0]
 80025b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80025d0:	e030      	b.n	8002634 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d113      	bne.n	8002608 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	330c      	adds	r3, #12
 80025ea:	7812      	ldrb	r2, [r2, #0]
 80025ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002606:	e015      	b.n	8002634 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002608:	f7fe feae 	bl	8001368 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d803      	bhi.n	8002620 <HAL_SPI_Transmit+0x20c>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261e:	d102      	bne.n	8002626 <HAL_SPI_Transmit+0x212>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002632:	e029      	b.n	8002688 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1c9      	bne.n	80025d2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	6839      	ldr	r1, [r7, #0]
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 fa62 	bl	8002b0c <SPI_EndRxTxTransaction>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10a      	bne.n	8002672 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800265c:	2300      	movs	r3, #0
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	77fb      	strb	r3, [r7, #31]
 800267e:	e003      	b.n	8002688 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002690:	7ffb      	ldrb	r3, [r7, #31]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3720      	adds	r7, #32
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b08c      	sub	sp, #48	@ 0x30
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
 80026a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80026a8:	2301      	movs	r3, #1
 80026aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_SPI_TransmitReceive+0x26>
 80026bc:	2302      	movs	r3, #2
 80026be:	e198      	b.n	80029f2 <HAL_SPI_TransmitReceive+0x358>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026c8:	f7fe fe4e 	bl	8001368 <HAL_GetTick>
 80026cc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d00f      	beq.n	800270a <HAL_SPI_TransmitReceive+0x70>
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026f0:	d107      	bne.n	8002702 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d103      	bne.n	8002702 <HAL_SPI_TransmitReceive+0x68>
 80026fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d003      	beq.n	800270a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002702:	2302      	movs	r3, #2
 8002704:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002708:	e16d      	b.n	80029e6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_SPI_TransmitReceive+0x82>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <HAL_SPI_TransmitReceive+0x82>
 8002716:	887b      	ldrh	r3, [r7, #2]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d103      	bne.n	8002724 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002722:	e160      	b.n	80029e6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b04      	cmp	r3, #4
 800272e:	d003      	beq.n	8002738 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2205      	movs	r2, #5
 8002734:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	887a      	ldrh	r2, [r7, #2]
 8002748:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	887a      	ldrh	r2, [r7, #2]
 800274e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	887a      	ldrh	r2, [r7, #2]
 800275a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	887a      	ldrh	r2, [r7, #2]
 8002760:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002778:	2b40      	cmp	r3, #64	@ 0x40
 800277a:	d007      	beq.n	800278c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800278a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002794:	d17c      	bne.n	8002890 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <HAL_SPI_TransmitReceive+0x10a>
 800279e:	8b7b      	ldrh	r3, [r7, #26]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d16a      	bne.n	800287a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a8:	881a      	ldrh	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b4:	1c9a      	adds	r2, r3, #2
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027c8:	e057      	b.n	800287a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d11b      	bne.n	8002810 <HAL_SPI_TransmitReceive+0x176>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d016      	beq.n	8002810 <HAL_SPI_TransmitReceive+0x176>
 80027e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d113      	bne.n	8002810 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ec:	881a      	ldrh	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f8:	1c9a      	adds	r2, r3, #2
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002802:	b29b      	uxth	r3, r3
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d119      	bne.n	8002852 <HAL_SPI_TransmitReceive+0x1b8>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002822:	b29b      	uxth	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d014      	beq.n	8002852 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002832:	b292      	uxth	r2, r2
 8002834:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283a:	1c9a      	adds	r2, r3, #2
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800284e:	2301      	movs	r3, #1
 8002850:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002852:	f7fe fd89 	bl	8001368 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800285e:	429a      	cmp	r2, r3
 8002860:	d80b      	bhi.n	800287a <HAL_SPI_TransmitReceive+0x1e0>
 8002862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d007      	beq.n	800287a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002878:	e0b5      	b.n	80029e6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1a2      	bne.n	80027ca <HAL_SPI_TransmitReceive+0x130>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002888:	b29b      	uxth	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d19d      	bne.n	80027ca <HAL_SPI_TransmitReceive+0x130>
 800288e:	e080      	b.n	8002992 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <HAL_SPI_TransmitReceive+0x204>
 8002898:	8b7b      	ldrh	r3, [r7, #26]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d16f      	bne.n	800297e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	330c      	adds	r3, #12
 80028a8:	7812      	ldrb	r2, [r2, #0]
 80028aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028c4:	e05b      	b.n	800297e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d11c      	bne.n	800290e <HAL_SPI_TransmitReceive+0x274>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d017      	beq.n	800290e <HAL_SPI_TransmitReceive+0x274>
 80028de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d114      	bne.n	800290e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	7812      	ldrb	r2, [r2, #0]
 80028f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b01      	cmp	r3, #1
 800291a:	d119      	bne.n	8002950 <HAL_SPI_TransmitReceive+0x2b6>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d014      	beq.n	8002950 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002942:	b29b      	uxth	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800294c:	2301      	movs	r3, #1
 800294e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002950:	f7fe fd0a 	bl	8001368 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800295c:	429a      	cmp	r2, r3
 800295e:	d803      	bhi.n	8002968 <HAL_SPI_TransmitReceive+0x2ce>
 8002960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002966:	d102      	bne.n	800296e <HAL_SPI_TransmitReceive+0x2d4>
 8002968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800296a:	2b00      	cmp	r3, #0
 800296c:	d107      	bne.n	800297e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800297c:	e033      	b.n	80029e6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002982:	b29b      	uxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d19e      	bne.n	80028c6 <HAL_SPI_TransmitReceive+0x22c>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800298c:	b29b      	uxth	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d199      	bne.n	80028c6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002994:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f8b8 	bl	8002b0c <SPI_EndRxTxTransaction>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d006      	beq.n	80029b0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80029ae:	e01a      	b.n	80029e6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10a      	bne.n	80029ce <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029dc:	e003      	b.n	80029e6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80029ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3730      	adds	r7, #48	@ 0x30
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a0c:	f7fe fcac 	bl	8001368 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	4413      	add	r3, r2
 8002a1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a1c:	f7fe fca4 	bl	8001368 <HAL_GetTick>
 8002a20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a22:	4b39      	ldr	r3, [pc, #228]	@ (8002b08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	015b      	lsls	r3, r3, #5
 8002a28:	0d1b      	lsrs	r3, r3, #20
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a32:	e054      	b.n	8002ade <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3a:	d050      	beq.n	8002ade <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a3c:	f7fe fc94 	bl	8001368 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d902      	bls.n	8002a52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d13d      	bne.n	8002ace <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a6a:	d111      	bne.n	8002a90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a74:	d004      	beq.n	8002a80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a7e:	d107      	bne.n	8002a90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a98:	d10f      	bne.n	8002aba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ab8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e017      	b.n	8002afe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	bf0c      	ite	eq
 8002aee:	2301      	moveq	r3, #1
 8002af0:	2300      	movne	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d19b      	bne.n	8002a34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000000 	.word	0x20000000

08002b0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2180      	movs	r1, #128	@ 0x80
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f7ff ff6a 	bl	80029fc <SPI_WaitFlagStateUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b32:	f043 0220 	orr.w	r2, r3, #32
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e000      	b.n	8002b40 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e041      	b.n	8002bde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d106      	bne.n	8002b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f839 	bl	8002be6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3304      	adds	r3, #4
 8002b84:	4619      	mov	r1, r3
 8002b86:	4610      	mov	r0, r2
 8002b88:	f000 f9b4 	bl	8002ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d001      	beq.n	8002c10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e03a      	b.n	8002c86 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0201 	orr.w	r2, r2, #1
 8002c26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a18      	ldr	r2, [pc, #96]	@ (8002c90 <HAL_TIM_Base_Start_IT+0x98>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00e      	beq.n	8002c50 <HAL_TIM_Base_Start_IT+0x58>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c3a:	d009      	beq.n	8002c50 <HAL_TIM_Base_Start_IT+0x58>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a14      	ldr	r2, [pc, #80]	@ (8002c94 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d004      	beq.n	8002c50 <HAL_TIM_Base_Start_IT+0x58>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a13      	ldr	r2, [pc, #76]	@ (8002c98 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d111      	bne.n	8002c74 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2b06      	cmp	r3, #6
 8002c60:	d010      	beq.n	8002c84 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0201 	orr.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c72:	e007      	b.n	8002c84 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0201 	orr.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr
 8002c90:	40012c00 	.word	0x40012c00
 8002c94:	40000400 	.word	0x40000400
 8002c98:	40000800 	.word	0x40000800

08002c9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d122      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d11b      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f06f 0202 	mvn.w	r2, #2
 8002cc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f8ed 	bl	8002ebe <HAL_TIM_IC_CaptureCallback>
 8002ce4:	e005      	b.n	8002cf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f8e0 	bl	8002eac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f8ef 	bl	8002ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d122      	bne.n	8002d4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d11b      	bne.n	8002d4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0204 	mvn.w	r2, #4
 8002d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2202      	movs	r2, #2
 8002d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f8c3 	bl	8002ebe <HAL_TIM_IC_CaptureCallback>
 8002d38:	e005      	b.n	8002d46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f8b6 	bl	8002eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f8c5 	bl	8002ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d122      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d11b      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f06f 0208 	mvn.w	r2, #8
 8002d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2204      	movs	r2, #4
 8002d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f899 	bl	8002ebe <HAL_TIM_IC_CaptureCallback>
 8002d8c:	e005      	b.n	8002d9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f88c 	bl	8002eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f89b 	bl	8002ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	2b10      	cmp	r3, #16
 8002dac:	d122      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b10      	cmp	r3, #16
 8002dba:	d11b      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0210 	mvn.w	r2, #16
 8002dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2208      	movs	r2, #8
 8002dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f86f 	bl	8002ebe <HAL_TIM_IC_CaptureCallback>
 8002de0:	e005      	b.n	8002dee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f862 	bl	8002eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f871 	bl	8002ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d10e      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d107      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0201 	mvn.w	r2, #1
 8002e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fd fc00 	bl	8000620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e2a:	2b80      	cmp	r3, #128	@ 0x80
 8002e2c:	d10e      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e38:	2b80      	cmp	r3, #128	@ 0x80
 8002e3a:	d107      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f8bf 	bl	8002fca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e56:	2b40      	cmp	r3, #64	@ 0x40
 8002e58:	d10e      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e64:	2b40      	cmp	r3, #64	@ 0x40
 8002e66:	d107      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f835 	bl	8002ee2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	d10e      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d107      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0220 	mvn.w	r2, #32
 8002e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f88a 	bl	8002fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a29      	ldr	r2, [pc, #164]	@ (8002fac <TIM_Base_SetConfig+0xb8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d00b      	beq.n	8002f24 <TIM_Base_SetConfig+0x30>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f12:	d007      	beq.n	8002f24 <TIM_Base_SetConfig+0x30>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a26      	ldr	r2, [pc, #152]	@ (8002fb0 <TIM_Base_SetConfig+0xbc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d003      	beq.n	8002f24 <TIM_Base_SetConfig+0x30>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a25      	ldr	r2, [pc, #148]	@ (8002fb4 <TIM_Base_SetConfig+0xc0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d108      	bne.n	8002f36 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a1c      	ldr	r2, [pc, #112]	@ (8002fac <TIM_Base_SetConfig+0xb8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00b      	beq.n	8002f56 <TIM_Base_SetConfig+0x62>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f44:	d007      	beq.n	8002f56 <TIM_Base_SetConfig+0x62>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a19      	ldr	r2, [pc, #100]	@ (8002fb0 <TIM_Base_SetConfig+0xbc>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d003      	beq.n	8002f56 <TIM_Base_SetConfig+0x62>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a18      	ldr	r2, [pc, #96]	@ (8002fb4 <TIM_Base_SetConfig+0xc0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d108      	bne.n	8002f68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a07      	ldr	r2, [pc, #28]	@ (8002fac <TIM_Base_SetConfig+0xb8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d103      	bne.n	8002f9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	615a      	str	r2, [r3, #20]
}
 8002fa2:	bf00      	nop
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	40012c00 	.word	0x40012c00
 8002fb0:	40000400 	.word	0x40000400
 8002fb4:	40000800 	.word	0x40000800

08002fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr

08002fca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10b      	bne.n	800300c <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003006:	bf00      	nop
 8003008:	bf00      	nop
 800300a:	e7fd      	b.n	8003008 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d05d      	beq.n	80030ce <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8003016:	2b00      	cmp	r3, #0
 8003018:	d059      	beq.n	80030ce <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003022:	2100      	movs	r1, #0
 8003024:	fba3 2302 	umull	r2, r3, r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d000      	beq.n	800302e <xQueueGenericReset+0x52>
 800302c:	2101      	movs	r1, #1
 800302e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003030:	2b00      	cmp	r3, #0
 8003032:	d14c      	bne.n	80030ce <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8003034:	f002 fc2c 	bl	8005890 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003040:	6939      	ldr	r1, [r7, #16]
 8003042:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	441a      	add	r2, r3
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2200      	movs	r2, #0
 8003052:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003064:	3b01      	subs	r3, #1
 8003066:	6939      	ldr	r1, [r7, #16]
 8003068:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	441a      	add	r2, r3
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	22ff      	movs	r2, #255	@ 0xff
 8003078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	22ff      	movs	r2, #255	@ 0xff
 8003080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d114      	bne.n	80030b4 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d01a      	beq.n	80030c8 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	3310      	adds	r3, #16
 8003096:	4618      	mov	r0, r3
 8003098:	f001 faea 	bl	8004670 <xTaskRemoveFromEventList>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d012      	beq.n	80030c8 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80030a2:	4b16      	ldr	r3, [pc, #88]	@ (80030fc <xQueueGenericReset+0x120>)
 80030a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	e009      	b.n	80030c8 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	3310      	adds	r3, #16
 80030b8:	4618      	mov	r0, r3
 80030ba:	f002 fa69 	bl	8005590 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	3324      	adds	r3, #36	@ 0x24
 80030c2:	4618      	mov	r0, r3
 80030c4:	f002 fa64 	bl	8005590 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80030c8:	f002 fc12 	bl	80058f0 <vPortExitCritical>
 80030cc:	e001      	b.n	80030d2 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10b      	bne.n	80030f0 <xQueueGenericReset+0x114>
        __asm volatile
 80030d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	60bb      	str	r3, [r7, #8]
    }
 80030ea:	bf00      	nop
 80030ec:	bf00      	nop
 80030ee:	e7fd      	b.n	80030ec <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80030f0:	697b      	ldr	r3, [r7, #20]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	e000ed04 	.word	0xe000ed04

08003100 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003100:	b580      	push	{r7, lr}
 8003102:	b08a      	sub	sp, #40	@ 0x28
 8003104:	af02      	add	r7, sp, #8
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	4613      	mov	r3, r2
 800310c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d02e      	beq.n	8003176 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003118:	2100      	movs	r1, #0
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	fba3 2302 	umull	r2, r3, r3, r2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d000      	beq.n	8003128 <xQueueGenericCreate+0x28>
 8003126:	2101      	movs	r1, #1
 8003128:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800312a:	2b00      	cmp	r3, #0
 800312c:	d123      	bne.n	8003176 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003136:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800313a:	d81c      	bhi.n	8003176 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	fb02 f303 	mul.w	r3, r2, r3
 8003144:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	3350      	adds	r3, #80	@ 0x50
 800314a:	4618      	mov	r0, r3
 800314c:	f002 f9fc 	bl	8005548 <pvPortMalloc>
 8003150:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01d      	beq.n	8003194 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	3350      	adds	r3, #80	@ 0x50
 8003160:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003162:	79fa      	ldrb	r2, [r7, #7]
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	4613      	mov	r3, r2
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f815 	bl	800319e <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003174:	e00e      	b.n	8003194 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10b      	bne.n	8003194 <xQueueGenericCreate+0x94>
        __asm volatile
 800317c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	613b      	str	r3, [r7, #16]
    }
 800318e:	bf00      	nop
 8003190:	bf00      	nop
 8003192:	e7fd      	b.n	8003190 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003194:	69fb      	ldr	r3, [r7, #28]
    }
 8003196:	4618      	mov	r0, r3
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d103      	bne.n	80031ba <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	e002      	b.n	80031c0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80031cc:	2101      	movs	r1, #1
 80031ce:	69b8      	ldr	r0, [r7, #24]
 80031d0:	f7ff ff04 	bl	8002fdc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80031dc:	bf00      	nop
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00e      	beq.n	8003210 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003204:	2300      	movs	r3, #0
 8003206:	2200      	movs	r2, #0
 8003208:	2100      	movs	r1, #0
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f81c 	bl	8003248 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8003210:	bf00      	nop
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003222:	2301      	movs	r3, #1
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	461a      	mov	r2, r3
 800322e:	6939      	ldr	r1, [r7, #16]
 8003230:	6978      	ldr	r0, [r7, #20]
 8003232:	f7ff ff65 	bl	8003100 <xQueueGenericCreate>
 8003236:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f7ff ffd3 	bl	80031e4 <prvInitialiseMutex>

        return xNewQueue;
 800323e:	68fb      	ldr	r3, [r7, #12]
    }
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08e      	sub	sp, #56	@ 0x38
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003256:	2300      	movs	r3, #0
 8003258:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 800325e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10b      	bne.n	800327c <xQueueGenericSend+0x34>
        __asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8003276:	bf00      	nop
 8003278:	bf00      	nop
 800327a:	e7fd      	b.n	8003278 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d103      	bne.n	800328a <xQueueGenericSend+0x42>
 8003282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <xQueueGenericSend+0x46>
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <xQueueGenericSend+0x48>
 800328e:	2300      	movs	r3, #0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10b      	bne.n	80032ac <xQueueGenericSend+0x64>
        __asm volatile
 8003294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80032a6:	bf00      	nop
 80032a8:	bf00      	nop
 80032aa:	e7fd      	b.n	80032a8 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d103      	bne.n	80032ba <xQueueGenericSend+0x72>
 80032b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <xQueueGenericSend+0x76>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <xQueueGenericSend+0x78>
 80032be:	2300      	movs	r3, #0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10b      	bne.n	80032dc <xQueueGenericSend+0x94>
        __asm volatile
 80032c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	623b      	str	r3, [r7, #32]
    }
 80032d6:	bf00      	nop
 80032d8:	bf00      	nop
 80032da:	e7fd      	b.n	80032d8 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032dc:	f001 fc38 	bl	8004b50 <xTaskGetSchedulerState>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d102      	bne.n	80032ec <xQueueGenericSend+0xa4>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <xQueueGenericSend+0xa8>
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <xQueueGenericSend+0xaa>
 80032f0:	2300      	movs	r3, #0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <xQueueGenericSend+0xc6>
        __asm volatile
 80032f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	61fb      	str	r3, [r7, #28]
    }
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	e7fd      	b.n	800330a <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800330e:	f002 fabf 	bl	8005890 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003314:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800331a:	429a      	cmp	r2, r3
 800331c:	d302      	bcc.n	8003324 <xQueueGenericSend+0xdc>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d129      	bne.n	8003378 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	68b9      	ldr	r1, [r7, #8]
 8003328:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800332a:	f000 fa88 	bl	800383e <prvCopyDataToQueue>
 800332e:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003334:	2b00      	cmp	r3, #0
 8003336:	d010      	beq.n	800335a <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333a:	3324      	adds	r3, #36	@ 0x24
 800333c:	4618      	mov	r0, r3
 800333e:	f001 f997 	bl	8004670 <xTaskRemoveFromEventList>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d013      	beq.n	8003370 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003348:	4b3f      	ldr	r3, [pc, #252]	@ (8003448 <xQueueGenericSend+0x200>)
 800334a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	e00a      	b.n	8003370 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800335a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335c:	2b00      	cmp	r3, #0
 800335e:	d007      	beq.n	8003370 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8003360:	4b39      	ldr	r3, [pc, #228]	@ (8003448 <xQueueGenericSend+0x200>)
 8003362:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	f3bf 8f4f 	dsb	sy
 800336c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003370:	f002 fabe 	bl	80058f0 <vPortExitCritical>
                return pdPASS;
 8003374:	2301      	movs	r3, #1
 8003376:	e063      	b.n	8003440 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d103      	bne.n	8003386 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800337e:	f002 fab7 	bl	80058f0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003382:	2300      	movs	r3, #0
 8003384:	e05c      	b.n	8003440 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003388:	2b00      	cmp	r3, #0
 800338a:	d106      	bne.n	800339a <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800338c:	f107 0314 	add.w	r3, r7, #20
 8003390:	4618      	mov	r0, r3
 8003392:	f001 fa45 	bl	8004820 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003396:	2301      	movs	r3, #1
 8003398:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800339a:	f002 faa9 	bl	80058f0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800339e:	f000 fdd7 	bl	8003f50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80033a2:	f002 fa75 	bl	8005890 <vPortEnterCritical>
 80033a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033ac:	b25b      	sxtb	r3, r3
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b2:	d103      	bne.n	80033bc <xQueueGenericSend+0x174>
 80033b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033c2:	b25b      	sxtb	r3, r3
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d103      	bne.n	80033d2 <xQueueGenericSend+0x18a>
 80033ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033d2:	f002 fa8d 	bl	80058f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033d6:	1d3a      	adds	r2, r7, #4
 80033d8:	f107 0314 	add.w	r3, r7, #20
 80033dc:	4611      	mov	r1, r2
 80033de:	4618      	mov	r0, r3
 80033e0:	f001 fa34 	bl	800484c <xTaskCheckForTimeOut>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d124      	bne.n	8003434 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80033ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033ec:	f000 fb1f 	bl	8003a2e <prvIsQueueFull>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d018      	beq.n	8003428 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80033f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f8:	3310      	adds	r3, #16
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 f8ca 	bl	8004598 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003404:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003406:	f000 faaa 	bl	800395e <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800340a:	f000 fde5 	bl	8003fd8 <xTaskResumeAll>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	f47f af7c 	bne.w	800330e <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8003416:	4b0c      	ldr	r3, [pc, #48]	@ (8003448 <xQueueGenericSend+0x200>)
 8003418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	e772      	b.n	800330e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003428:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800342a:	f000 fa98 	bl	800395e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800342e:	f000 fdd3 	bl	8003fd8 <xTaskResumeAll>
 8003432:	e76c      	b.n	800330e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003434:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003436:	f000 fa92 	bl	800395e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800343a:	f000 fdcd 	bl	8003fd8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800343e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003440:	4618      	mov	r0, r3
 8003442:	3738      	adds	r7, #56	@ 0x38
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	e000ed04 	.word	0xe000ed04

0800344c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08c      	sub	sp, #48	@ 0x30
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003458:	2300      	movs	r3, #0
 800345a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10b      	bne.n	800347e <xQueueReceive+0x32>
        __asm volatile
 8003466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	623b      	str	r3, [r7, #32]
    }
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	e7fd      	b.n	800347a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d103      	bne.n	800348c <xQueueReceive+0x40>
 8003484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <xQueueReceive+0x44>
 800348c:	2301      	movs	r3, #1
 800348e:	e000      	b.n	8003492 <xQueueReceive+0x46>
 8003490:	2300      	movs	r3, #0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10b      	bne.n	80034ae <xQueueReceive+0x62>
        __asm volatile
 8003496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800349a:	f383 8811 	msr	BASEPRI, r3
 800349e:	f3bf 8f6f 	isb	sy
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	61fb      	str	r3, [r7, #28]
    }
 80034a8:	bf00      	nop
 80034aa:	bf00      	nop
 80034ac:	e7fd      	b.n	80034aa <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034ae:	f001 fb4f 	bl	8004b50 <xTaskGetSchedulerState>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d102      	bne.n	80034be <xQueueReceive+0x72>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <xQueueReceive+0x76>
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <xQueueReceive+0x78>
 80034c2:	2300      	movs	r3, #0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10b      	bne.n	80034e0 <xQueueReceive+0x94>
        __asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	61bb      	str	r3, [r7, #24]
    }
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80034e0:	f002 f9d6 	bl	8005890 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01f      	beq.n	8003530 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034f4:	f000 fa0d 	bl	8003912 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80034f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fa:	1e5a      	subs	r2, r3, #1
 80034fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fe:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00f      	beq.n	8003528 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350a:	3310      	adds	r3, #16
 800350c:	4618      	mov	r0, r3
 800350e:	f001 f8af 	bl	8004670 <xTaskRemoveFromEventList>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d007      	beq.n	8003528 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003518:	4b3c      	ldr	r3, [pc, #240]	@ (800360c <xQueueReceive+0x1c0>)
 800351a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003528:	f002 f9e2 	bl	80058f0 <vPortExitCritical>
                return pdPASS;
 800352c:	2301      	movs	r3, #1
 800352e:	e069      	b.n	8003604 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d103      	bne.n	800353e <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003536:	f002 f9db 	bl	80058f0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800353a:	2300      	movs	r3, #0
 800353c:	e062      	b.n	8003604 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800353e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003540:	2b00      	cmp	r3, #0
 8003542:	d106      	bne.n	8003552 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003544:	f107 0310 	add.w	r3, r7, #16
 8003548:	4618      	mov	r0, r3
 800354a:	f001 f969 	bl	8004820 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800354e:	2301      	movs	r3, #1
 8003550:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003552:	f002 f9cd 	bl	80058f0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003556:	f000 fcfb 	bl	8003f50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800355a:	f002 f999 	bl	8005890 <vPortEnterCritical>
 800355e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003560:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003564:	b25b      	sxtb	r3, r3
 8003566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356a:	d103      	bne.n	8003574 <xQueueReceive+0x128>
 800356c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003576:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800357a:	b25b      	sxtb	r3, r3
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d103      	bne.n	800358a <xQueueReceive+0x13e>
 8003582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800358a:	f002 f9b1 	bl	80058f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800358e:	1d3a      	adds	r2, r7, #4
 8003590:	f107 0310 	add.w	r3, r7, #16
 8003594:	4611      	mov	r1, r2
 8003596:	4618      	mov	r0, r3
 8003598:	f001 f958 	bl	800484c <xTaskCheckForTimeOut>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d123      	bne.n	80035ea <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035a4:	f000 fa2d 	bl	8003a02 <prvIsQueueEmpty>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d017      	beq.n	80035de <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b0:	3324      	adds	r3, #36	@ 0x24
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 ffee 	bl	8004598 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80035bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035be:	f000 f9ce 	bl	800395e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80035c2:	f000 fd09 	bl	8003fd8 <xTaskResumeAll>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d189      	bne.n	80034e0 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80035cc:	4b0f      	ldr	r3, [pc, #60]	@ (800360c <xQueueReceive+0x1c0>)
 80035ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	e780      	b.n	80034e0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80035de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035e0:	f000 f9bd 	bl	800395e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80035e4:	f000 fcf8 	bl	8003fd8 <xTaskResumeAll>
 80035e8:	e77a      	b.n	80034e0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80035ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035ec:	f000 f9b7 	bl	800395e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80035f0:	f000 fcf2 	bl	8003fd8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035f6:	f000 fa04 	bl	8003a02 <prvIsQueueEmpty>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f43f af6f 	beq.w	80034e0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003602:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003604:	4618      	mov	r0, r3
 8003606:	3730      	adds	r7, #48	@ 0x30
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	e000ed04 	.word	0xe000ed04

08003610 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08c      	sub	sp, #48	@ 0x30
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800361a:	2300      	movs	r3, #0
 800361c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003622:	2300      	movs	r3, #0
 8003624:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10b      	bne.n	8003644 <xQueueSemaphoreTake+0x34>
        __asm volatile
 800362c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	61bb      	str	r3, [r7, #24]
    }
 800363e:	bf00      	nop
 8003640:	bf00      	nop
 8003642:	e7fd      	b.n	8003640 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00b      	beq.n	8003664 <xQueueSemaphoreTake+0x54>
        __asm volatile
 800364c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	617b      	str	r3, [r7, #20]
    }
 800365e:	bf00      	nop
 8003660:	bf00      	nop
 8003662:	e7fd      	b.n	8003660 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003664:	f001 fa74 	bl	8004b50 <xTaskGetSchedulerState>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d102      	bne.n	8003674 <xQueueSemaphoreTake+0x64>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <xQueueSemaphoreTake+0x68>
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <xQueueSemaphoreTake+0x6a>
 8003678:	2300      	movs	r3, #0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10b      	bne.n	8003696 <xQueueSemaphoreTake+0x86>
        __asm volatile
 800367e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	613b      	str	r3, [r7, #16]
    }
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	e7fd      	b.n	8003692 <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003696:	f002 f8fb 	bl	8005890 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369e:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d024      	beq.n	80036f0 <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	1e5a      	subs	r2, r3, #1
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d104      	bne.n	80036c0 <xQueueSemaphoreTake+0xb0>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80036b6:	f001 fc3d 	bl	8004f34 <pvTaskIncrementMutexHeldCount>
 80036ba:	4602      	mov	r2, r0
 80036bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036be:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00f      	beq.n	80036e8 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ca:	3310      	adds	r3, #16
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 ffcf 	bl	8004670 <xTaskRemoveFromEventList>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d007      	beq.n	80036e8 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80036d8:	4b4c      	ldr	r3, [pc, #304]	@ (800380c <xQueueSemaphoreTake+0x1fc>)
 80036da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80036e8:	f002 f902 	bl	80058f0 <vPortExitCritical>
                return pdPASS;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e089      	b.n	8003804 <xQueueSemaphoreTake+0x1f4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d103      	bne.n	80036fe <xQueueSemaphoreTake+0xee>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80036f6:	f002 f8fb 	bl	80058f0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80036fa:	2300      	movs	r3, #0
 80036fc:	e082      	b.n	8003804 <xQueueSemaphoreTake+0x1f4>
                }
                else if( xEntryTimeSet == pdFALSE )
 80036fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003700:	2b00      	cmp	r3, #0
 8003702:	d106      	bne.n	8003712 <xQueueSemaphoreTake+0x102>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003704:	f107 0308 	add.w	r3, r7, #8
 8003708:	4618      	mov	r0, r3
 800370a:	f001 f889 	bl	8004820 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800370e:	2301      	movs	r3, #1
 8003710:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003712:	f002 f8ed 	bl	80058f0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003716:	f000 fc1b 	bl	8003f50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800371a:	f002 f8b9 	bl	8005890 <vPortEnterCritical>
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003724:	b25b      	sxtb	r3, r3
 8003726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372a:	d103      	bne.n	8003734 <xQueueSemaphoreTake+0x124>
 800372c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003736:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800373a:	b25b      	sxtb	r3, r3
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d103      	bne.n	800374a <xQueueSemaphoreTake+0x13a>
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800374a:	f002 f8d1 	bl	80058f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800374e:	463a      	mov	r2, r7
 8003750:	f107 0308 	add.w	r3, r7, #8
 8003754:	4611      	mov	r1, r2
 8003756:	4618      	mov	r0, r3
 8003758:	f001 f878 	bl	800484c <xTaskCheckForTimeOut>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d132      	bne.n	80037c8 <xQueueSemaphoreTake+0x1b8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003762:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003764:	f000 f94d 	bl	8003a02 <prvIsQueueEmpty>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d026      	beq.n	80037bc <xQueueSemaphoreTake+0x1ac>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <xQueueSemaphoreTake+0x17a>
                    {
                        taskENTER_CRITICAL();
 8003776:	f002 f88b 	bl	8005890 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	4618      	mov	r0, r3
 8003780:	f001 fa04 	bl	8004b8c <xTaskPriorityInherit>
 8003784:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 8003786:	f002 f8b3 	bl	80058f0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	3324      	adds	r3, #36	@ 0x24
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	4611      	mov	r1, r2
 8003792:	4618      	mov	r0, r3
 8003794:	f000 ff00 	bl	8004598 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003798:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800379a:	f000 f8e0 	bl	800395e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800379e:	f000 fc1b 	bl	8003fd8 <xTaskResumeAll>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f47f af76 	bne.w	8003696 <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 80037aa:	4b18      	ldr	r3, [pc, #96]	@ (800380c <xQueueSemaphoreTake+0x1fc>)
 80037ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	e76c      	b.n	8003696 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80037bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80037be:	f000 f8ce 	bl	800395e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80037c2:	f000 fc09 	bl	8003fd8 <xTaskResumeAll>
 80037c6:	e766      	b.n	8003696 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80037c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80037ca:	f000 f8c8 	bl	800395e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80037ce:	f000 fc03 	bl	8003fd8 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80037d4:	f000 f915 	bl	8003a02 <prvIsQueueEmpty>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f43f af5b 	beq.w	8003696 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80037e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00d      	beq.n	8003802 <xQueueSemaphoreTake+0x1f2>
                    {
                        taskENTER_CRITICAL();
 80037e6:	f002 f853 	bl	8005890 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80037ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80037ec:	f000 f810 	bl	8003810 <prvGetDisinheritPriorityAfterTimeout>
 80037f0:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80037f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	69f9      	ldr	r1, [r7, #28]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f001 faef 	bl	8004ddc <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80037fe:	f002 f877 	bl	80058f0 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003802:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003804:	4618      	mov	r0, r3
 8003806:	3730      	adds	r7, #48	@ 0x30
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	e000ed04 	.word	0xe000ed04

08003810 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	2b00      	cmp	r3, #0
 800381e:	d006      	beq.n	800382e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f1c3 0305 	rsb	r3, r3, #5
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e001      	b.n	8003832 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003832:	68fb      	ldr	r3, [r7, #12]
    }
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr

0800383e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b086      	sub	sp, #24
 8003842:	af00      	add	r7, sp, #0
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003852:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10d      	bne.n	8003878 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d14d      	bne.n	8003900 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4618      	mov	r0, r3
 800386a:	f001 fa1f 	bl	8004cac <xTaskPriorityDisinherit>
 800386e:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	609a      	str	r2, [r3, #8]
 8003876:	e043      	b.n	8003900 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d119      	bne.n	80038b2 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6858      	ldr	r0, [r3, #4]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003886:	461a      	mov	r2, r3
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	f002 facf 	bl	8005e2c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003896:	441a      	add	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d32b      	bcc.n	8003900 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	e026      	b.n	8003900 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	68d8      	ldr	r0, [r3, #12]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ba:	461a      	mov	r2, r3
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	f002 fab5 	bl	8005e2c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	425b      	negs	r3, r3
 80038cc:	441a      	add	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d207      	bcs.n	80038ee <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	425b      	negs	r3, r3
 80038e8:	441a      	add	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d105      	bne.n	8003900 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8003908:	697b      	ldr	r3, [r7, #20]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003920:	2b00      	cmp	r3, #0
 8003922:	d018      	beq.n	8003956 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392c:	441a      	add	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	429a      	cmp	r2, r3
 800393c:	d303      	bcc.n	8003946 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68d9      	ldr	r1, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394e:	461a      	mov	r2, r3
 8003950:	6838      	ldr	r0, [r7, #0]
 8003952:	f002 fa6b 	bl	8005e2c <memcpy>
    }
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003966:	f001 ff93 	bl	8005890 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003970:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003972:	e011      	b.n	8003998 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003978:	2b00      	cmp	r3, #0
 800397a:	d012      	beq.n	80039a2 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3324      	adds	r3, #36	@ 0x24
 8003980:	4618      	mov	r0, r3
 8003982:	f000 fe75 	bl	8004670 <xTaskRemoveFromEventList>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800398c:	f000 ffc6 	bl	800491c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	3b01      	subs	r3, #1
 8003994:	b2db      	uxtb	r3, r3
 8003996:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800399c:	2b00      	cmp	r3, #0
 800399e:	dce9      	bgt.n	8003974 <prvUnlockQueue+0x16>
 80039a0:	e000      	b.n	80039a4 <prvUnlockQueue+0x46>
                    break;
 80039a2:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	22ff      	movs	r2, #255	@ 0xff
 80039a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80039ac:	f001 ffa0 	bl	80058f0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80039b0:	f001 ff6e 	bl	8005890 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039ba:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80039bc:	e011      	b.n	80039e2 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d012      	beq.n	80039ec <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3310      	adds	r3, #16
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fe50 	bl	8004670 <xTaskRemoveFromEventList>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80039d6:	f000 ffa1 	bl	800491c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80039da:	7bbb      	ldrb	r3, [r7, #14]
 80039dc:	3b01      	subs	r3, #1
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80039e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	dce9      	bgt.n	80039be <prvUnlockQueue+0x60>
 80039ea:	e000      	b.n	80039ee <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80039ec:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	22ff      	movs	r2, #255	@ 0xff
 80039f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80039f6:	f001 ff7b 	bl	80058f0 <vPortExitCritical>
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003a0a:	f001 ff41 	bl	8005890 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d102      	bne.n	8003a1c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003a16:	2301      	movs	r3, #1
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	e001      	b.n	8003a20 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003a20:	f001 ff66 	bl	80058f0 <vPortExitCritical>

    return xReturn;
 8003a24:	68fb      	ldr	r3, [r7, #12]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b084      	sub	sp, #16
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003a36:	f001 ff2b 	bl	8005890 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d102      	bne.n	8003a4c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003a46:	2301      	movs	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	e001      	b.n	8003a50 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003a50:	f001 ff4e 	bl	80058f0 <vPortExitCritical>

    return xReturn;
 8003a54:	68fb      	ldr	r3, [r7, #12]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10b      	bne.n	8003a8c <vQueueAddToRegistry+0x2c>
        __asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	60fb      	str	r3, [r7, #12]
    }
 8003a86:	bf00      	nop
 8003a88:	bf00      	nop
 8003a8a:	e7fd      	b.n	8003a88 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d024      	beq.n	8003adc <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	e01e      	b.n	8003ad6 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003a98:	4a17      	ldr	r2, [pc, #92]	@ (8003af8 <vQueueAddToRegistry+0x98>)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d105      	bne.n	8003ab4 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4a12      	ldr	r2, [pc, #72]	@ (8003af8 <vQueueAddToRegistry+0x98>)
 8003aae:	4413      	add	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
                    break;
 8003ab2:	e013      	b.n	8003adc <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10a      	bne.n	8003ad0 <vQueueAddToRegistry+0x70>
 8003aba:	4a0f      	ldr	r2, [pc, #60]	@ (8003af8 <vQueueAddToRegistry+0x98>)
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d104      	bne.n	8003ad0 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4a0b      	ldr	r2, [pc, #44]	@ (8003af8 <vQueueAddToRegistry+0x98>)
 8003acc:	4413      	add	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2b07      	cmp	r3, #7
 8003ada:	d9dd      	bls.n	8003a98 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003aee:	bf00      	nop
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr
 8003af8:	20000140 	.word	0x20000140

08003afc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003b0c:	f001 fec0 	bl	8005890 <vPortEnterCritical>
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b16:	b25b      	sxtb	r3, r3
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1c:	d103      	bne.n	8003b26 <vQueueWaitForMessageRestricted+0x2a>
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b2c:	b25b      	sxtb	r3, r3
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d103      	bne.n	8003b3c <vQueueWaitForMessageRestricted+0x40>
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b3c:	f001 fed8 	bl	80058f0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	3324      	adds	r3, #36	@ 0x24
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	68b9      	ldr	r1, [r7, #8]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fd47 	bl	80045e4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003b56:	6978      	ldr	r0, [r7, #20]
 8003b58:	f7ff ff01 	bl	800395e <prvUnlockQueue>
    }
 8003b5c:	bf00      	nop
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08c      	sub	sp, #48	@ 0x30
 8003b68:	af04      	add	r7, sp, #16
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f001 fce6 	bl	8005548 <pvPortMalloc>
 8003b7c:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d013      	beq.n	8003bac <xTaskCreate+0x48>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b84:	207c      	movs	r0, #124	@ 0x7c
 8003b86:	f001 fcdf 	bl	8005548 <pvPortMalloc>
 8003b8a:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d008      	beq.n	8003ba4 <xTaskCreate+0x40>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003b92:	227c      	movs	r2, #124	@ 0x7c
 8003b94:	2100      	movs	r1, #0
 8003b96:	69f8      	ldr	r0, [r7, #28]
 8003b98:	f002 f904 	bl	8005da4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ba2:	e005      	b.n	8003bb0 <xTaskCreate+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003ba4:	6978      	ldr	r0, [r7, #20]
 8003ba6:	f001 fce1 	bl	800556c <vPortFree>
 8003baa:	e001      	b.n	8003bb0 <xTaskCreate+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d013      	beq.n	8003bde <xTaskCreate+0x7a>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	9303      	str	r3, [sp, #12]
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	9302      	str	r3, [sp, #8]
 8003bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc0:	9301      	str	r3, [sp, #4]
 8003bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	68b9      	ldr	r1, [r7, #8]
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f80e 	bl	8003bee <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003bd2:	69f8      	ldr	r0, [r7, #28]
 8003bd4:	f000 f89c 	bl	8003d10 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	61bb      	str	r3, [r7, #24]
 8003bdc:	e002      	b.n	8003be4 <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003bde:	f04f 33ff 	mov.w	r3, #4294967295
 8003be2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003be4:	69bb      	ldr	r3, [r7, #24]
    }
 8003be6:	4618      	mov	r0, r3
 8003be8:	3720      	adds	r7, #32
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b088      	sub	sp, #32
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	461a      	mov	r2, r3
 8003c06:	21a5      	movs	r1, #165	@ 0xa5
 8003c08:	f002 f8cc 	bl	8005da4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c16:	3b01      	subs	r3, #1
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	f023 0307 	bic.w	r3, r3, #7
 8003c24:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00b      	beq.n	8003c48 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8003c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	617b      	str	r3, [r7, #20]
    }
 8003c42:	bf00      	nop
 8003c44:	bf00      	nop
 8003c46:	e7fd      	b.n	8003c44 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01e      	beq.n	8003c8c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61fb      	str	r3, [r7, #28]
 8003c52:	e012      	b.n	8003c7a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	4413      	add	r3, r2
 8003c5a:	7819      	ldrb	r1, [r3, #0]
 8003c5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	4413      	add	r3, r2
 8003c62:	3334      	adds	r3, #52	@ 0x34
 8003c64:	460a      	mov	r2, r1
 8003c66:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d006      	beq.n	8003c82 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	3301      	adds	r3, #1
 8003c78:	61fb      	str	r3, [r7, #28]
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	2b13      	cmp	r3, #19
 8003c7e:	d9e9      	bls.n	8003c54 <prvInitialiseNewTask+0x66>
 8003c80:	e000      	b.n	8003c84 <prvInitialiseNewTask+0x96>
            {
                break;
 8003c82:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d90b      	bls.n	8003caa <prvInitialiseNewTask+0xbc>
        __asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	613b      	str	r3, [r7, #16]
    }
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	e7fd      	b.n	8003ca6 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d901      	bls.n	8003cb4 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cbe:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f001 fc82 	bl	80055ce <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ccc:	3318      	adds	r3, #24
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f001 fc7d 	bl	80055ce <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cd8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cdc:	f1c3 0205 	rsb	r2, r3, #5
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ce8:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	68f9      	ldr	r1, [r7, #12]
 8003cee:	69b8      	ldr	r0, [r7, #24]
 8003cf0:	f001 fcda 	bl	80056a8 <pxPortInitialiseStack>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf8:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d04:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003d06:	bf00      	nop
 8003d08:	3720      	adds	r7, #32
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003d18:	f001 fdba 	bl	8005890 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003d1c:	4b41      	ldr	r3, [pc, #260]	@ (8003e24 <prvAddNewTaskToReadyList+0x114>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3301      	adds	r3, #1
 8003d22:	4a40      	ldr	r2, [pc, #256]	@ (8003e24 <prvAddNewTaskToReadyList+0x114>)
 8003d24:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003d26:	4b40      	ldr	r3, [pc, #256]	@ (8003e28 <prvAddNewTaskToReadyList+0x118>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003d2e:	4a3e      	ldr	r2, [pc, #248]	@ (8003e28 <prvAddNewTaskToReadyList+0x118>)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d34:	4b3b      	ldr	r3, [pc, #236]	@ (8003e24 <prvAddNewTaskToReadyList+0x114>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d110      	bne.n	8003d5e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003d3c:	f000 fe70 	bl	8004a20 <prvInitialiseTaskLists>
 8003d40:	e00d      	b.n	8003d5e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003d42:	4b3a      	ldr	r3, [pc, #232]	@ (8003e2c <prvAddNewTaskToReadyList+0x11c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d109      	bne.n	8003d5e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d4a:	4b37      	ldr	r3, [pc, #220]	@ (8003e28 <prvAddNewTaskToReadyList+0x118>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d802      	bhi.n	8003d5e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003d58:	4a33      	ldr	r2, [pc, #204]	@ (8003e28 <prvAddNewTaskToReadyList+0x118>)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003d5e:	4b34      	ldr	r3, [pc, #208]	@ (8003e30 <prvAddNewTaskToReadyList+0x120>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3301      	adds	r3, #1
 8003d64:	4a32      	ldr	r2, [pc, #200]	@ (8003e30 <prvAddNewTaskToReadyList+0x120>)
 8003d66:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d68:	4b31      	ldr	r3, [pc, #196]	@ (8003e30 <prvAddNewTaskToReadyList+0x120>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	649a      	str	r2, [r3, #72]	@ 0x48
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d74:	4b2f      	ldr	r3, [pc, #188]	@ (8003e34 <prvAddNewTaskToReadyList+0x124>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d903      	bls.n	8003d84 <prvAddNewTaskToReadyList+0x74>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d80:	4a2c      	ldr	r2, [pc, #176]	@ (8003e34 <prvAddNewTaskToReadyList+0x124>)
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d88:	492b      	ldr	r1, [pc, #172]	@ (8003e38 <prvAddNewTaskToReadyList+0x128>)
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	3304      	adds	r3, #4
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	60da      	str	r2, [r3, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	3204      	adds	r2, #4
 8003db0:	605a      	str	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	1d1a      	adds	r2, r3, #4
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	609a      	str	r2, [r3, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e38 <prvAddNewTaskToReadyList+0x128>)
 8003dc8:	441a      	add	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	615a      	str	r2, [r3, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dd2:	4919      	ldr	r1, [pc, #100]	@ (8003e38 <prvAddNewTaskToReadyList+0x128>)
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	1c59      	adds	r1, r3, #1
 8003de2:	4815      	ldr	r0, [pc, #84]	@ (8003e38 <prvAddNewTaskToReadyList+0x128>)
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4403      	add	r3, r0
 8003dee:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003df0:	f001 fd7e 	bl	80058f0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003df4:	4b0d      	ldr	r3, [pc, #52]	@ (8003e2c <prvAddNewTaskToReadyList+0x11c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00e      	beq.n	8003e1a <prvAddNewTaskToReadyList+0x10a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8003e28 <prvAddNewTaskToReadyList+0x118>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d207      	bcs.n	8003e1a <prvAddNewTaskToReadyList+0x10a>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e3c <prvAddNewTaskToReadyList+0x12c>)
 8003e0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e1a:	bf00      	nop
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000258 	.word	0x20000258
 8003e28:	20000180 	.word	0x20000180
 8003e2c:	20000264 	.word	0x20000264
 8003e30:	20000274 	.word	0x20000274
 8003e34:	20000260 	.word	0x20000260
 8003e38:	20000184 	.word	0x20000184
 8003e3c:	e000ed04 	.word	0xe000ed04

08003e40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d018      	beq.n	8003e84 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003e52:	4b14      	ldr	r3, [pc, #80]	@ (8003ea4 <vTaskDelay+0x64>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00b      	beq.n	8003e72 <vTaskDelay+0x32>
        __asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	60bb      	str	r3, [r7, #8]
    }
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	e7fd      	b.n	8003e6e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003e72:	f000 f86d 	bl	8003f50 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e76:	2100      	movs	r1, #0
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f001 f86f 	bl	8004f5c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003e7e:	f000 f8ab 	bl	8003fd8 <xTaskResumeAll>
 8003e82:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d107      	bne.n	8003e9a <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8003e8a:	4b07      	ldr	r3, [pc, #28]	@ (8003ea8 <vTaskDelay+0x68>)
 8003e8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003e9a:	bf00      	nop
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000280 	.word	0x20000280
 8003ea8:	e000ed04 	.word	0xe000ed04

08003eac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003eb2:	4b20      	ldr	r3, [pc, #128]	@ (8003f34 <vTaskStartScheduler+0x88>)
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	2280      	movs	r2, #128	@ 0x80
 8003ebe:	491e      	ldr	r1, [pc, #120]	@ (8003f38 <vTaskStartScheduler+0x8c>)
 8003ec0:	481e      	ldr	r0, [pc, #120]	@ (8003f3c <vTaskStartScheduler+0x90>)
 8003ec2:	f7ff fe4f 	bl	8003b64 <xTaskCreate>
 8003ec6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d102      	bne.n	8003ed4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8003ece:	f001 f8b3 	bl	8005038 <xTimerCreateTimerTask>
 8003ed2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d116      	bne.n	8003f08 <vTaskStartScheduler+0x5c>
        __asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	60bb      	str	r3, [r7, #8]
    }
 8003eec:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003eee:	4b14      	ldr	r3, [pc, #80]	@ (8003f40 <vTaskStartScheduler+0x94>)
 8003ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003ef6:	4b13      	ldr	r3, [pc, #76]	@ (8003f44 <vTaskStartScheduler+0x98>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003efc:	4b12      	ldr	r3, [pc, #72]	@ (8003f48 <vTaskStartScheduler+0x9c>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003f02:	f001 fc53 	bl	80057ac <xPortStartScheduler>
 8003f06:	e00f      	b.n	8003f28 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0e:	d10b      	bne.n	8003f28 <vTaskStartScheduler+0x7c>
        __asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	607b      	str	r3, [r7, #4]
    }
 8003f22:	bf00      	nop
 8003f24:	bf00      	nop
 8003f26:	e7fd      	b.n	8003f24 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003f28:	4b08      	ldr	r3, [pc, #32]	@ (8003f4c <vTaskStartScheduler+0xa0>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
}
 8003f2c:	bf00      	nop
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	2000027c 	.word	0x2000027c
 8003f38:	080065e4 	.word	0x080065e4
 8003f3c:	08004935 	.word	0x08004935
 8003f40:	20000278 	.word	0x20000278
 8003f44:	20000264 	.word	0x20000264
 8003f48:	2000025c 	.word	0x2000025c
 8003f4c:	2000001c 	.word	0x2000001c

08003f50 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003f54:	4b04      	ldr	r3, [pc, #16]	@ (8003f68 <vTaskSuspendAll+0x18>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	4a03      	ldr	r2, [pc, #12]	@ (8003f68 <vTaskSuspendAll+0x18>)
 8003f5c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003f5e:	bf00      	nop
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	20000280 	.word	0x20000280

08003f6c <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    static TickType_t prvGetExpectedIdleTime( void )
    {
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
        TickType_t xReturn;
        UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8003f72:	2300      	movs	r3, #0
 8003f74:	603b      	str	r3, [r7, #0]
         * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
         * task that are in the Ready state, even though the idle task is
         * running. */
        #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
        {
            if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8003f76:	4b13      	ldr	r3, [pc, #76]	@ (8003fc4 <prvGetExpectedIdleTime+0x58>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <prvGetExpectedIdleTime+0x16>
            {
                uxHigherPriorityReadyTasks = pdTRUE;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	603b      	str	r3, [r7, #0]
                uxHigherPriorityReadyTasks = pdTRUE;
            }
        }
        #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */

        if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8003f82:	4b11      	ldr	r3, [pc, #68]	@ (8003fc8 <prvGetExpectedIdleTime+0x5c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <prvGetExpectedIdleTime+0x26>
        {
            xReturn = 0;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	607b      	str	r3, [r7, #4]
 8003f90:	e012      	b.n	8003fb8 <prvGetExpectedIdleTime+0x4c>
        }
        else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8003f92:	4b0e      	ldr	r3, [pc, #56]	@ (8003fcc <prvGetExpectedIdleTime+0x60>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d902      	bls.n	8003fa0 <prvGetExpectedIdleTime+0x34>
        {
            /* There are other idle priority tasks in the ready state.  If
             * time slicing is used then the very next tick interrupt must be
             * processed. */
            xReturn = 0;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	607b      	str	r3, [r7, #4]
 8003f9e:	e00b      	b.n	8003fb8 <prvGetExpectedIdleTime+0x4c>
        }
        else if( uxHigherPriorityReadyTasks != pdFALSE )
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <prvGetExpectedIdleTime+0x40>
        {
            /* There are tasks in the Ready state that have a priority above the
             * idle priority.  This path can only be reached if
             * configUSE_PREEMPTION is 0. */
            xReturn = 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	607b      	str	r3, [r7, #4]
 8003faa:	e005      	b.n	8003fb8 <prvGetExpectedIdleTime+0x4c>
        }
        else
        {
            xReturn = xNextTaskUnblockTime - xTickCount;
 8003fac:	4b08      	ldr	r3, [pc, #32]	@ (8003fd0 <prvGetExpectedIdleTime+0x64>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b08      	ldr	r3, [pc, #32]	@ (8003fd4 <prvGetExpectedIdleTime+0x68>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	607b      	str	r3, [r7, #4]
        }

        return xReturn;
 8003fb8:	687b      	ldr	r3, [r7, #4]
    }
 8003fba:	4618      	mov	r0, r3
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr
 8003fc4:	20000260 	.word	0x20000260
 8003fc8:	20000180 	.word	0x20000180
 8003fcc:	20000184 	.word	0x20000184
 8003fd0:	20000278 	.word	0x20000278
 8003fd4:	2000025c 	.word	0x2000025c

08003fd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003fe6:	4b72      	ldr	r3, [pc, #456]	@ (80041b0 <xTaskResumeAll+0x1d8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10b      	bne.n	8004006 <xTaskResumeAll+0x2e>
        __asm volatile
 8003fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	607b      	str	r3, [r7, #4]
    }
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	e7fd      	b.n	8004002 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004006:	f001 fc43 	bl	8005890 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800400a:	4b69      	ldr	r3, [pc, #420]	@ (80041b0 <xTaskResumeAll+0x1d8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3b01      	subs	r3, #1
 8004010:	4a67      	ldr	r2, [pc, #412]	@ (80041b0 <xTaskResumeAll+0x1d8>)
 8004012:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004014:	4b66      	ldr	r3, [pc, #408]	@ (80041b0 <xTaskResumeAll+0x1d8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	f040 80c1 	bne.w	80041a0 <xTaskResumeAll+0x1c8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800401e:	4b65      	ldr	r3, [pc, #404]	@ (80041b4 <xTaskResumeAll+0x1dc>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 80bc 	beq.w	80041a0 <xTaskResumeAll+0x1c8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004028:	e08b      	b.n	8004142 <xTaskResumeAll+0x16a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800402a:	4b63      	ldr	r3, [pc, #396]	@ (80041b8 <xTaskResumeAll+0x1e0>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	6a12      	ldr	r2, [r2, #32]
 8004040:	609a      	str	r2, [r3, #8]
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	69fa      	ldr	r2, [r7, #28]
 8004048:	69d2      	ldr	r2, [r2, #28]
 800404a:	605a      	str	r2, [r3, #4]
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	3318      	adds	r3, #24
 8004054:	429a      	cmp	r2, r3
 8004056:	d103      	bne.n	8004060 <xTaskResumeAll+0x88>
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	6a1a      	ldr	r2, [r3, #32]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	605a      	str	r2, [r3, #4]
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	2200      	movs	r2, #0
 8004064:	629a      	str	r2, [r3, #40]	@ 0x28
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	1e5a      	subs	r2, r3, #1
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	68d2      	ldr	r2, [r2, #12]
 800407e:	609a      	str	r2, [r3, #8]
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	6892      	ldr	r2, [r2, #8]
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	3304      	adds	r3, #4
 8004092:	429a      	cmp	r2, r3
 8004094:	d103      	bne.n	800409e <xTaskResumeAll+0xc6>
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	605a      	str	r2, [r3, #4]
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	2200      	movs	r2, #0
 80040a2:	615a      	str	r2, [r3, #20]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	1e5a      	subs	r2, r3, #1
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b2:	4b42      	ldr	r3, [pc, #264]	@ (80041bc <xTaskResumeAll+0x1e4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d903      	bls.n	80040c2 <xTaskResumeAll+0xea>
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040be:	4a3f      	ldr	r2, [pc, #252]	@ (80041bc <xTaskResumeAll+0x1e4>)
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040c6:	493e      	ldr	r1, [pc, #248]	@ (80041c0 <xTaskResumeAll+0x1e8>)
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	3304      	adds	r3, #4
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60bb      	str	r3, [r7, #8]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	609a      	str	r2, [r3, #8]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	60da      	str	r2, [r3, #12]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	3204      	adds	r2, #4
 80040ee:	605a      	str	r2, [r3, #4]
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	1d1a      	adds	r2, r3, #4
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	609a      	str	r2, [r3, #8]
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4a2e      	ldr	r2, [pc, #184]	@ (80041c0 <xTaskResumeAll+0x1e8>)
 8004106:	441a      	add	r2, r3
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	615a      	str	r2, [r3, #20]
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004110:	492b      	ldr	r1, [pc, #172]	@ (80041c0 <xTaskResumeAll+0x1e8>)
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	1c59      	adds	r1, r3, #1
 8004120:	4827      	ldr	r0, [pc, #156]	@ (80041c0 <xTaskResumeAll+0x1e8>)
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4403      	add	r3, r0
 800412c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004132:	4b24      	ldr	r3, [pc, #144]	@ (80041c4 <xTaskResumeAll+0x1ec>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004138:	429a      	cmp	r2, r3
 800413a:	d302      	bcc.n	8004142 <xTaskResumeAll+0x16a>
                    {
                        xYieldPending = pdTRUE;
 800413c:	4b22      	ldr	r3, [pc, #136]	@ (80041c8 <xTaskResumeAll+0x1f0>)
 800413e:	2201      	movs	r2, #1
 8004140:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004142:	4b1d      	ldr	r3, [pc, #116]	@ (80041b8 <xTaskResumeAll+0x1e0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	f47f af6f 	bne.w	800402a <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <xTaskResumeAll+0x17e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004152:	f000 fce3 	bl	8004b1c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004156:	4b1d      	ldr	r3, [pc, #116]	@ (80041cc <xTaskResumeAll+0x1f4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d010      	beq.n	8004184 <xTaskResumeAll+0x1ac>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004162:	f000 f8a3 	bl	80042ac <xTaskIncrementTick>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <xTaskResumeAll+0x19a>
                            {
                                xYieldPending = pdTRUE;
 800416c:	4b16      	ldr	r3, [pc, #88]	@ (80041c8 <xTaskResumeAll+0x1f0>)
 800416e:	2201      	movs	r2, #1
 8004170:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	3b01      	subs	r3, #1
 8004176:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f1      	bne.n	8004162 <xTaskResumeAll+0x18a>

                        xPendedTicks = 0;
 800417e:	4b13      	ldr	r3, [pc, #76]	@ (80041cc <xTaskResumeAll+0x1f4>)
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004184:	4b10      	ldr	r3, [pc, #64]	@ (80041c8 <xTaskResumeAll+0x1f0>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d009      	beq.n	80041a0 <xTaskResumeAll+0x1c8>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800418c:	2301      	movs	r3, #1
 800418e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004190:	4b0f      	ldr	r3, [pc, #60]	@ (80041d0 <xTaskResumeAll+0x1f8>)
 8004192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80041a0:	f001 fba6 	bl	80058f0 <vPortExitCritical>

    return xAlreadyYielded;
 80041a4:	69bb      	ldr	r3, [r7, #24]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3720      	adds	r7, #32
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000280 	.word	0x20000280
 80041b4:	20000258 	.word	0x20000258
 80041b8:	20000218 	.word	0x20000218
 80041bc:	20000260 	.word	0x20000260
 80041c0:	20000184 	.word	0x20000184
 80041c4:	20000180 	.word	0x20000180
 80041c8:	2000026c 	.word	0x2000026c
 80041cc:	20000268 	.word	0x20000268
 80041d0:	e000ed04 	.word	0xe000ed04

080041d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80041da:	4b04      	ldr	r3, [pc, #16]	@ (80041ec <xTaskGetTickCount+0x18>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80041e0:	687b      	ldr	r3, [r7, #4]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr
 80041ec:	2000025c 	.word	0x2000025c

080041f0 <vTaskStepTick>:
 * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
 * 1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

    void vTaskStepTick( TickType_t xTicksToJump )
    {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
        /* Correct the tick count value after a period during which the tick
         * was suppressed.  Note this does *not* call the tick hook function for
         * each stepped tick. */
        configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 80041f8:	4b28      	ldr	r3, [pc, #160]	@ (800429c <vTaskStepTick+0xac>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	441a      	add	r2, r3
 8004200:	4b27      	ldr	r3, [pc, #156]	@ (80042a0 <vTaskStepTick+0xb0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d90b      	bls.n	8004220 <vTaskStepTick+0x30>
        __asm volatile
 8004208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	617b      	str	r3, [r7, #20]
    }
 800421a:	bf00      	nop
 800421c:	bf00      	nop
 800421e:	e7fd      	b.n	800421c <vTaskStepTick+0x2c>

        if( ( xTickCount + xTicksToJump ) == xNextTaskUnblockTime )
 8004220:	4b1e      	ldr	r3, [pc, #120]	@ (800429c <vTaskStepTick+0xac>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	441a      	add	r2, r3
 8004228:	4b1d      	ldr	r3, [pc, #116]	@ (80042a0 <vTaskStepTick+0xb0>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d12a      	bne.n	8004286 <vTaskStepTick+0x96>
        {
            /* Arrange for xTickCount to reach xNextTaskUnblockTime in
             * xTaskIncrementTick() when the scheduler resumes.  This ensures
             * that any delayed tasks are resumed at the correct time. */
            configASSERT( uxSchedulerSuspended );
 8004230:	4b1c      	ldr	r3, [pc, #112]	@ (80042a4 <vTaskStepTick+0xb4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10b      	bne.n	8004250 <vTaskStepTick+0x60>
        __asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	613b      	str	r3, [r7, #16]
    }
 800424a:	bf00      	nop
 800424c:	bf00      	nop
 800424e:	e7fd      	b.n	800424c <vTaskStepTick+0x5c>
            configASSERT( xTicksToJump != ( TickType_t ) 0 );
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10b      	bne.n	800426e <vTaskStepTick+0x7e>
        __asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	60fb      	str	r3, [r7, #12]
    }
 8004268:	bf00      	nop
 800426a:	bf00      	nop
 800426c:	e7fd      	b.n	800426a <vTaskStepTick+0x7a>

            /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
            taskENTER_CRITICAL();
 800426e:	f001 fb0f 	bl	8005890 <vPortEnterCritical>
            {
                xPendedTicks++;
 8004272:	4b0d      	ldr	r3, [pc, #52]	@ (80042a8 <vTaskStepTick+0xb8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3301      	adds	r3, #1
 8004278:	4a0b      	ldr	r2, [pc, #44]	@ (80042a8 <vTaskStepTick+0xb8>)
 800427a:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800427c:	f001 fb38 	bl	80058f0 <vPortExitCritical>
            xTicksToJump--;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3b01      	subs	r3, #1
 8004284:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        xTickCount += xTicksToJump;
 8004286:	4b05      	ldr	r3, [pc, #20]	@ (800429c <vTaskStepTick+0xac>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4413      	add	r3, r2
 800428e:	4a03      	ldr	r2, [pc, #12]	@ (800429c <vTaskStepTick+0xac>)
 8004290:	6013      	str	r3, [r2, #0]
        traceINCREASE_TICK_COUNT( xTicksToJump );
    }
 8004292:	bf00      	nop
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	2000025c 	.word	0x2000025c
 80042a0:	20000278 	.word	0x20000278
 80042a4:	20000280 	.word	0x20000280
 80042a8:	20000268 	.word	0x20000268

080042ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08a      	sub	sp, #40	@ 0x28
 80042b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042b6:	4b7e      	ldr	r3, [pc, #504]	@ (80044b0 <xTaskIncrementTick+0x204>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f040 80ee 	bne.w	800449c <xTaskIncrementTick+0x1f0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042c0:	4b7c      	ldr	r3, [pc, #496]	@ (80044b4 <xTaskIncrementTick+0x208>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3301      	adds	r3, #1
 80042c6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80042c8:	4a7a      	ldr	r2, [pc, #488]	@ (80044b4 <xTaskIncrementTick+0x208>)
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d121      	bne.n	8004318 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80042d4:	4b78      	ldr	r3, [pc, #480]	@ (80044b8 <xTaskIncrementTick+0x20c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00b      	beq.n	80042f6 <xTaskIncrementTick+0x4a>
        __asm volatile
 80042de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	607b      	str	r3, [r7, #4]
    }
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	e7fd      	b.n	80042f2 <xTaskIncrementTick+0x46>
 80042f6:	4b70      	ldr	r3, [pc, #448]	@ (80044b8 <xTaskIncrementTick+0x20c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	61fb      	str	r3, [r7, #28]
 80042fc:	4b6f      	ldr	r3, [pc, #444]	@ (80044bc <xTaskIncrementTick+0x210>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a6d      	ldr	r2, [pc, #436]	@ (80044b8 <xTaskIncrementTick+0x20c>)
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	4a6d      	ldr	r2, [pc, #436]	@ (80044bc <xTaskIncrementTick+0x210>)
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	4b6d      	ldr	r3, [pc, #436]	@ (80044c0 <xTaskIncrementTick+0x214>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3301      	adds	r3, #1
 8004310:	4a6b      	ldr	r2, [pc, #428]	@ (80044c0 <xTaskIncrementTick+0x214>)
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	f000 fc02 	bl	8004b1c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004318:	4b6a      	ldr	r3, [pc, #424]	@ (80044c4 <xTaskIncrementTick+0x218>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6a3a      	ldr	r2, [r7, #32]
 800431e:	429a      	cmp	r2, r3
 8004320:	f0c0 80a7 	bcc.w	8004472 <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004324:	4b64      	ldr	r3, [pc, #400]	@ (80044b8 <xTaskIncrementTick+0x20c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d104      	bne.n	8004338 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800432e:	4b65      	ldr	r3, [pc, #404]	@ (80044c4 <xTaskIncrementTick+0x218>)
 8004330:	f04f 32ff 	mov.w	r2, #4294967295
 8004334:	601a      	str	r2, [r3, #0]
                    break;
 8004336:	e09c      	b.n	8004472 <xTaskIncrementTick+0x1c6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004338:	4b5f      	ldr	r3, [pc, #380]	@ (80044b8 <xTaskIncrementTick+0x20c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004348:	6a3a      	ldr	r2, [r7, #32]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	429a      	cmp	r2, r3
 800434e:	d203      	bcs.n	8004358 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004350:	4a5c      	ldr	r2, [pc, #368]	@ (80044c4 <xTaskIncrementTick+0x218>)
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004356:	e08c      	b.n	8004472 <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	68d2      	ldr	r2, [r2, #12]
 8004366:	609a      	str	r2, [r3, #8]
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	6892      	ldr	r2, [r2, #8]
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	3304      	adds	r3, #4
 800437a:	429a      	cmp	r2, r3
 800437c:	d103      	bne.n	8004386 <xTaskIncrementTick+0xda>
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	605a      	str	r2, [r3, #4]
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2200      	movs	r2, #0
 800438a:	615a      	str	r2, [r3, #20]
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	1e5a      	subs	r2, r3, #1
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439a:	2b00      	cmp	r3, #0
 800439c:	d01e      	beq.n	80043dc <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	6a12      	ldr	r2, [r2, #32]
 80043ac:	609a      	str	r2, [r3, #8]
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	69d2      	ldr	r2, [r2, #28]
 80043b6:	605a      	str	r2, [r3, #4]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	3318      	adds	r3, #24
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d103      	bne.n	80043cc <xTaskIncrementTick+0x120>
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	6a1a      	ldr	r2, [r3, #32]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	605a      	str	r2, [r3, #4]
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	2200      	movs	r2, #0
 80043d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	1e5a      	subs	r2, r3, #1
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e0:	4b39      	ldr	r3, [pc, #228]	@ (80044c8 <xTaskIncrementTick+0x21c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d903      	bls.n	80043f0 <xTaskIncrementTick+0x144>
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	4a36      	ldr	r2, [pc, #216]	@ (80044c8 <xTaskIncrementTick+0x21c>)
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043f4:	4935      	ldr	r1, [pc, #212]	@ (80044cc <xTaskIncrementTick+0x220>)
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	3304      	adds	r3, #4
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60bb      	str	r3, [r7, #8]
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	609a      	str	r2, [r3, #8]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	60da      	str	r2, [r3, #12]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	3204      	adds	r2, #4
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	1d1a      	adds	r2, r3, #4
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	609a      	str	r2, [r3, #8]
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800442a:	4613      	mov	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4a26      	ldr	r2, [pc, #152]	@ (80044cc <xTaskIncrementTick+0x220>)
 8004434:	441a      	add	r2, r3
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	615a      	str	r2, [r3, #20]
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800443e:	4923      	ldr	r1, [pc, #140]	@ (80044cc <xTaskIncrementTick+0x220>)
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	1c59      	adds	r1, r3, #1
 800444e:	481f      	ldr	r0, [pc, #124]	@ (80044cc <xTaskIncrementTick+0x220>)
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4403      	add	r3, r0
 800445a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004460:	4b1b      	ldr	r3, [pc, #108]	@ (80044d0 <xTaskIncrementTick+0x224>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004466:	429a      	cmp	r2, r3
 8004468:	f67f af5c 	bls.w	8004324 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800446c:	2301      	movs	r3, #1
 800446e:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004470:	e758      	b.n	8004324 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004472:	4b17      	ldr	r3, [pc, #92]	@ (80044d0 <xTaskIncrementTick+0x224>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004478:	4914      	ldr	r1, [pc, #80]	@ (80044cc <xTaskIncrementTick+0x220>)
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	440b      	add	r3, r1
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d901      	bls.n	800448e <xTaskIncrementTick+0x1e2>
            {
                xSwitchRequired = pdTRUE;
 800448a:	2301      	movs	r3, #1
 800448c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800448e:	4b11      	ldr	r3, [pc, #68]	@ (80044d4 <xTaskIncrementTick+0x228>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <xTaskIncrementTick+0x1fa>
            {
                xSwitchRequired = pdTRUE;
 8004496:	2301      	movs	r3, #1
 8004498:	627b      	str	r3, [r7, #36]	@ 0x24
 800449a:	e004      	b.n	80044a6 <xTaskIncrementTick+0x1fa>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800449c:	4b0e      	ldr	r3, [pc, #56]	@ (80044d8 <xTaskIncrementTick+0x22c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3301      	adds	r3, #1
 80044a2:	4a0d      	ldr	r2, [pc, #52]	@ (80044d8 <xTaskIncrementTick+0x22c>)
 80044a4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80044a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3728      	adds	r7, #40	@ 0x28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20000280 	.word	0x20000280
 80044b4:	2000025c 	.word	0x2000025c
 80044b8:	20000210 	.word	0x20000210
 80044bc:	20000214 	.word	0x20000214
 80044c0:	20000270 	.word	0x20000270
 80044c4:	20000278 	.word	0x20000278
 80044c8:	20000260 	.word	0x20000260
 80044cc:	20000184 	.word	0x20000184
 80044d0:	20000180 	.word	0x20000180
 80044d4:	2000026c 	.word	0x2000026c
 80044d8:	20000268 	.word	0x20000268

080044dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044e2:	4b28      	ldr	r3, [pc, #160]	@ (8004584 <vTaskSwitchContext+0xa8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80044ea:	4b27      	ldr	r3, [pc, #156]	@ (8004588 <vTaskSwitchContext+0xac>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80044f0:	e042      	b.n	8004578 <vTaskSwitchContext+0x9c>
        xYieldPending = pdFALSE;
 80044f2:	4b25      	ldr	r3, [pc, #148]	@ (8004588 <vTaskSwitchContext+0xac>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044f8:	4b24      	ldr	r3, [pc, #144]	@ (800458c <vTaskSwitchContext+0xb0>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	e011      	b.n	8004524 <vTaskSwitchContext+0x48>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10b      	bne.n	800451e <vTaskSwitchContext+0x42>
        __asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	607b      	str	r3, [r7, #4]
    }
 8004518:	bf00      	nop
 800451a:	bf00      	nop
 800451c:	e7fd      	b.n	800451a <vTaskSwitchContext+0x3e>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3b01      	subs	r3, #1
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	491a      	ldr	r1, [pc, #104]	@ (8004590 <vTaskSwitchContext+0xb4>)
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0e3      	beq.n	8004500 <vTaskSwitchContext+0x24>
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4a13      	ldr	r2, [pc, #76]	@ (8004590 <vTaskSwitchContext+0xb4>)
 8004544:	4413      	add	r3, r2
 8004546:	60bb      	str	r3, [r7, #8]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	3308      	adds	r3, #8
 800455a:	429a      	cmp	r2, r3
 800455c:	d104      	bne.n	8004568 <vTaskSwitchContext+0x8c>
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	605a      	str	r2, [r3, #4]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	4a09      	ldr	r2, [pc, #36]	@ (8004594 <vTaskSwitchContext+0xb8>)
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	4a06      	ldr	r2, [pc, #24]	@ (800458c <vTaskSwitchContext+0xb0>)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6013      	str	r3, [r2, #0]
}
 8004578:	bf00      	nop
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	bc80      	pop	{r7}
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	20000280 	.word	0x20000280
 8004588:	2000026c 	.word	0x2000026c
 800458c:	20000260 	.word	0x20000260
 8004590:	20000184 	.word	0x20000184
 8004594:	20000180 	.word	0x20000180

08004598 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10b      	bne.n	80045c0 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	60fb      	str	r3, [r7, #12]
    }
 80045ba:	bf00      	nop
 80045bc:	bf00      	nop
 80045be:	e7fd      	b.n	80045bc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045c0:	4b07      	ldr	r3, [pc, #28]	@ (80045e0 <vTaskPlaceOnEventList+0x48>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3318      	adds	r3, #24
 80045c6:	4619      	mov	r1, r3
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f001 f80c 	bl	80055e6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045ce:	2101      	movs	r1, #1
 80045d0:	6838      	ldr	r0, [r7, #0]
 80045d2:	f000 fcc3 	bl	8004f5c <prvAddCurrentTaskToDelayedList>
}
 80045d6:	bf00      	nop
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20000180 	.word	0x20000180

080045e4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10b      	bne.n	800460e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80045f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	613b      	str	r3, [r7, #16]
    }
 8004608:	bf00      	nop
 800460a:	bf00      	nop
 800460c:	e7fd      	b.n	800460a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	4b15      	ldr	r3, [pc, #84]	@ (800466c <vTaskPlaceOnEventListRestricted+0x88>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	61da      	str	r2, [r3, #28]
 800461c:	4b13      	ldr	r3, [pc, #76]	@ (800466c <vTaskPlaceOnEventListRestricted+0x88>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	6892      	ldr	r2, [r2, #8]
 8004624:	621a      	str	r2, [r3, #32]
 8004626:	4b11      	ldr	r3, [pc, #68]	@ (800466c <vTaskPlaceOnEventListRestricted+0x88>)
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	3218      	adds	r2, #24
 8004630:	605a      	str	r2, [r3, #4]
 8004632:	4b0e      	ldr	r3, [pc, #56]	@ (800466c <vTaskPlaceOnEventListRestricted+0x88>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f103 0218 	add.w	r2, r3, #24
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	609a      	str	r2, [r3, #8]
 800463e:	4b0b      	ldr	r3, [pc, #44]	@ (800466c <vTaskPlaceOnEventListRestricted+0x88>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	629a      	str	r2, [r3, #40]	@ 0x28
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8004656:	f04f 33ff 	mov.w	r3, #4294967295
 800465a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	68b8      	ldr	r0, [r7, #8]
 8004660:	f000 fc7c 	bl	8004f5c <prvAddCurrentTaskToDelayedList>
    }
 8004664:	bf00      	nop
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	20000180 	.word	0x20000180

08004670 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08a      	sub	sp, #40	@ 0x28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10b      	bne.n	800469e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8004686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	60fb      	str	r3, [r7, #12]
    }
 8004698:	bf00      	nop
 800469a:	bf00      	nop
 800469c:	e7fd      	b.n	800469a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a2:	61fb      	str	r3, [r7, #28]
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	6a3a      	ldr	r2, [r7, #32]
 80046aa:	6a12      	ldr	r2, [r2, #32]
 80046ac:	609a      	str	r2, [r3, #8]
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	6a3a      	ldr	r2, [r7, #32]
 80046b4:	69d2      	ldr	r2, [r2, #28]
 80046b6:	605a      	str	r2, [r3, #4]
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	3318      	adds	r3, #24
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d103      	bne.n	80046cc <xTaskRemoveFromEventList+0x5c>
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	6a1a      	ldr	r2, [r3, #32]
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	605a      	str	r2, [r3, #4]
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	2200      	movs	r2, #0
 80046d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	1e5a      	subs	r2, r3, #1
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046dc:	4b4a      	ldr	r3, [pc, #296]	@ (8004808 <xTaskRemoveFromEventList+0x198>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d161      	bne.n	80047a8 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	6a3a      	ldr	r2, [r7, #32]
 80046f0:	68d2      	ldr	r2, [r2, #12]
 80046f2:	609a      	str	r2, [r3, #8]
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	6a3a      	ldr	r2, [r7, #32]
 80046fa:	6892      	ldr	r2, [r2, #8]
 80046fc:	605a      	str	r2, [r3, #4]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	3304      	adds	r3, #4
 8004706:	429a      	cmp	r2, r3
 8004708:	d103      	bne.n	8004712 <xTaskRemoveFromEventList+0xa2>
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	605a      	str	r2, [r3, #4]
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	2200      	movs	r2, #0
 8004716:	615a      	str	r2, [r3, #20]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	1e5a      	subs	r2, r3, #1
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004726:	4b39      	ldr	r3, [pc, #228]	@ (800480c <xTaskRemoveFromEventList+0x19c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d903      	bls.n	8004736 <xTaskRemoveFromEventList+0xc6>
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004732:	4a36      	ldr	r2, [pc, #216]	@ (800480c <xTaskRemoveFromEventList+0x19c>)
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800473a:	4935      	ldr	r1, [pc, #212]	@ (8004810 <xTaskRemoveFromEventList+0x1a0>)
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	3304      	adds	r3, #4
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	609a      	str	r2, [r3, #8]
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	60da      	str	r2, [r3, #12]
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	6a3a      	ldr	r2, [r7, #32]
 8004760:	3204      	adds	r2, #4
 8004762:	605a      	str	r2, [r3, #4]
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	1d1a      	adds	r2, r3, #4
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	609a      	str	r2, [r3, #8]
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4a25      	ldr	r2, [pc, #148]	@ (8004810 <xTaskRemoveFromEventList+0x1a0>)
 800477a:	441a      	add	r2, r3
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	615a      	str	r2, [r3, #20]
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004784:	4922      	ldr	r1, [pc, #136]	@ (8004810 <xTaskRemoveFromEventList+0x1a0>)
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	1c59      	adds	r1, r3, #1
 8004794:	481e      	ldr	r0, [pc, #120]	@ (8004810 <xTaskRemoveFromEventList+0x1a0>)
 8004796:	4613      	mov	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4403      	add	r3, r0
 80047a0:	6019      	str	r1, [r3, #0]
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
             * at the earliest possible time - so reset xNextTaskUnblockTime here to
             * ensure it is updated at the earliest possible time. */
            prvResetNextTaskUnblockTime();
 80047a2:	f000 f9bb 	bl	8004b1c <prvResetNextTaskUnblockTime>
 80047a6:	e01b      	b.n	80047e0 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004814 <xTaskRemoveFromEventList+0x1a4>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	61bb      	str	r3, [r7, #24]
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	61da      	str	r2, [r3, #28]
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	621a      	str	r2, [r3, #32]
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	6a3a      	ldr	r2, [r7, #32]
 80047c2:	3218      	adds	r2, #24
 80047c4:	605a      	str	r2, [r3, #4]
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	f103 0218 	add.w	r2, r3, #24
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	609a      	str	r2, [r3, #8]
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	4a10      	ldr	r2, [pc, #64]	@ (8004814 <xTaskRemoveFromEventList+0x1a4>)
 80047d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80047d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004814 <xTaskRemoveFromEventList+0x1a4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3301      	adds	r3, #1
 80047dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004814 <xTaskRemoveFromEventList+0x1a4>)
 80047de:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004818 <xTaskRemoveFromEventList+0x1a8>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d905      	bls.n	80047fa <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80047ee:	2301      	movs	r3, #1
 80047f0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80047f2:	4b0a      	ldr	r3, [pc, #40]	@ (800481c <xTaskRemoveFromEventList+0x1ac>)
 80047f4:	2201      	movs	r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	e001      	b.n	80047fe <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80047fa:	2300      	movs	r3, #0
 80047fc:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004800:	4618      	mov	r0, r3
 8004802:	3728      	adds	r7, #40	@ 0x28
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20000280 	.word	0x20000280
 800480c:	20000260 	.word	0x20000260
 8004810:	20000184 	.word	0x20000184
 8004814:	20000218 	.word	0x20000218
 8004818:	20000180 	.word	0x20000180
 800481c:	2000026c 	.word	0x2000026c

08004820 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004828:	4b06      	ldr	r3, [pc, #24]	@ (8004844 <vTaskInternalSetTimeOutState+0x24>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004830:	4b05      	ldr	r3, [pc, #20]	@ (8004848 <vTaskInternalSetTimeOutState+0x28>)
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	605a      	str	r2, [r3, #4]
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	20000270 	.word	0x20000270
 8004848:	2000025c 	.word	0x2000025c

0800484c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10b      	bne.n	8004874 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	613b      	str	r3, [r7, #16]
    }
 800486e:	bf00      	nop
 8004870:	bf00      	nop
 8004872:	e7fd      	b.n	8004870 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10b      	bne.n	8004892 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	60fb      	str	r3, [r7, #12]
    }
 800488c:	bf00      	nop
 800488e:	bf00      	nop
 8004890:	e7fd      	b.n	800488e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8004892:	f000 fffd 	bl	8005890 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004896:	4b1f      	ldr	r3, [pc, #124]	@ (8004914 <xTaskCheckForTimeOut+0xc8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ae:	d102      	bne.n	80048b6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	e026      	b.n	8004904 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4b17      	ldr	r3, [pc, #92]	@ (8004918 <xTaskCheckForTimeOut+0xcc>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d00a      	beq.n	80048d8 <xTaskCheckForTimeOut+0x8c>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d305      	bcc.n	80048d8 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80048cc:	2301      	movs	r3, #1
 80048ce:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	e015      	b.n	8004904 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d20b      	bcs.n	80048fa <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	1ad2      	subs	r2, r2, r3
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7ff ff96 	bl	8004820 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80048f4:	2300      	movs	r3, #0
 80048f6:	61fb      	str	r3, [r7, #28]
 80048f8:	e004      	b.n	8004904 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004900:	2301      	movs	r3, #1
 8004902:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004904:	f000 fff4 	bl	80058f0 <vPortExitCritical>

    return xReturn;
 8004908:	69fb      	ldr	r3, [r7, #28]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	2000025c 	.word	0x2000025c
 8004918:	20000270 	.word	0x20000270

0800491c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004920:	4b03      	ldr	r3, [pc, #12]	@ (8004930 <vTaskMissedYield+0x14>)
 8004922:	2201      	movs	r2, #1
 8004924:	601a      	str	r2, [r3, #0]
}
 8004926:	bf00      	nop
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	2000026c 	.word	0x2000026c

08004934 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800493c:	f000 f8b0 	bl	8004aa0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004940:	4b18      	ldr	r3, [pc, #96]	@ (80049a4 <prvIdleTask+0x70>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d907      	bls.n	8004958 <prvIdleTask+0x24>
            {
                taskYIELD();
 8004948:	4b17      	ldr	r3, [pc, #92]	@ (80049a8 <prvIdleTask+0x74>)
 800494a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	f3bf 8f6f 	isb	sy
            /* It is not desirable to suspend then resume the scheduler on
             * each iteration of the idle task.  Therefore, a preliminary
             * test of the expected idle time is performed without the
             * scheduler suspended.  The result here is not necessarily
             * valid. */
            xExpectedIdleTime = prvGetExpectedIdleTime();
 8004958:	f7ff fb08 	bl	8003f6c <prvGetExpectedIdleTime>
 800495c:	60f8      	str	r0, [r7, #12]

            if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d9eb      	bls.n	800493c <prvIdleTask+0x8>
            {
                vTaskSuspendAll();
 8004964:	f7ff faf4 	bl	8003f50 <vTaskSuspendAll>
                {
                    /* Now the scheduler is suspended, the expected idle
                     * time can be sampled again, and this time its value can
                     * be used. */
                    configASSERT( xNextTaskUnblockTime >= xTickCount );
 8004968:	4b10      	ldr	r3, [pc, #64]	@ (80049ac <prvIdleTask+0x78>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	4b10      	ldr	r3, [pc, #64]	@ (80049b0 <prvIdleTask+0x7c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d20b      	bcs.n	800498c <prvIdleTask+0x58>
        __asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	60bb      	str	r3, [r7, #8]
    }
 8004986:	bf00      	nop
 8004988:	bf00      	nop
 800498a:	e7fd      	b.n	8004988 <prvIdleTask+0x54>
                    xExpectedIdleTime = prvGetExpectedIdleTime();
 800498c:	f7ff faee 	bl	8003f6c <prvGetExpectedIdleTime>
 8004990:	60f8      	str	r0, [r7, #12]
                    /* Define the following macro to set xExpectedIdleTime to 0
                     * if the application does not want
                     * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
                    configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

                    if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d902      	bls.n	800499e <prvIdleTask+0x6a>
                    {
                        traceLOW_POWER_IDLE_BEGIN();
                        portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f001 f81f 	bl	80059dc <vPortSuppressTicksAndSleep>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                ( void ) xTaskResumeAll();
 800499e:	f7ff fb1b 	bl	8003fd8 <xTaskResumeAll>
        prvCheckTasksWaitingTermination();
 80049a2:	e7cb      	b.n	800493c <prvIdleTask+0x8>
 80049a4:	20000184 	.word	0x20000184
 80049a8:	e000ed04 	.word	0xe000ed04
 80049ac:	20000278 	.word	0x20000278
 80049b0:	2000025c 	.word	0x2000025c

080049b4 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    eSleepModeStatus eTaskConfirmSleepModeStatus( void )
    {
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
        #if ( INCLUDE_vTaskSuspend == 1 )
            /* The idle task exists in addition to the application tasks. */
            const UBaseType_t uxNonApplicationTasks = 1;
 80049ba:	2301      	movs	r3, #1
 80049bc:	603b      	str	r3, [r7, #0]
        #endif /* INCLUDE_vTaskSuspend */

        eSleepModeStatus eReturn = eStandardSleep;
 80049be:	2301      	movs	r3, #1
 80049c0:	71fb      	strb	r3, [r7, #7]

        /* This function must be called from a critical section. */

        if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 80049c2:	4b12      	ldr	r3, [pc, #72]	@ (8004a0c <eTaskConfirmSleepModeStatus+0x58>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <eTaskConfirmSleepModeStatus+0x1c>
        {
            /* A task was made ready while the scheduler was suspended. */
            eReturn = eAbortSleep;
 80049ca:	2300      	movs	r3, #0
 80049cc:	71fb      	strb	r3, [r7, #7]
 80049ce:	e017      	b.n	8004a00 <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xYieldPending != pdFALSE )
 80049d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004a10 <eTaskConfirmSleepModeStatus+0x5c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <eTaskConfirmSleepModeStatus+0x2a>
        {
            /* A yield was pended while the scheduler was suspended. */
            eReturn = eAbortSleep;
 80049d8:	2300      	movs	r3, #0
 80049da:	71fb      	strb	r3, [r7, #7]
 80049dc:	e010      	b.n	8004a00 <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xPendedTicks != 0 )
 80049de:	4b0d      	ldr	r3, [pc, #52]	@ (8004a14 <eTaskConfirmSleepModeStatus+0x60>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <eTaskConfirmSleepModeStatus+0x38>
        {
            /* A tick interrupt has already occurred but was held pending
             * because the scheduler is suspended. */
            eReturn = eAbortSleep;
 80049e6:	2300      	movs	r3, #0
 80049e8:	71fb      	strb	r3, [r7, #7]
 80049ea:	e009      	b.n	8004a00 <eTaskConfirmSleepModeStatus+0x4c>
        }

        #if ( INCLUDE_vTaskSuspend == 1 )
            else if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 80049ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004a18 <eTaskConfirmSleepModeStatus+0x64>)
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	4b0a      	ldr	r3, [pc, #40]	@ (8004a1c <eTaskConfirmSleepModeStatus+0x68>)
 80049f2:	6819      	ldr	r1, [r3, #0]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	1acb      	subs	r3, r1, r3
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d101      	bne.n	8004a00 <eTaskConfirmSleepModeStatus+0x4c>
            {
                /* If all the tasks are in the suspended list (which might mean they
                 * have an infinite block time rather than actually being suspended)
                 * then it is safe to turn all clocks off and just wait for external
                 * interrupts. */
                eReturn = eNoTasksWaitingTimeout;
 80049fc:	2302      	movs	r3, #2
 80049fe:	71fb      	strb	r3, [r7, #7]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return eReturn;
 8004a00:	79fb      	ldrb	r3, [r7, #7]
    }
 8004a02:	4618      	mov	r0, r3
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr
 8004a0c:	20000218 	.word	0x20000218
 8004a10:	2000026c 	.word	0x2000026c
 8004a14:	20000268 	.word	0x20000268
 8004a18:	20000244 	.word	0x20000244
 8004a1c:	20000258 	.word	0x20000258

08004a20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a26:	2300      	movs	r3, #0
 8004a28:	607b      	str	r3, [r7, #4]
 8004a2a:	e00c      	b.n	8004a46 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4a12      	ldr	r2, [pc, #72]	@ (8004a80 <prvInitialiseTaskLists+0x60>)
 8004a38:	4413      	add	r3, r2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fda8 	bl	8005590 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3301      	adds	r3, #1
 8004a44:	607b      	str	r3, [r7, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d9ef      	bls.n	8004a2c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004a4c:	480d      	ldr	r0, [pc, #52]	@ (8004a84 <prvInitialiseTaskLists+0x64>)
 8004a4e:	f000 fd9f 	bl	8005590 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004a52:	480d      	ldr	r0, [pc, #52]	@ (8004a88 <prvInitialiseTaskLists+0x68>)
 8004a54:	f000 fd9c 	bl	8005590 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004a58:	480c      	ldr	r0, [pc, #48]	@ (8004a8c <prvInitialiseTaskLists+0x6c>)
 8004a5a:	f000 fd99 	bl	8005590 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004a5e:	480c      	ldr	r0, [pc, #48]	@ (8004a90 <prvInitialiseTaskLists+0x70>)
 8004a60:	f000 fd96 	bl	8005590 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004a64:	480b      	ldr	r0, [pc, #44]	@ (8004a94 <prvInitialiseTaskLists+0x74>)
 8004a66:	f000 fd93 	bl	8005590 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a98 <prvInitialiseTaskLists+0x78>)
 8004a6c:	4a05      	ldr	r2, [pc, #20]	@ (8004a84 <prvInitialiseTaskLists+0x64>)
 8004a6e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a70:	4b0a      	ldr	r3, [pc, #40]	@ (8004a9c <prvInitialiseTaskLists+0x7c>)
 8004a72:	4a05      	ldr	r2, [pc, #20]	@ (8004a88 <prvInitialiseTaskLists+0x68>)
 8004a74:	601a      	str	r2, [r3, #0]
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000184 	.word	0x20000184
 8004a84:	200001e8 	.word	0x200001e8
 8004a88:	200001fc 	.word	0x200001fc
 8004a8c:	20000218 	.word	0x20000218
 8004a90:	2000022c 	.word	0x2000022c
 8004a94:	20000244 	.word	0x20000244
 8004a98:	20000210 	.word	0x20000210
 8004a9c:	20000214 	.word	0x20000214

08004aa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aa6:	e019      	b.n	8004adc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8004aa8:	f000 fef2 	bl	8005890 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aac:	4b10      	ldr	r3, [pc, #64]	@ (8004af0 <prvCheckTasksWaitingTermination+0x50>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 fdcc 	bl	8005656 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8004abe:	4b0d      	ldr	r3, [pc, #52]	@ (8004af4 <prvCheckTasksWaitingTermination+0x54>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	4a0b      	ldr	r2, [pc, #44]	@ (8004af4 <prvCheckTasksWaitingTermination+0x54>)
 8004ac6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8004af8 <prvCheckTasksWaitingTermination+0x58>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	4a0a      	ldr	r2, [pc, #40]	@ (8004af8 <prvCheckTasksWaitingTermination+0x58>)
 8004ad0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8004ad2:	f000 ff0d 	bl	80058f0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f810 	bl	8004afc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004adc:	4b06      	ldr	r3, [pc, #24]	@ (8004af8 <prvCheckTasksWaitingTermination+0x58>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e1      	bne.n	8004aa8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	2000022c 	.word	0x2000022c
 8004af4:	20000258 	.word	0x20000258
 8004af8:	20000240 	.word	0x20000240

08004afc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 fd2f 	bl	800556c <vPortFree>
            vPortFree( pxTCB );
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fd2c 	bl	800556c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004b14:	bf00      	nop
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b20:	4b09      	ldr	r3, [pc, #36]	@ (8004b48 <prvResetNextTaskUnblockTime+0x2c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d104      	bne.n	8004b34 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004b2a:	4b08      	ldr	r3, [pc, #32]	@ (8004b4c <prvResetNextTaskUnblockTime+0x30>)
 8004b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b30:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004b32:	e005      	b.n	8004b40 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b34:	4b04      	ldr	r3, [pc, #16]	@ (8004b48 <prvResetNextTaskUnblockTime+0x2c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a03      	ldr	r2, [pc, #12]	@ (8004b4c <prvResetNextTaskUnblockTime+0x30>)
 8004b3e:	6013      	str	r3, [r2, #0]
}
 8004b40:	bf00      	nop
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr
 8004b48:	20000210 	.word	0x20000210
 8004b4c:	20000278 	.word	0x20000278

08004b50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004b56:	4b0b      	ldr	r3, [pc, #44]	@ (8004b84 <xTaskGetSchedulerState+0x34>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d102      	bne.n	8004b64 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	607b      	str	r3, [r7, #4]
 8004b62:	e008      	b.n	8004b76 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b64:	4b08      	ldr	r3, [pc, #32]	@ (8004b88 <xTaskGetSchedulerState+0x38>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d102      	bne.n	8004b72 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	607b      	str	r3, [r7, #4]
 8004b70:	e001      	b.n	8004b76 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004b72:	2300      	movs	r3, #0
 8004b74:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004b76:	687b      	ldr	r3, [r7, #4]
    }
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000264 	.word	0x20000264
 8004b88:	20000280 	.word	0x20000280

08004b8c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d079      	beq.n	8004c96 <xTaskPriorityInherit+0x10a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca0 <xTaskPriorityInherit+0x114>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d269      	bcs.n	8004c84 <xTaskPriorityInherit+0xf8>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	db06      	blt.n	8004bc6 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bb8:	4b39      	ldr	r3, [pc, #228]	@ (8004ca0 <xTaskPriorityInherit+0x114>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbe:	f1c3 0205 	rsb	r2, r3, #5
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	6959      	ldr	r1, [r3, #20]
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4a33      	ldr	r2, [pc, #204]	@ (8004ca4 <xTaskPriorityInherit+0x118>)
 8004bd8:	4413      	add	r3, r2
 8004bda:	4299      	cmp	r1, r3
 8004bdc:	d14a      	bne.n	8004c74 <xTaskPriorityInherit+0xe8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	3304      	adds	r3, #4
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fd37 	bl	8005656 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004be8:	4b2d      	ldr	r3, [pc, #180]	@ (8004ca0 <xTaskPriorityInherit+0x114>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8004ca8 <xTaskPriorityInherit+0x11c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d903      	bls.n	8004c06 <xTaskPriorityInherit+0x7a>
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c02:	4a29      	ldr	r2, [pc, #164]	@ (8004ca8 <xTaskPriorityInherit+0x11c>)
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c0a:	4926      	ldr	r1, [pc, #152]	@ (8004ca4 <xTaskPriorityInherit+0x118>)
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	3304      	adds	r3, #4
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	609a      	str	r2, [r3, #8]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	60da      	str	r2, [r3, #12]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	3204      	adds	r2, #4
 8004c32:	605a      	str	r2, [r3, #4]
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1d1a      	adds	r2, r3, #4
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	609a      	str	r2, [r3, #8]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c40:	4613      	mov	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4a16      	ldr	r2, [pc, #88]	@ (8004ca4 <xTaskPriorityInherit+0x118>)
 8004c4a:	441a      	add	r2, r3
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	615a      	str	r2, [r3, #20]
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c54:	4913      	ldr	r1, [pc, #76]	@ (8004ca4 <xTaskPriorityInherit+0x118>)
 8004c56:	4613      	mov	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	1c59      	adds	r1, r3, #1
 8004c64:	480f      	ldr	r0, [pc, #60]	@ (8004ca4 <xTaskPriorityInherit+0x118>)
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4403      	add	r3, r0
 8004c70:	6019      	str	r1, [r3, #0]
 8004c72:	e004      	b.n	8004c7e <xTaskPriorityInherit+0xf2>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c74:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca0 <xTaskPriorityInherit+0x114>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	e008      	b.n	8004c96 <xTaskPriorityInherit+0x10a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c88:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <xTaskPriorityInherit+0x114>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d201      	bcs.n	8004c96 <xTaskPriorityInherit+0x10a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004c92:	2301      	movs	r3, #1
 8004c94:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004c96:	697b      	ldr	r3, [r7, #20]
    }
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20000180 	.word	0x20000180
 8004ca4:	20000184 	.word	0x20000184
 8004ca8:	20000260 	.word	0x20000260

08004cac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 8081 	beq.w	8004dc6 <xTaskPriorityDisinherit+0x11a>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004cc4:	4b42      	ldr	r3, [pc, #264]	@ (8004dd0 <xTaskPriorityDisinherit+0x124>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d00b      	beq.n	8004ce6 <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	613b      	str	r3, [r7, #16]
    }
 8004ce0:	bf00      	nop
 8004ce2:	bf00      	nop
 8004ce4:	e7fd      	b.n	8004ce2 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10b      	bne.n	8004d06 <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	60fb      	str	r3, [r7, #12]
    }
 8004d00:	bf00      	nop
 8004d02:	bf00      	nop
 8004d04:	e7fd      	b.n	8004d02 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0a:	1e5a      	subs	r2, r3, #1
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d054      	beq.n	8004dc6 <xTaskPriorityDisinherit+0x11a>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d150      	bne.n	8004dc6 <xTaskPriorityDisinherit+0x11a>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	3304      	adds	r3, #4
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fc94 	bl	8005656 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3a:	f1c3 0205 	rsb	r2, r3, #5
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d46:	4b23      	ldr	r3, [pc, #140]	@ (8004dd4 <xTaskPriorityDisinherit+0x128>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d903      	bls.n	8004d56 <xTaskPriorityDisinherit+0xaa>
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d52:	4a20      	ldr	r2, [pc, #128]	@ (8004dd4 <xTaskPriorityDisinherit+0x128>)
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d5a:	491f      	ldr	r1, [pc, #124]	@ (8004dd8 <xTaskPriorityDisinherit+0x12c>)
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	3304      	adds	r3, #4
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	609a      	str	r2, [r3, #8]
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	60da      	str	r2, [r3, #12]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	3204      	adds	r2, #4
 8004d82:	605a      	str	r2, [r3, #4]
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	1d1a      	adds	r2, r3, #4
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	609a      	str	r2, [r3, #8]
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4a0f      	ldr	r2, [pc, #60]	@ (8004dd8 <xTaskPriorityDisinherit+0x12c>)
 8004d9a:	441a      	add	r2, r3
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	615a      	str	r2, [r3, #20]
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da4:	490c      	ldr	r1, [pc, #48]	@ (8004dd8 <xTaskPriorityDisinherit+0x12c>)
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	1c59      	adds	r1, r3, #1
 8004db4:	4808      	ldr	r0, [pc, #32]	@ (8004dd8 <xTaskPriorityDisinherit+0x12c>)
 8004db6:	4613      	mov	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4403      	add	r3, r0
 8004dc0:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004dc6:	69fb      	ldr	r3, [r7, #28]
    }
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3720      	adds	r7, #32
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20000180 	.word	0x20000180
 8004dd4:	20000260 	.word	0x20000260
 8004dd8:	20000184 	.word	0x20000184

08004ddc <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08a      	sub	sp, #40	@ 0x28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004dea:	2301      	movs	r3, #1
 8004dec:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 8095 	beq.w	8004f20 <vTaskPriorityDisinheritAfterTimeout+0x144>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10b      	bne.n	8004e16 <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	613b      	str	r3, [r7, #16]
    }
 8004e10:	bf00      	nop
 8004e12:	bf00      	nop
 8004e14:	e7fd      	b.n	8004e12 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d902      	bls.n	8004e26 <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e24:	e002      	b.n	8004e2c <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e2a:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d074      	beq.n	8004f20 <vTaskPriorityDisinheritAfterTimeout+0x144>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e3a:	69fa      	ldr	r2, [r7, #28]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d16f      	bne.n	8004f20 <vTaskPriorityDisinheritAfterTimeout+0x144>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004e40:	4b39      	ldr	r3, [pc, #228]	@ (8004f28 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6a3a      	ldr	r2, [r7, #32]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d10b      	bne.n	8004e62 <vTaskPriorityDisinheritAfterTimeout+0x86>
        __asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	60fb      	str	r3, [r7, #12]
    }
 8004e5c:	bf00      	nop
 8004e5e:	bf00      	nop
 8004e60:	e7fd      	b.n	8004e5e <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e66:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e6c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	db04      	blt.n	8004e80 <vTaskPriorityDisinheritAfterTimeout+0xa4>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	f1c3 0205 	rsb	r2, r3, #5
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	6959      	ldr	r1, [r3, #20]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	4613      	mov	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4a27      	ldr	r2, [pc, #156]	@ (8004f2c <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004e90:	4413      	add	r3, r2
 8004e92:	4299      	cmp	r1, r3
 8004e94:	d144      	bne.n	8004f20 <vTaskPriorityDisinheritAfterTimeout+0x144>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fbdb 	bl	8005656 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ea4:	4b22      	ldr	r3, [pc, #136]	@ (8004f30 <vTaskPriorityDisinheritAfterTimeout+0x154>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d903      	bls.n	8004eb4 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb0:	4a1f      	ldr	r2, [pc, #124]	@ (8004f30 <vTaskPriorityDisinheritAfterTimeout+0x154>)
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb8:	491c      	ldr	r1, [pc, #112]	@ (8004f2c <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004eba:	4613      	mov	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	440b      	add	r3, r1
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	609a      	str	r2, [r3, #8]
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	60da      	str	r2, [r3, #12]
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	6a3a      	ldr	r2, [r7, #32]
 8004ede:	3204      	adds	r2, #4
 8004ee0:	605a      	str	r2, [r3, #4]
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	1d1a      	adds	r2, r3, #4
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	609a      	str	r2, [r3, #8]
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4a0d      	ldr	r2, [pc, #52]	@ (8004f2c <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004ef8:	441a      	add	r2, r3
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	615a      	str	r2, [r3, #20]
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f02:	490a      	ldr	r1, [pc, #40]	@ (8004f2c <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	1c59      	adds	r1, r3, #1
 8004f12:	4806      	ldr	r0, [pc, #24]	@ (8004f2c <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4403      	add	r3, r0
 8004f1e:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004f20:	bf00      	nop
 8004f22:	3728      	adds	r7, #40	@ 0x28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	20000180 	.word	0x20000180
 8004f2c:	20000184 	.word	0x20000184
 8004f30:	20000260 	.word	0x20000260

08004f34 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004f38:	4b07      	ldr	r3, [pc, #28]	@ (8004f58 <pvTaskIncrementMutexHeldCount+0x24>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d004      	beq.n	8004f4a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004f40:	4b05      	ldr	r3, [pc, #20]	@ (8004f58 <pvTaskIncrementMutexHeldCount+0x24>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f46:	3201      	adds	r2, #1
 8004f48:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        return pxCurrentTCB;
 8004f4a:	4b03      	ldr	r3, [pc, #12]	@ (8004f58 <pvTaskIncrementMutexHeldCount+0x24>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
    }
 8004f4e:	4618      	mov	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bc80      	pop	{r7}
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	20000180 	.word	0x20000180

08004f5c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004f66:	4b2e      	ldr	r3, [pc, #184]	@ (8005020 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8005024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3304      	adds	r3, #4
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 fb6f 	bl	8005656 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7e:	d124      	bne.n	8004fca <prvAddCurrentTaskToDelayedList+0x6e>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d021      	beq.n	8004fca <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f86:	4b28      	ldr	r3, [pc, #160]	@ (8005028 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	613b      	str	r3, [r7, #16]
 8004f8c:	4b25      	ldr	r3, [pc, #148]	@ (8005024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	609a      	str	r2, [r3, #8]
 8004f94:	4b23      	ldr	r3, [pc, #140]	@ (8005024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	6892      	ldr	r2, [r2, #8]
 8004f9c:	60da      	str	r2, [r3, #12]
 8004f9e:	4b21      	ldr	r3, [pc, #132]	@ (8005024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	3204      	adds	r2, #4
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	4b1e      	ldr	r3, [pc, #120]	@ (8005024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	1d1a      	adds	r2, r3, #4
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	609a      	str	r2, [r3, #8]
 8004fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8005024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8005028 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004fba:	615a      	str	r2, [r3, #20]
 8004fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8005028 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	4a19      	ldr	r2, [pc, #100]	@ (8005028 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004fc8:	e026      	b.n	8005018 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4413      	add	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fd2:	4b14      	ldr	r3, [pc, #80]	@ (8005024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d209      	bcs.n	8004ff6 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fe2:	4b12      	ldr	r3, [pc, #72]	@ (800502c <prvAddCurrentTaskToDelayedList+0xd0>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8005024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	3304      	adds	r3, #4
 8004fec:	4619      	mov	r1, r3
 8004fee:	4610      	mov	r0, r2
 8004ff0:	f000 faf9 	bl	80055e6 <vListInsert>
}
 8004ff4:	e010      	b.n	8005018 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8005030 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8005024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3304      	adds	r3, #4
 8005000:	4619      	mov	r1, r3
 8005002:	4610      	mov	r0, r2
 8005004:	f000 faef 	bl	80055e6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8005008:	4b0a      	ldr	r3, [pc, #40]	@ (8005034 <prvAddCurrentTaskToDelayedList+0xd8>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	429a      	cmp	r2, r3
 8005010:	d202      	bcs.n	8005018 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8005012:	4a08      	ldr	r2, [pc, #32]	@ (8005034 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6013      	str	r3, [r2, #0]
}
 8005018:	bf00      	nop
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	2000025c 	.word	0x2000025c
 8005024:	20000180 	.word	0x20000180
 8005028:	20000244 	.word	0x20000244
 800502c:	20000214 	.word	0x20000214
 8005030:	20000210 	.word	0x20000210
 8005034:	20000278 	.word	0x20000278

08005038 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800503e:	2300      	movs	r3, #0
 8005040:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005042:	f000 fa4b 	bl	80054dc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005046:	4b11      	ldr	r3, [pc, #68]	@ (800508c <xTimerCreateTimerTask+0x54>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800504e:	4b10      	ldr	r3, [pc, #64]	@ (8005090 <xTimerCreateTimerTask+0x58>)
 8005050:	9301      	str	r3, [sp, #4]
 8005052:	2303      	movs	r3, #3
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	2300      	movs	r3, #0
 8005058:	2280      	movs	r2, #128	@ 0x80
 800505a:	490e      	ldr	r1, [pc, #56]	@ (8005094 <xTimerCreateTimerTask+0x5c>)
 800505c:	480e      	ldr	r0, [pc, #56]	@ (8005098 <xTimerCreateTimerTask+0x60>)
 800505e:	f7fe fd81 	bl	8003b64 <xTaskCreate>
 8005062:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10b      	bne.n	8005082 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800506a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	603b      	str	r3, [r7, #0]
    }
 800507c:	bf00      	nop
 800507e:	bf00      	nop
 8005080:	e7fd      	b.n	800507e <xTimerCreateTimerTask+0x46>
        return xReturn;
 8005082:	687b      	ldr	r3, [r7, #4]
    }
 8005084:	4618      	mov	r0, r3
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	200002b4 	.word	0x200002b4
 8005090:	200002b8 	.word	0x200002b8
 8005094:	080065ec 	.word	0x080065ec
 8005098:	08005141 	.word	0x08005141

0800509c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80050a8:	e008      	b.n	80050bc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	4413      	add	r3, r2
 80050b2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	699a      	ldr	r2, [r3, #24]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	18d1      	adds	r1, r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 f8dd 	bl	8005288 <prvInsertTimerInActiveList>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1ea      	bne.n	80050aa <prvReloadTimer+0xe>
        }
    }
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ea:	4b14      	ldr	r3, [pc, #80]	@ (800513c <prvProcessExpiredTimer+0x5c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	3304      	adds	r3, #4
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 faac 	bl	8005656 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	6879      	ldr	r1, [r7, #4]
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f7ff ffc3 	bl	800509c <prvReloadTimer>
 8005116:	e008      	b.n	800512a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800511e:	f023 0301 	bic.w	r3, r3, #1
 8005122:	b2da      	uxtb	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	4798      	blx	r3
    }
 8005132:	bf00      	nop
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	200002ac 	.word	0x200002ac

08005140 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005148:	f107 0308 	add.w	r3, r7, #8
 800514c:	4618      	mov	r0, r3
 800514e:	f000 f859 	bl	8005204 <prvGetNextExpireTime>
 8005152:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4619      	mov	r1, r3
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 f805 	bl	8005168 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800515e:	f000 f8d5 	bl	800530c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005162:	bf00      	nop
 8005164:	e7f0      	b.n	8005148 <prvTimerTask+0x8>
	...

08005168 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005172:	f7fe feed 	bl	8003f50 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005176:	f107 0308 	add.w	r3, r7, #8
 800517a:	4618      	mov	r0, r3
 800517c:	f000 f864 	bl	8005248 <prvSampleTimeNow>
 8005180:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d130      	bne.n	80051ea <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10a      	bne.n	80051a4 <prvProcessTimerOrBlockTask+0x3c>
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	429a      	cmp	r2, r3
 8005194:	d806      	bhi.n	80051a4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005196:	f7fe ff1f 	bl	8003fd8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800519a:	68f9      	ldr	r1, [r7, #12]
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7ff ff9f 	bl	80050e0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80051a2:	e024      	b.n	80051ee <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d008      	beq.n	80051bc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80051aa:	4b13      	ldr	r3, [pc, #76]	@ (80051f8 <prvProcessTimerOrBlockTask+0x90>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <prvProcessTimerOrBlockTask+0x50>
 80051b4:	2301      	movs	r3, #1
 80051b6:	e000      	b.n	80051ba <prvProcessTimerOrBlockTask+0x52>
 80051b8:	2300      	movs	r3, #0
 80051ba:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80051bc:	4b0f      	ldr	r3, [pc, #60]	@ (80051fc <prvProcessTimerOrBlockTask+0x94>)
 80051be:	6818      	ldr	r0, [r3, #0]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	4619      	mov	r1, r3
 80051ca:	f7fe fc97 	bl	8003afc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80051ce:	f7fe ff03 	bl	8003fd8 <xTaskResumeAll>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80051d8:	4b09      	ldr	r3, [pc, #36]	@ (8005200 <prvProcessTimerOrBlockTask+0x98>)
 80051da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	f3bf 8f6f 	isb	sy
    }
 80051e8:	e001      	b.n	80051ee <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80051ea:	f7fe fef5 	bl	8003fd8 <xTaskResumeAll>
    }
 80051ee:	bf00      	nop
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	200002b0 	.word	0x200002b0
 80051fc:	200002b4 	.word	0x200002b4
 8005200:	e000ed04 	.word	0xe000ed04

08005204 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800520c:	4b0d      	ldr	r3, [pc, #52]	@ (8005244 <prvGetNextExpireTime+0x40>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <prvGetNextExpireTime+0x16>
 8005216:	2201      	movs	r2, #1
 8005218:	e000      	b.n	800521c <prvGetNextExpireTime+0x18>
 800521a:	2200      	movs	r2, #0
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d105      	bne.n	8005234 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005228:	4b06      	ldr	r3, [pc, #24]	@ (8005244 <prvGetNextExpireTime+0x40>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	e001      	b.n	8005238 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005238:	68fb      	ldr	r3, [r7, #12]
    }
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	bc80      	pop	{r7}
 8005242:	4770      	bx	lr
 8005244:	200002ac 	.word	0x200002ac

08005248 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005250:	f7fe ffc0 	bl	80041d4 <xTaskGetTickCount>
 8005254:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005256:	4b0b      	ldr	r3, [pc, #44]	@ (8005284 <prvSampleTimeNow+0x3c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	429a      	cmp	r2, r3
 800525e:	d205      	bcs.n	800526c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005260:	f000 f916 	bl	8005490 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	e002      	b.n	8005272 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005272:	4a04      	ldr	r2, [pc, #16]	@ (8005284 <prvSampleTimeNow+0x3c>)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005278:	68fb      	ldr	r3, [r7, #12]
    }
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	200002bc 	.word	0x200002bc

08005288 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005296:	2300      	movs	r3, #0
 8005298:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d812      	bhi.n	80052d4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	1ad2      	subs	r2, r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d302      	bcc.n	80052c2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80052bc:	2301      	movs	r3, #1
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	e01b      	b.n	80052fa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80052c2:	4b10      	ldr	r3, [pc, #64]	@ (8005304 <prvInsertTimerInActiveList+0x7c>)
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	3304      	adds	r3, #4
 80052ca:	4619      	mov	r1, r3
 80052cc:	4610      	mov	r0, r2
 80052ce:	f000 f98a 	bl	80055e6 <vListInsert>
 80052d2:	e012      	b.n	80052fa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d206      	bcs.n	80052ea <prvInsertTimerInActiveList+0x62>
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d302      	bcc.n	80052ea <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80052e4:	2301      	movs	r3, #1
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	e007      	b.n	80052fa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052ea:	4b07      	ldr	r3, [pc, #28]	@ (8005308 <prvInsertTimerInActiveList+0x80>)
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3304      	adds	r3, #4
 80052f2:	4619      	mov	r1, r3
 80052f4:	4610      	mov	r0, r2
 80052f6:	f000 f976 	bl	80055e6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80052fa:	697b      	ldr	r3, [r7, #20]
    }
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	200002b0 	.word	0x200002b0
 8005308:	200002ac 	.word	0x200002ac

0800530c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005312:	e0a9      	b.n	8005468 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	f2c0 80a6 	blt.w	8005468 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d004      	beq.n	8005332 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	3304      	adds	r3, #4
 800532c:	4618      	mov	r0, r3
 800532e:	f000 f992 	bl	8005656 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005332:	1d3b      	adds	r3, r7, #4
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff ff87 	bl	8005248 <prvSampleTimeNow>
 800533a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	3b01      	subs	r3, #1
 8005340:	2b08      	cmp	r3, #8
 8005342:	f200 808e 	bhi.w	8005462 <prvProcessReceivedCommands+0x156>
 8005346:	a201      	add	r2, pc, #4	@ (adr r2, 800534c <prvProcessReceivedCommands+0x40>)
 8005348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534c:	08005371 	.word	0x08005371
 8005350:	08005371 	.word	0x08005371
 8005354:	080053d9 	.word	0x080053d9
 8005358:	080053ed 	.word	0x080053ed
 800535c:	08005439 	.word	0x08005439
 8005360:	08005371 	.word	0x08005371
 8005364:	08005371 	.word	0x08005371
 8005368:	080053d9 	.word	0x080053d9
 800536c:	080053ed 	.word	0x080053ed
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005376:	f043 0301 	orr.w	r3, r3, #1
 800537a:	b2da      	uxtb	r2, r3
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	18d1      	adds	r1, r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	69f8      	ldr	r0, [r7, #28]
 8005390:	f7ff ff7a 	bl	8005288 <prvInsertTimerInActiveList>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d065      	beq.n	8005466 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d009      	beq.n	80053bc <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	4413      	add	r3, r2
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	4619      	mov	r1, r3
 80053b4:	69f8      	ldr	r0, [r7, #28]
 80053b6:	f7ff fe71 	bl	800509c <prvReloadTimer>
 80053ba:	e008      	b.n	80053ce <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053c2:	f023 0301 	bic.w	r3, r3, #1
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	69f8      	ldr	r0, [r7, #28]
 80053d4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80053d6:	e046      	b.n	8005466 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053de:	f023 0301 	bic.w	r3, r3, #1
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80053ea:	e03d      	b.n	8005468 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053f2:	f043 0301 	orr.w	r3, r3, #1
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10b      	bne.n	8005424 <prvProcessReceivedCommands+0x118>
        __asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	617b      	str	r3, [r7, #20]
    }
 800541e:	bf00      	nop
 8005420:	bf00      	nop
 8005422:	e7fd      	b.n	8005420 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	699a      	ldr	r2, [r3, #24]
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	18d1      	adds	r1, r2, r3
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	69f8      	ldr	r0, [r7, #28]
 8005432:	f7ff ff29 	bl	8005288 <prvInsertTimerInActiveList>
                        break;
 8005436:	e017      	b.n	8005468 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d103      	bne.n	800544e <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8005446:	69f8      	ldr	r0, [r7, #28]
 8005448:	f000 f890 	bl	800556c <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800544c:	e00c      	b.n	8005468 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005454:	f023 0301 	bic.w	r3, r3, #1
 8005458:	b2da      	uxtb	r2, r3
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8005460:	e002      	b.n	8005468 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005462:	bf00      	nop
 8005464:	e000      	b.n	8005468 <prvProcessReceivedCommands+0x15c>
                        break;
 8005466:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005468:	4b08      	ldr	r3, [pc, #32]	@ (800548c <prvProcessReceivedCommands+0x180>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f107 0108 	add.w	r1, r7, #8
 8005470:	2200      	movs	r2, #0
 8005472:	4618      	mov	r0, r3
 8005474:	f7fd ffea 	bl	800344c <xQueueReceive>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	f47f af4a 	bne.w	8005314 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8005480:	bf00      	nop
 8005482:	bf00      	nop
 8005484:	3720      	adds	r7, #32
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	200002b4 	.word	0x200002b4

08005490 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005496:	e009      	b.n	80054ac <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005498:	4b0e      	ldr	r3, [pc, #56]	@ (80054d4 <prvSwitchTimerLists+0x44>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80054a2:	f04f 31ff 	mov.w	r1, #4294967295
 80054a6:	6838      	ldr	r0, [r7, #0]
 80054a8:	f7ff fe1a 	bl	80050e0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054ac:	4b09      	ldr	r3, [pc, #36]	@ (80054d4 <prvSwitchTimerLists+0x44>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f0      	bne.n	8005498 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80054b6:	4b07      	ldr	r3, [pc, #28]	@ (80054d4 <prvSwitchTimerLists+0x44>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80054bc:	4b06      	ldr	r3, [pc, #24]	@ (80054d8 <prvSwitchTimerLists+0x48>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a04      	ldr	r2, [pc, #16]	@ (80054d4 <prvSwitchTimerLists+0x44>)
 80054c2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80054c4:	4a04      	ldr	r2, [pc, #16]	@ (80054d8 <prvSwitchTimerLists+0x48>)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6013      	str	r3, [r2, #0]
    }
 80054ca:	bf00      	nop
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	200002ac 	.word	0x200002ac
 80054d8:	200002b0 	.word	0x200002b0

080054dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80054e0:	f000 f9d6 	bl	8005890 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80054e4:	4b12      	ldr	r3, [pc, #72]	@ (8005530 <prvCheckForValidListAndQueue+0x54>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d11d      	bne.n	8005528 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80054ec:	4811      	ldr	r0, [pc, #68]	@ (8005534 <prvCheckForValidListAndQueue+0x58>)
 80054ee:	f000 f84f 	bl	8005590 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80054f2:	4811      	ldr	r0, [pc, #68]	@ (8005538 <prvCheckForValidListAndQueue+0x5c>)
 80054f4:	f000 f84c 	bl	8005590 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80054f8:	4b10      	ldr	r3, [pc, #64]	@ (800553c <prvCheckForValidListAndQueue+0x60>)
 80054fa:	4a0e      	ldr	r2, [pc, #56]	@ (8005534 <prvCheckForValidListAndQueue+0x58>)
 80054fc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80054fe:	4b10      	ldr	r3, [pc, #64]	@ (8005540 <prvCheckForValidListAndQueue+0x64>)
 8005500:	4a0d      	ldr	r2, [pc, #52]	@ (8005538 <prvCheckForValidListAndQueue+0x5c>)
 8005502:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005504:	2200      	movs	r2, #0
 8005506:	210c      	movs	r1, #12
 8005508:	200a      	movs	r0, #10
 800550a:	f7fd fdf9 	bl	8003100 <xQueueGenericCreate>
 800550e:	4603      	mov	r3, r0
 8005510:	4a07      	ldr	r2, [pc, #28]	@ (8005530 <prvCheckForValidListAndQueue+0x54>)
 8005512:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8005514:	4b06      	ldr	r3, [pc, #24]	@ (8005530 <prvCheckForValidListAndQueue+0x54>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800551c:	4b04      	ldr	r3, [pc, #16]	@ (8005530 <prvCheckForValidListAndQueue+0x54>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4908      	ldr	r1, [pc, #32]	@ (8005544 <prvCheckForValidListAndQueue+0x68>)
 8005522:	4618      	mov	r0, r3
 8005524:	f7fe fa9c 	bl	8003a60 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005528:	f000 f9e2 	bl	80058f0 <vPortExitCritical>
    }
 800552c:	bf00      	nop
 800552e:	bd80      	pop	{r7, pc}
 8005530:	200002b4 	.word	0x200002b4
 8005534:	20000284 	.word	0x20000284
 8005538:	20000298 	.word	0x20000298
 800553c:	200002ac 	.word	0x200002ac
 8005540:	200002b0 	.word	0x200002b0
 8005544:	080065f4 	.word	0x080065f4

08005548 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 8005550:	f7fe fcfe 	bl	8003f50 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fb47 	bl	8005be8 <malloc>
 800555a:	4603      	mov	r3, r0
 800555c:	60fb      	str	r3, [r7, #12]
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800555e:	f7fe fd3b 	bl	8003fd8 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8005562:	68fb      	ldr	r3, [r7, #12]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
    if( pv != NULL )
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d006      	beq.n	8005588 <vPortFree+0x1c>
    {
        vTaskSuspendAll();
 800557a:	f7fe fce9 	bl	8003f50 <vTaskSuspendAll>
        {
            free( pv );
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fb3a 	bl	8005bf8 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
 8005584:	f7fe fd28 	bl	8003fd8 <xTaskResumeAll>
    }
}
 8005588:	bf00      	nop
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f103 0208 	add.w	r2, r3, #8
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f04f 32ff 	mov.w	r2, #4294967295
 80055a8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f103 0208 	add.w	r2, r3, #8
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f103 0208 	add.w	r2, r3, #8
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr

080055ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr

080055e6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80055e6:	b480      	push	{r7}
 80055e8:	b085      	sub	sp, #20
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fc:	d103      	bne.n	8005606 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	e00c      	b.n	8005620 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3308      	adds	r3, #8
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	e002      	b.n	8005614 <vListInsert+0x2e>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	429a      	cmp	r2, r3
 800561e:	d2f6      	bcs.n	800560e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	601a      	str	r2, [r3, #0]
}
 800564c:	bf00      	nop
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	bc80      	pop	{r7}
 8005654:	4770      	bx	lr

08005656 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005656:	b480      	push	{r7}
 8005658:	b085      	sub	sp, #20
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6892      	ldr	r2, [r2, #8]
 800566c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6852      	ldr	r2, [r2, #4]
 8005676:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	429a      	cmp	r2, r3
 8005680:	d103      	bne.n	800568a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	1e5a      	subs	r2, r3, #1
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr

080056a8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	3b04      	subs	r3, #4
 80056b8:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80056c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3b04      	subs	r3, #4
 80056c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f023 0201 	bic.w	r2, r3, #1
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	3b04      	subs	r3, #4
 80056d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80056d8:	4a08      	ldr	r2, [pc, #32]	@ (80056fc <pxPortInitialiseStack+0x54>)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	3b14      	subs	r3, #20
 80056e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3b20      	subs	r3, #32
 80056ee:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80056f0:	68fb      	ldr	r3, [r7, #12]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bc80      	pop	{r7}
 80056fa:	4770      	bx	lr
 80056fc:	08005701 	.word	0x08005701

08005700 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8005706:	2300      	movs	r3, #0
 8005708:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800570a:	4b12      	ldr	r3, [pc, #72]	@ (8005754 <prvTaskExitError+0x54>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005712:	d00b      	beq.n	800572c <prvTaskExitError+0x2c>
        __asm volatile
 8005714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	60fb      	str	r3, [r7, #12]
    }
 8005726:	bf00      	nop
 8005728:	bf00      	nop
 800572a:	e7fd      	b.n	8005728 <prvTaskExitError+0x28>
        __asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	60bb      	str	r3, [r7, #8]
    }
 800573e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005740:	bf00      	nop
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0fc      	beq.n	8005742 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005748:	bf00      	nop
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr
 8005754:	20000020 	.word	0x20000020
	...

08005760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005760:	4b07      	ldr	r3, [pc, #28]	@ (8005780 <pxCurrentTCBConst2>)
 8005762:	6819      	ldr	r1, [r3, #0]
 8005764:	6808      	ldr	r0, [r1, #0]
 8005766:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800576a:	f380 8809 	msr	PSP, r0
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f04f 0000 	mov.w	r0, #0
 8005776:	f380 8811 	msr	BASEPRI, r0
 800577a:	f04e 0e0d 	orr.w	lr, lr, #13
 800577e:	4770      	bx	lr

08005780 <pxCurrentTCBConst2>:
 8005780:	20000180 	.word	0x20000180
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005784:	bf00      	nop
 8005786:	bf00      	nop

08005788 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8005788:	4806      	ldr	r0, [pc, #24]	@ (80057a4 <prvPortStartFirstTask+0x1c>)
 800578a:	6800      	ldr	r0, [r0, #0]
 800578c:	6800      	ldr	r0, [r0, #0]
 800578e:	f380 8808 	msr	MSP, r0
 8005792:	b662      	cpsie	i
 8005794:	b661      	cpsie	f
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	df00      	svc	0
 80057a0:	bf00      	nop
 80057a2:	0000      	.short	0x0000
 80057a4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop

080057ac <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057b2:	4b32      	ldr	r3, [pc, #200]	@ (800587c <xPortStartScheduler+0xd0>)
 80057b4:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	22ff      	movs	r2, #255	@ 0xff
 80057c2:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057cc:	78fb      	ldrb	r3, [r7, #3]
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005880 <xPortStartScheduler+0xd4>)
 80057d8:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057da:	4b2a      	ldr	r3, [pc, #168]	@ (8005884 <xPortStartScheduler+0xd8>)
 80057dc:	2207      	movs	r2, #7
 80057de:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057e0:	e009      	b.n	80057f6 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 80057e2:	4b28      	ldr	r3, [pc, #160]	@ (8005884 <xPortStartScheduler+0xd8>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	4a26      	ldr	r2, [pc, #152]	@ (8005884 <xPortStartScheduler+0xd8>)
 80057ea:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057f6:	78fb      	ldrb	r3, [r7, #3]
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057fe:	2b80      	cmp	r3, #128	@ 0x80
 8005800:	d0ef      	beq.n	80057e2 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005802:	4b20      	ldr	r3, [pc, #128]	@ (8005884 <xPortStartScheduler+0xd8>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f1c3 0307 	rsb	r3, r3, #7
 800580a:	2b04      	cmp	r3, #4
 800580c:	d00b      	beq.n	8005826 <xPortStartScheduler+0x7a>
        __asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	60bb      	str	r3, [r7, #8]
    }
 8005820:	bf00      	nop
 8005822:	bf00      	nop
 8005824:	e7fd      	b.n	8005822 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005826:	4b17      	ldr	r3, [pc, #92]	@ (8005884 <xPortStartScheduler+0xd8>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	021b      	lsls	r3, r3, #8
 800582c:	4a15      	ldr	r2, [pc, #84]	@ (8005884 <xPortStartScheduler+0xd8>)
 800582e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005830:	4b14      	ldr	r3, [pc, #80]	@ (8005884 <xPortStartScheduler+0xd8>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005838:	4a12      	ldr	r2, [pc, #72]	@ (8005884 <xPortStartScheduler+0xd8>)
 800583a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	b2da      	uxtb	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005844:	4b10      	ldr	r3, [pc, #64]	@ (8005888 <xPortStartScheduler+0xdc>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a0f      	ldr	r2, [pc, #60]	@ (8005888 <xPortStartScheduler+0xdc>)
 800584a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800584e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005850:	4b0d      	ldr	r3, [pc, #52]	@ (8005888 <xPortStartScheduler+0xdc>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a0c      	ldr	r2, [pc, #48]	@ (8005888 <xPortStartScheduler+0xdc>)
 8005856:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800585a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800585c:	f000 f988 	bl	8005b70 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005860:	4b0a      	ldr	r3, [pc, #40]	@ (800588c <xPortStartScheduler+0xe0>)
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005866:	f7ff ff8f 	bl	8005788 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800586a:	f7fe fe37 	bl	80044dc <vTaskSwitchContext>
    prvTaskExitError();
 800586e:	f7ff ff47 	bl	8005700 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	e000e400 	.word	0xe000e400
 8005880:	200002cc 	.word	0x200002cc
 8005884:	200002d0 	.word	0x200002d0
 8005888:	e000ed20 	.word	0xe000ed20
 800588c:	20000020 	.word	0x20000020

08005890 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
        __asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	607b      	str	r3, [r7, #4]
    }
 80058a8:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80058aa:	4b0f      	ldr	r3, [pc, #60]	@ (80058e8 <vPortEnterCritical+0x58>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3301      	adds	r3, #1
 80058b0:	4a0d      	ldr	r2, [pc, #52]	@ (80058e8 <vPortEnterCritical+0x58>)
 80058b2:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80058b4:	4b0c      	ldr	r3, [pc, #48]	@ (80058e8 <vPortEnterCritical+0x58>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d110      	bne.n	80058de <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058bc:	4b0b      	ldr	r3, [pc, #44]	@ (80058ec <vPortEnterCritical+0x5c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00b      	beq.n	80058de <vPortEnterCritical+0x4e>
        __asm volatile
 80058c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	603b      	str	r3, [r7, #0]
    }
 80058d8:	bf00      	nop
 80058da:	bf00      	nop
 80058dc:	e7fd      	b.n	80058da <vPortEnterCritical+0x4a>
    }
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bc80      	pop	{r7}
 80058e6:	4770      	bx	lr
 80058e8:	20000020 	.word	0x20000020
 80058ec:	e000ed04 	.word	0xe000ed04

080058f0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80058f6:	4b12      	ldr	r3, [pc, #72]	@ (8005940 <vPortExitCritical+0x50>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10b      	bne.n	8005916 <vPortExitCritical+0x26>
        __asm volatile
 80058fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	607b      	str	r3, [r7, #4]
    }
 8005910:	bf00      	nop
 8005912:	bf00      	nop
 8005914:	e7fd      	b.n	8005912 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005916:	4b0a      	ldr	r3, [pc, #40]	@ (8005940 <vPortExitCritical+0x50>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3b01      	subs	r3, #1
 800591c:	4a08      	ldr	r2, [pc, #32]	@ (8005940 <vPortExitCritical+0x50>)
 800591e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005920:	4b07      	ldr	r3, [pc, #28]	@ (8005940 <vPortExitCritical+0x50>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d105      	bne.n	8005934 <vPortExitCritical+0x44>
 8005928:	2300      	movs	r3, #0
 800592a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005932:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	bc80      	pop	{r7}
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	20000020 	.word	0x20000020
	...

08005950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005950:	f3ef 8009 	mrs	r0, PSP
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	4b0d      	ldr	r3, [pc, #52]	@ (8005990 <pxCurrentTCBConst>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005960:	6010      	str	r0, [r2, #0]
 8005962:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005966:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800596a:	f380 8811 	msr	BASEPRI, r0
 800596e:	f7fe fdb5 	bl	80044dc <vTaskSwitchContext>
 8005972:	f04f 0000 	mov.w	r0, #0
 8005976:	f380 8811 	msr	BASEPRI, r0
 800597a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800597e:	6819      	ldr	r1, [r3, #0]
 8005980:	6808      	ldr	r0, [r1, #0]
 8005982:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005986:	f380 8809 	msr	PSP, r0
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	4770      	bx	lr

08005990 <pxCurrentTCBConst>:
 8005990:	20000180 	.word	0x20000180
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005994:	bf00      	nop
 8005996:	bf00      	nop

08005998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
        __asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	607b      	str	r3, [r7, #4]
    }
 80059b0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80059b2:	f7fe fc7b 	bl	80042ac <xTaskIncrementTick>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059bc:	4b06      	ldr	r3, [pc, #24]	@ (80059d8 <SysTick_Handler+0x40>)
 80059be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	2300      	movs	r3, #0
 80059c6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	f383 8811 	msr	BASEPRI, r3
    }
 80059ce:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80059d0:	bf00      	nop
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	e000ed04 	.word	0xe000ed04

080059dc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE == 1 )

    __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
    {
 80059dc:	b580      	push	{r7, lr}
 80059de:	b088      	sub	sp, #32
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
        uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickDecrementsLeft;
        TickType_t xModifiableIdleTime;

        /* Make sure the SysTick reload value does not overflow the counter. */
        if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 80059e4:	4b5b      	ldr	r3, [pc, #364]	@ (8005b54 <vPortSuppressTicksAndSleep+0x178>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d902      	bls.n	80059f4 <vPortSuppressTicksAndSleep+0x18>
        {
            xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 80059ee:	4b59      	ldr	r3, [pc, #356]	@ (8005b54 <vPortSuppressTicksAndSleep+0x178>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	607b      	str	r3, [r7, #4]
        }

        /* Enter a critical section but don't use the taskENTER_CRITICAL()
         * method as that will mask interrupts that should exit sleep mode. */
        __asm volatile ( "cpsid i" ::: "memory" );
 80059f4:	b672      	cpsid	i
        __asm volatile ( "dsb" );
 80059f6:	f3bf 8f4f 	dsb	sy
        __asm volatile ( "isb" );
 80059fa:	f3bf 8f6f 	isb	sy

        /* If a context switch is pending or a task is waiting for the scheduler
         * to be unsuspended then abandon the low power entry. */
        if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 80059fe:	f7fe ffd9 	bl	80049b4 <eTaskConfirmSleepModeStatus>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <vPortSuppressTicksAndSleep+0x30>
        {
            /* Re-enable interrupts - see comments above the cpsid instruction
             * above. */
            __asm volatile ( "cpsie i" ::: "memory" );
 8005a08:	b662      	cpsie	i
            vTaskStepTick( ulCompleteTickPeriods );

            /* Exit with interrupts enabled. */
            __asm volatile ( "cpsie i" ::: "memory" );
        }
    }
 8005a0a:	e09e      	b.n	8005b4a <vPortSuppressTicksAndSleep+0x16e>
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 8005a0c:	4b52      	ldr	r3, [pc, #328]	@ (8005b58 <vPortSuppressTicksAndSleep+0x17c>)
 8005a0e:	2206      	movs	r2, #6
 8005a10:	601a      	str	r2, [r3, #0]
            ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8005a12:	4b52      	ldr	r3, [pc, #328]	@ (8005b5c <vPortSuppressTicksAndSleep+0x180>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	617b      	str	r3, [r7, #20]
            if( ulSysTickDecrementsLeft == 0 )
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d102      	bne.n	8005a24 <vPortSuppressTicksAndSleep+0x48>
                ulSysTickDecrementsLeft = ulTimerCountsForOneTick;
 8005a1e:	4b50      	ldr	r3, [pc, #320]	@ (8005b60 <vPortSuppressTicksAndSleep+0x184>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	617b      	str	r3, [r7, #20]
            ulReloadValue = ulSysTickDecrementsLeft + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	4a4d      	ldr	r2, [pc, #308]	@ (8005b60 <vPortSuppressTicksAndSleep+0x184>)
 8005a2a:	6812      	ldr	r2, [r2, #0]
 8005a2c:	fb02 f303 	mul.w	r3, r2, r3
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	4413      	add	r3, r2
 8005a34:	61fb      	str	r3, [r7, #28]
            if( ( portNVIC_INT_CTRL_REG & portNVIC_PEND_SYSTICK_SET_BIT ) != 0 )
 8005a36:	4b4b      	ldr	r3, [pc, #300]	@ (8005b64 <vPortSuppressTicksAndSleep+0x188>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d008      	beq.n	8005a54 <vPortSuppressTicksAndSleep+0x78>
                portNVIC_INT_CTRL_REG = portNVIC_PEND_SYSTICK_CLEAR_BIT;
 8005a42:	4b48      	ldr	r3, [pc, #288]	@ (8005b64 <vPortSuppressTicksAndSleep+0x188>)
 8005a44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005a48:	601a      	str	r2, [r3, #0]
                ulReloadValue -= ulTimerCountsForOneTick;
 8005a4a:	4b45      	ldr	r3, [pc, #276]	@ (8005b60 <vPortSuppressTicksAndSleep+0x184>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69fa      	ldr	r2, [r7, #28]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	61fb      	str	r3, [r7, #28]
            if( ulReloadValue > ulStoppedTimerCompensation )
 8005a54:	4b44      	ldr	r3, [pc, #272]	@ (8005b68 <vPortSuppressTicksAndSleep+0x18c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	69fa      	ldr	r2, [r7, #28]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d904      	bls.n	8005a68 <vPortSuppressTicksAndSleep+0x8c>
                ulReloadValue -= ulStoppedTimerCompensation;
 8005a5e:	4b42      	ldr	r3, [pc, #264]	@ (8005b68 <vPortSuppressTicksAndSleep+0x18c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	61fb      	str	r3, [r7, #28]
            portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8005a68:	4a40      	ldr	r2, [pc, #256]	@ (8005b6c <vPortSuppressTicksAndSleep+0x190>)
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	6013      	str	r3, [r2, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8005b5c <vPortSuppressTicksAndSleep+0x180>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8005a74:	4b38      	ldr	r3, [pc, #224]	@ (8005b58 <vPortSuppressTicksAndSleep+0x17c>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a37      	ldr	r2, [pc, #220]	@ (8005b58 <vPortSuppressTicksAndSleep+0x17c>)
 8005a7a:	f043 0301 	orr.w	r3, r3, #1
 8005a7e:	6013      	str	r3, [r2, #0]
            xModifiableIdleTime = xExpectedIdleTime;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	60fb      	str	r3, [r7, #12]
            if( xModifiableIdleTime > 0 )
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d004      	beq.n	8005a94 <vPortSuppressTicksAndSleep+0xb8>
                __asm volatile ( "dsb" ::: "memory" );
 8005a8a:	f3bf 8f4f 	dsb	sy
                __asm volatile ( "wfi" );
 8005a8e:	bf30      	wfi
                __asm volatile ( "isb" );
 8005a90:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsie i" ::: "memory" );
 8005a94:	b662      	cpsie	i
            __asm volatile ( "dsb" );
 8005a96:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 8005a9a:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsid i" ::: "memory" );
 8005a9e:	b672      	cpsid	i
            __asm volatile ( "dsb" );
 8005aa0:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 8005aa4:	f3bf 8f6f 	isb	sy
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 8005aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8005b58 <vPortSuppressTicksAndSleep+0x17c>)
 8005aaa:	2206      	movs	r2, #6
 8005aac:	601a      	str	r2, [r3, #0]
            if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8005aae:	4b2a      	ldr	r3, [pc, #168]	@ (8005b58 <vPortSuppressTicksAndSleep+0x17c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d01d      	beq.n	8005af6 <vPortSuppressTicksAndSleep+0x11a>
                ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8005aba:	4b29      	ldr	r3, [pc, #164]	@ (8005b60 <vPortSuppressTicksAndSleep+0x184>)
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	4b27      	ldr	r3, [pc, #156]	@ (8005b5c <vPortSuppressTicksAndSleep+0x180>)
 8005ac0:	6819      	ldr	r1, [r3, #0]
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	1acb      	subs	r3, r1, r3
 8005ac6:	4413      	add	r3, r2
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	613b      	str	r3, [r7, #16]
                if( ( ulCalculatedLoadValue <= ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8005acc:	4b26      	ldr	r3, [pc, #152]	@ (8005b68 <vPortSuppressTicksAndSleep+0x18c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d904      	bls.n	8005ae0 <vPortSuppressTicksAndSleep+0x104>
 8005ad6:	4b22      	ldr	r3, [pc, #136]	@ (8005b60 <vPortSuppressTicksAndSleep+0x184>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d903      	bls.n	8005ae8 <vPortSuppressTicksAndSleep+0x10c>
                    ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8005ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8005b60 <vPortSuppressTicksAndSleep+0x184>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	613b      	str	r3, [r7, #16]
                portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8005ae8:	4a20      	ldr	r2, [pc, #128]	@ (8005b6c <vPortSuppressTicksAndSleep+0x190>)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	6013      	str	r3, [r2, #0]
                ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3b01      	subs	r3, #1
 8005af2:	61bb      	str	r3, [r7, #24]
 8005af4:	e01a      	b.n	8005b2c <vPortSuppressTicksAndSleep+0x150>
                ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8005af6:	4b19      	ldr	r3, [pc, #100]	@ (8005b5c <vPortSuppressTicksAndSleep+0x180>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	617b      	str	r3, [r7, #20]
                ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - ulSysTickDecrementsLeft;
 8005afc:	4b18      	ldr	r3, [pc, #96]	@ (8005b60 <vPortSuppressTicksAndSleep+0x184>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	fb03 f202 	mul.w	r2, r3, r2
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	60bb      	str	r3, [r7, #8]
                ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8005b0c:	4b14      	ldr	r3, [pc, #80]	@ (8005b60 <vPortSuppressTicksAndSleep+0x184>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b16:	61bb      	str	r3, [r7, #24]
                portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	4a10      	ldr	r2, [pc, #64]	@ (8005b60 <vPortSuppressTicksAndSleep+0x184>)
 8005b1e:	6812      	ldr	r2, [r2, #0]
 8005b20:	fb03 f202 	mul.w	r2, r3, r2
 8005b24:	4911      	ldr	r1, [pc, #68]	@ (8005b6c <vPortSuppressTicksAndSleep+0x190>)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	600b      	str	r3, [r1, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b5c <vPortSuppressTicksAndSleep+0x180>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8005b32:	4b09      	ldr	r3, [pc, #36]	@ (8005b58 <vPortSuppressTicksAndSleep+0x17c>)
 8005b34:	2207      	movs	r2, #7
 8005b36:	601a      	str	r2, [r3, #0]
                portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8005b38:	4b09      	ldr	r3, [pc, #36]	@ (8005b60 <vPortSuppressTicksAndSleep+0x184>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8005b6c <vPortSuppressTicksAndSleep+0x190>)
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	6013      	str	r3, [r2, #0]
            vTaskStepTick( ulCompleteTickPeriods );
 8005b42:	69b8      	ldr	r0, [r7, #24]
 8005b44:	f7fe fb54 	bl	80041f0 <vTaskStepTick>
            __asm volatile ( "cpsie i" ::: "memory" );
 8005b48:	b662      	cpsie	i
    }
 8005b4a:	bf00      	nop
 8005b4c:	3720      	adds	r7, #32
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	200002c4 	.word	0x200002c4
 8005b58:	e000e010 	.word	0xe000e010
 8005b5c:	e000e018 	.word	0xe000e018
 8005b60:	200002c0 	.word	0x200002c0
 8005b64:	e000ed04 	.word	0xe000ed04
 8005b68:	200002c8 	.word	0x200002c8
 8005b6c:	e000e014 	.word	0xe000e014

08005b70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
    /* Calculate the constants required to configure the tick interrupt. */
    #if ( configUSE_TICKLESS_IDLE == 1 )
    {
        ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8005b74:	4b14      	ldr	r3, [pc, #80]	@ (8005bc8 <vPortSetupTimerInterrupt+0x58>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a14      	ldr	r2, [pc, #80]	@ (8005bcc <vPortSetupTimerInterrupt+0x5c>)
 8005b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7e:	099b      	lsrs	r3, r3, #6
 8005b80:	4a13      	ldr	r2, [pc, #76]	@ (8005bd0 <vPortSetupTimerInterrupt+0x60>)
 8005b82:	6013      	str	r3, [r2, #0]
        xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8005b84:	4b12      	ldr	r3, [pc, #72]	@ (8005bd0 <vPortSetupTimerInterrupt+0x60>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8005b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b90:	4a10      	ldr	r2, [pc, #64]	@ (8005bd4 <vPortSetupTimerInterrupt+0x64>)
 8005b92:	6013      	str	r3, [r2, #0]
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8005b94:	4b10      	ldr	r3, [pc, #64]	@ (8005bd8 <vPortSetupTimerInterrupt+0x68>)
 8005b96:	225e      	movs	r2, #94	@ 0x5e
 8005b98:	601a      	str	r2, [r3, #0]
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b9a:	4b10      	ldr	r3, [pc, #64]	@ (8005bdc <vPortSetupTimerInterrupt+0x6c>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8005be0 <vPortSetupTimerInterrupt+0x70>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ba6:	4b08      	ldr	r3, [pc, #32]	@ (8005bc8 <vPortSetupTimerInterrupt+0x58>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a08      	ldr	r2, [pc, #32]	@ (8005bcc <vPortSetupTimerInterrupt+0x5c>)
 8005bac:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb0:	099b      	lsrs	r3, r3, #6
 8005bb2:	4a0c      	ldr	r2, [pc, #48]	@ (8005be4 <vPortSetupTimerInterrupt+0x74>)
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bb8:	4b08      	ldr	r3, [pc, #32]	@ (8005bdc <vPortSetupTimerInterrupt+0x6c>)
 8005bba:	2207      	movs	r2, #7
 8005bbc:	601a      	str	r2, [r3, #0]
}
 8005bbe:	bf00      	nop
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bc80      	pop	{r7}
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	20000000 	.word	0x20000000
 8005bcc:	10624dd3 	.word	0x10624dd3
 8005bd0:	200002c0 	.word	0x200002c0
 8005bd4:	200002c4 	.word	0x200002c4
 8005bd8:	200002c8 	.word	0x200002c8
 8005bdc:	e000e010 	.word	0xe000e010
 8005be0:	e000e018 	.word	0xe000e018
 8005be4:	e000e014 	.word	0xe000e014

08005be8 <malloc>:
 8005be8:	4b02      	ldr	r3, [pc, #8]	@ (8005bf4 <malloc+0xc>)
 8005bea:	4601      	mov	r1, r0
 8005bec:	6818      	ldr	r0, [r3, #0]
 8005bee:	f000 b82d 	b.w	8005c4c <_malloc_r>
 8005bf2:	bf00      	nop
 8005bf4:	20000024 	.word	0x20000024

08005bf8 <free>:
 8005bf8:	4b02      	ldr	r3, [pc, #8]	@ (8005c04 <free+0xc>)
 8005bfa:	4601      	mov	r1, r0
 8005bfc:	6818      	ldr	r0, [r3, #0]
 8005bfe:	f000 b923 	b.w	8005e48 <_free_r>
 8005c02:	bf00      	nop
 8005c04:	20000024 	.word	0x20000024

08005c08 <sbrk_aligned>:
 8005c08:	b570      	push	{r4, r5, r6, lr}
 8005c0a:	4e0f      	ldr	r6, [pc, #60]	@ (8005c48 <sbrk_aligned+0x40>)
 8005c0c:	460c      	mov	r4, r1
 8005c0e:	6831      	ldr	r1, [r6, #0]
 8005c10:	4605      	mov	r5, r0
 8005c12:	b911      	cbnz	r1, 8005c1a <sbrk_aligned+0x12>
 8005c14:	f000 f8ce 	bl	8005db4 <_sbrk_r>
 8005c18:	6030      	str	r0, [r6, #0]
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f000 f8c9 	bl	8005db4 <_sbrk_r>
 8005c22:	1c43      	adds	r3, r0, #1
 8005c24:	d103      	bne.n	8005c2e <sbrk_aligned+0x26>
 8005c26:	f04f 34ff 	mov.w	r4, #4294967295
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	bd70      	pop	{r4, r5, r6, pc}
 8005c2e:	1cc4      	adds	r4, r0, #3
 8005c30:	f024 0403 	bic.w	r4, r4, #3
 8005c34:	42a0      	cmp	r0, r4
 8005c36:	d0f8      	beq.n	8005c2a <sbrk_aligned+0x22>
 8005c38:	1a21      	subs	r1, r4, r0
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	f000 f8ba 	bl	8005db4 <_sbrk_r>
 8005c40:	3001      	adds	r0, #1
 8005c42:	d1f2      	bne.n	8005c2a <sbrk_aligned+0x22>
 8005c44:	e7ef      	b.n	8005c26 <sbrk_aligned+0x1e>
 8005c46:	bf00      	nop
 8005c48:	200002d4 	.word	0x200002d4

08005c4c <_malloc_r>:
 8005c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c50:	1ccd      	adds	r5, r1, #3
 8005c52:	f025 0503 	bic.w	r5, r5, #3
 8005c56:	3508      	adds	r5, #8
 8005c58:	2d0c      	cmp	r5, #12
 8005c5a:	bf38      	it	cc
 8005c5c:	250c      	movcc	r5, #12
 8005c5e:	2d00      	cmp	r5, #0
 8005c60:	4606      	mov	r6, r0
 8005c62:	db01      	blt.n	8005c68 <_malloc_r+0x1c>
 8005c64:	42a9      	cmp	r1, r5
 8005c66:	d904      	bls.n	8005c72 <_malloc_r+0x26>
 8005c68:	230c      	movs	r3, #12
 8005c6a:	6033      	str	r3, [r6, #0]
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d48 <_malloc_r+0xfc>
 8005c76:	f000 f869 	bl	8005d4c <__malloc_lock>
 8005c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c7e:	461c      	mov	r4, r3
 8005c80:	bb44      	cbnz	r4, 8005cd4 <_malloc_r+0x88>
 8005c82:	4629      	mov	r1, r5
 8005c84:	4630      	mov	r0, r6
 8005c86:	f7ff ffbf 	bl	8005c08 <sbrk_aligned>
 8005c8a:	1c43      	adds	r3, r0, #1
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	d158      	bne.n	8005d42 <_malloc_r+0xf6>
 8005c90:	f8d8 4000 	ldr.w	r4, [r8]
 8005c94:	4627      	mov	r7, r4
 8005c96:	2f00      	cmp	r7, #0
 8005c98:	d143      	bne.n	8005d22 <_malloc_r+0xd6>
 8005c9a:	2c00      	cmp	r4, #0
 8005c9c:	d04b      	beq.n	8005d36 <_malloc_r+0xea>
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	4639      	mov	r1, r7
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	eb04 0903 	add.w	r9, r4, r3
 8005ca8:	f000 f884 	bl	8005db4 <_sbrk_r>
 8005cac:	4581      	cmp	r9, r0
 8005cae:	d142      	bne.n	8005d36 <_malloc_r+0xea>
 8005cb0:	6821      	ldr	r1, [r4, #0]
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	1a6d      	subs	r5, r5, r1
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	f7ff ffa6 	bl	8005c08 <sbrk_aligned>
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	d03a      	beq.n	8005d36 <_malloc_r+0xea>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	442b      	add	r3, r5
 8005cc4:	6023      	str	r3, [r4, #0]
 8005cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	bb62      	cbnz	r2, 8005d28 <_malloc_r+0xdc>
 8005cce:	f8c8 7000 	str.w	r7, [r8]
 8005cd2:	e00f      	b.n	8005cf4 <_malloc_r+0xa8>
 8005cd4:	6822      	ldr	r2, [r4, #0]
 8005cd6:	1b52      	subs	r2, r2, r5
 8005cd8:	d420      	bmi.n	8005d1c <_malloc_r+0xd0>
 8005cda:	2a0b      	cmp	r2, #11
 8005cdc:	d917      	bls.n	8005d0e <_malloc_r+0xc2>
 8005cde:	1961      	adds	r1, r4, r5
 8005ce0:	42a3      	cmp	r3, r4
 8005ce2:	6025      	str	r5, [r4, #0]
 8005ce4:	bf18      	it	ne
 8005ce6:	6059      	strne	r1, [r3, #4]
 8005ce8:	6863      	ldr	r3, [r4, #4]
 8005cea:	bf08      	it	eq
 8005cec:	f8c8 1000 	streq.w	r1, [r8]
 8005cf0:	5162      	str	r2, [r4, r5]
 8005cf2:	604b      	str	r3, [r1, #4]
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	f000 f82f 	bl	8005d58 <__malloc_unlock>
 8005cfa:	f104 000b 	add.w	r0, r4, #11
 8005cfe:	1d23      	adds	r3, r4, #4
 8005d00:	f020 0007 	bic.w	r0, r0, #7
 8005d04:	1ac2      	subs	r2, r0, r3
 8005d06:	bf1c      	itt	ne
 8005d08:	1a1b      	subne	r3, r3, r0
 8005d0a:	50a3      	strne	r3, [r4, r2]
 8005d0c:	e7af      	b.n	8005c6e <_malloc_r+0x22>
 8005d0e:	6862      	ldr	r2, [r4, #4]
 8005d10:	42a3      	cmp	r3, r4
 8005d12:	bf0c      	ite	eq
 8005d14:	f8c8 2000 	streq.w	r2, [r8]
 8005d18:	605a      	strne	r2, [r3, #4]
 8005d1a:	e7eb      	b.n	8005cf4 <_malloc_r+0xa8>
 8005d1c:	4623      	mov	r3, r4
 8005d1e:	6864      	ldr	r4, [r4, #4]
 8005d20:	e7ae      	b.n	8005c80 <_malloc_r+0x34>
 8005d22:	463c      	mov	r4, r7
 8005d24:	687f      	ldr	r7, [r7, #4]
 8005d26:	e7b6      	b.n	8005c96 <_malloc_r+0x4a>
 8005d28:	461a      	mov	r2, r3
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	42a3      	cmp	r3, r4
 8005d2e:	d1fb      	bne.n	8005d28 <_malloc_r+0xdc>
 8005d30:	2300      	movs	r3, #0
 8005d32:	6053      	str	r3, [r2, #4]
 8005d34:	e7de      	b.n	8005cf4 <_malloc_r+0xa8>
 8005d36:	230c      	movs	r3, #12
 8005d38:	4630      	mov	r0, r6
 8005d3a:	6033      	str	r3, [r6, #0]
 8005d3c:	f000 f80c 	bl	8005d58 <__malloc_unlock>
 8005d40:	e794      	b.n	8005c6c <_malloc_r+0x20>
 8005d42:	6005      	str	r5, [r0, #0]
 8005d44:	e7d6      	b.n	8005cf4 <_malloc_r+0xa8>
 8005d46:	bf00      	nop
 8005d48:	200002d8 	.word	0x200002d8

08005d4c <__malloc_lock>:
 8005d4c:	4801      	ldr	r0, [pc, #4]	@ (8005d54 <__malloc_lock+0x8>)
 8005d4e:	f000 b86b 	b.w	8005e28 <__retarget_lock_acquire_recursive>
 8005d52:	bf00      	nop
 8005d54:	20000418 	.word	0x20000418

08005d58 <__malloc_unlock>:
 8005d58:	4801      	ldr	r0, [pc, #4]	@ (8005d60 <__malloc_unlock+0x8>)
 8005d5a:	f000 b866 	b.w	8005e2a <__retarget_lock_release_recursive>
 8005d5e:	bf00      	nop
 8005d60:	20000418 	.word	0x20000418

08005d64 <siprintf>:
 8005d64:	b40e      	push	{r1, r2, r3}
 8005d66:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d6a:	b500      	push	{lr}
 8005d6c:	b09c      	sub	sp, #112	@ 0x70
 8005d6e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005d70:	9002      	str	r0, [sp, #8]
 8005d72:	9006      	str	r0, [sp, #24]
 8005d74:	9107      	str	r1, [sp, #28]
 8005d76:	9104      	str	r1, [sp, #16]
 8005d78:	4808      	ldr	r0, [pc, #32]	@ (8005d9c <siprintf+0x38>)
 8005d7a:	4909      	ldr	r1, [pc, #36]	@ (8005da0 <siprintf+0x3c>)
 8005d7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d80:	9105      	str	r1, [sp, #20]
 8005d82:	6800      	ldr	r0, [r0, #0]
 8005d84:	a902      	add	r1, sp, #8
 8005d86:	9301      	str	r3, [sp, #4]
 8005d88:	f000 f902 	bl	8005f90 <_svfiprintf_r>
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	9b02      	ldr	r3, [sp, #8]
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	b01c      	add	sp, #112	@ 0x70
 8005d94:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d98:	b003      	add	sp, #12
 8005d9a:	4770      	bx	lr
 8005d9c:	20000024 	.word	0x20000024
 8005da0:	ffff0208 	.word	0xffff0208

08005da4 <memset>:
 8005da4:	4603      	mov	r3, r0
 8005da6:	4402      	add	r2, r0
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d100      	bne.n	8005dae <memset+0xa>
 8005dac:	4770      	bx	lr
 8005dae:	f803 1b01 	strb.w	r1, [r3], #1
 8005db2:	e7f9      	b.n	8005da8 <memset+0x4>

08005db4 <_sbrk_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	2300      	movs	r3, #0
 8005db8:	4d05      	ldr	r5, [pc, #20]	@ (8005dd0 <_sbrk_r+0x1c>)
 8005dba:	4604      	mov	r4, r0
 8005dbc:	4608      	mov	r0, r1
 8005dbe:	602b      	str	r3, [r5, #0]
 8005dc0:	f7fa fd5a 	bl	8000878 <_sbrk>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	d102      	bne.n	8005dce <_sbrk_r+0x1a>
 8005dc8:	682b      	ldr	r3, [r5, #0]
 8005dca:	b103      	cbz	r3, 8005dce <_sbrk_r+0x1a>
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	bd38      	pop	{r3, r4, r5, pc}
 8005dd0:	20000414 	.word	0x20000414

08005dd4 <__errno>:
 8005dd4:	4b01      	ldr	r3, [pc, #4]	@ (8005ddc <__errno+0x8>)
 8005dd6:	6818      	ldr	r0, [r3, #0]
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	20000024 	.word	0x20000024

08005de0 <__libc_init_array>:
 8005de0:	b570      	push	{r4, r5, r6, lr}
 8005de2:	2600      	movs	r6, #0
 8005de4:	4d0c      	ldr	r5, [pc, #48]	@ (8005e18 <__libc_init_array+0x38>)
 8005de6:	4c0d      	ldr	r4, [pc, #52]	@ (8005e1c <__libc_init_array+0x3c>)
 8005de8:	1b64      	subs	r4, r4, r5
 8005dea:	10a4      	asrs	r4, r4, #2
 8005dec:	42a6      	cmp	r6, r4
 8005dee:	d109      	bne.n	8005e04 <__libc_init_array+0x24>
 8005df0:	f000 fbba 	bl	8006568 <_init>
 8005df4:	2600      	movs	r6, #0
 8005df6:	4d0a      	ldr	r5, [pc, #40]	@ (8005e20 <__libc_init_array+0x40>)
 8005df8:	4c0a      	ldr	r4, [pc, #40]	@ (8005e24 <__libc_init_array+0x44>)
 8005dfa:	1b64      	subs	r4, r4, r5
 8005dfc:	10a4      	asrs	r4, r4, #2
 8005dfe:	42a6      	cmp	r6, r4
 8005e00:	d105      	bne.n	8005e0e <__libc_init_array+0x2e>
 8005e02:	bd70      	pop	{r4, r5, r6, pc}
 8005e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e08:	4798      	blx	r3
 8005e0a:	3601      	adds	r6, #1
 8005e0c:	e7ee      	b.n	8005dec <__libc_init_array+0xc>
 8005e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e12:	4798      	blx	r3
 8005e14:	3601      	adds	r6, #1
 8005e16:	e7f2      	b.n	8005dfe <__libc_init_array+0x1e>
 8005e18:	08008710 	.word	0x08008710
 8005e1c:	08008710 	.word	0x08008710
 8005e20:	08008710 	.word	0x08008710
 8005e24:	08008714 	.word	0x08008714

08005e28 <__retarget_lock_acquire_recursive>:
 8005e28:	4770      	bx	lr

08005e2a <__retarget_lock_release_recursive>:
 8005e2a:	4770      	bx	lr

08005e2c <memcpy>:
 8005e2c:	440a      	add	r2, r1
 8005e2e:	4291      	cmp	r1, r2
 8005e30:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e34:	d100      	bne.n	8005e38 <memcpy+0xc>
 8005e36:	4770      	bx	lr
 8005e38:	b510      	push	{r4, lr}
 8005e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e3e:	4291      	cmp	r1, r2
 8005e40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e44:	d1f9      	bne.n	8005e3a <memcpy+0xe>
 8005e46:	bd10      	pop	{r4, pc}

08005e48 <_free_r>:
 8005e48:	b538      	push	{r3, r4, r5, lr}
 8005e4a:	4605      	mov	r5, r0
 8005e4c:	2900      	cmp	r1, #0
 8005e4e:	d040      	beq.n	8005ed2 <_free_r+0x8a>
 8005e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e54:	1f0c      	subs	r4, r1, #4
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	bfb8      	it	lt
 8005e5a:	18e4      	addlt	r4, r4, r3
 8005e5c:	f7ff ff76 	bl	8005d4c <__malloc_lock>
 8005e60:	4a1c      	ldr	r2, [pc, #112]	@ (8005ed4 <_free_r+0x8c>)
 8005e62:	6813      	ldr	r3, [r2, #0]
 8005e64:	b933      	cbnz	r3, 8005e74 <_free_r+0x2c>
 8005e66:	6063      	str	r3, [r4, #4]
 8005e68:	6014      	str	r4, [r2, #0]
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e70:	f7ff bf72 	b.w	8005d58 <__malloc_unlock>
 8005e74:	42a3      	cmp	r3, r4
 8005e76:	d908      	bls.n	8005e8a <_free_r+0x42>
 8005e78:	6820      	ldr	r0, [r4, #0]
 8005e7a:	1821      	adds	r1, r4, r0
 8005e7c:	428b      	cmp	r3, r1
 8005e7e:	bf01      	itttt	eq
 8005e80:	6819      	ldreq	r1, [r3, #0]
 8005e82:	685b      	ldreq	r3, [r3, #4]
 8005e84:	1809      	addeq	r1, r1, r0
 8005e86:	6021      	streq	r1, [r4, #0]
 8005e88:	e7ed      	b.n	8005e66 <_free_r+0x1e>
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	b10b      	cbz	r3, 8005e94 <_free_r+0x4c>
 8005e90:	42a3      	cmp	r3, r4
 8005e92:	d9fa      	bls.n	8005e8a <_free_r+0x42>
 8005e94:	6811      	ldr	r1, [r2, #0]
 8005e96:	1850      	adds	r0, r2, r1
 8005e98:	42a0      	cmp	r0, r4
 8005e9a:	d10b      	bne.n	8005eb4 <_free_r+0x6c>
 8005e9c:	6820      	ldr	r0, [r4, #0]
 8005e9e:	4401      	add	r1, r0
 8005ea0:	1850      	adds	r0, r2, r1
 8005ea2:	4283      	cmp	r3, r0
 8005ea4:	6011      	str	r1, [r2, #0]
 8005ea6:	d1e0      	bne.n	8005e6a <_free_r+0x22>
 8005ea8:	6818      	ldr	r0, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	4408      	add	r0, r1
 8005eae:	6010      	str	r0, [r2, #0]
 8005eb0:	6053      	str	r3, [r2, #4]
 8005eb2:	e7da      	b.n	8005e6a <_free_r+0x22>
 8005eb4:	d902      	bls.n	8005ebc <_free_r+0x74>
 8005eb6:	230c      	movs	r3, #12
 8005eb8:	602b      	str	r3, [r5, #0]
 8005eba:	e7d6      	b.n	8005e6a <_free_r+0x22>
 8005ebc:	6820      	ldr	r0, [r4, #0]
 8005ebe:	1821      	adds	r1, r4, r0
 8005ec0:	428b      	cmp	r3, r1
 8005ec2:	bf01      	itttt	eq
 8005ec4:	6819      	ldreq	r1, [r3, #0]
 8005ec6:	685b      	ldreq	r3, [r3, #4]
 8005ec8:	1809      	addeq	r1, r1, r0
 8005eca:	6021      	streq	r1, [r4, #0]
 8005ecc:	6063      	str	r3, [r4, #4]
 8005ece:	6054      	str	r4, [r2, #4]
 8005ed0:	e7cb      	b.n	8005e6a <_free_r+0x22>
 8005ed2:	bd38      	pop	{r3, r4, r5, pc}
 8005ed4:	200002d8 	.word	0x200002d8

08005ed8 <__ssputs_r>:
 8005ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005edc:	461f      	mov	r7, r3
 8005ede:	688e      	ldr	r6, [r1, #8]
 8005ee0:	4682      	mov	sl, r0
 8005ee2:	42be      	cmp	r6, r7
 8005ee4:	460c      	mov	r4, r1
 8005ee6:	4690      	mov	r8, r2
 8005ee8:	680b      	ldr	r3, [r1, #0]
 8005eea:	d82d      	bhi.n	8005f48 <__ssputs_r+0x70>
 8005eec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ef0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ef4:	d026      	beq.n	8005f44 <__ssputs_r+0x6c>
 8005ef6:	6965      	ldr	r5, [r4, #20]
 8005ef8:	6909      	ldr	r1, [r1, #16]
 8005efa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005efe:	eba3 0901 	sub.w	r9, r3, r1
 8005f02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f06:	1c7b      	adds	r3, r7, #1
 8005f08:	444b      	add	r3, r9
 8005f0a:	106d      	asrs	r5, r5, #1
 8005f0c:	429d      	cmp	r5, r3
 8005f0e:	bf38      	it	cc
 8005f10:	461d      	movcc	r5, r3
 8005f12:	0553      	lsls	r3, r2, #21
 8005f14:	d527      	bpl.n	8005f66 <__ssputs_r+0x8e>
 8005f16:	4629      	mov	r1, r5
 8005f18:	f7ff fe98 	bl	8005c4c <_malloc_r>
 8005f1c:	4606      	mov	r6, r0
 8005f1e:	b360      	cbz	r0, 8005f7a <__ssputs_r+0xa2>
 8005f20:	464a      	mov	r2, r9
 8005f22:	6921      	ldr	r1, [r4, #16]
 8005f24:	f7ff ff82 	bl	8005e2c <memcpy>
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f32:	81a3      	strh	r3, [r4, #12]
 8005f34:	6126      	str	r6, [r4, #16]
 8005f36:	444e      	add	r6, r9
 8005f38:	6026      	str	r6, [r4, #0]
 8005f3a:	463e      	mov	r6, r7
 8005f3c:	6165      	str	r5, [r4, #20]
 8005f3e:	eba5 0509 	sub.w	r5, r5, r9
 8005f42:	60a5      	str	r5, [r4, #8]
 8005f44:	42be      	cmp	r6, r7
 8005f46:	d900      	bls.n	8005f4a <__ssputs_r+0x72>
 8005f48:	463e      	mov	r6, r7
 8005f4a:	4632      	mov	r2, r6
 8005f4c:	4641      	mov	r1, r8
 8005f4e:	6820      	ldr	r0, [r4, #0]
 8005f50:	f000 faac 	bl	80064ac <memmove>
 8005f54:	2000      	movs	r0, #0
 8005f56:	68a3      	ldr	r3, [r4, #8]
 8005f58:	1b9b      	subs	r3, r3, r6
 8005f5a:	60a3      	str	r3, [r4, #8]
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	4433      	add	r3, r6
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f66:	462a      	mov	r2, r5
 8005f68:	f000 fac8 	bl	80064fc <_realloc_r>
 8005f6c:	4606      	mov	r6, r0
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	d1e0      	bne.n	8005f34 <__ssputs_r+0x5c>
 8005f72:	4650      	mov	r0, sl
 8005f74:	6921      	ldr	r1, [r4, #16]
 8005f76:	f7ff ff67 	bl	8005e48 <_free_r>
 8005f7a:	230c      	movs	r3, #12
 8005f7c:	f8ca 3000 	str.w	r3, [sl]
 8005f80:	89a3      	ldrh	r3, [r4, #12]
 8005f82:	f04f 30ff 	mov.w	r0, #4294967295
 8005f86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f8a:	81a3      	strh	r3, [r4, #12]
 8005f8c:	e7e9      	b.n	8005f62 <__ssputs_r+0x8a>
	...

08005f90 <_svfiprintf_r>:
 8005f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f94:	4698      	mov	r8, r3
 8005f96:	898b      	ldrh	r3, [r1, #12]
 8005f98:	4607      	mov	r7, r0
 8005f9a:	061b      	lsls	r3, r3, #24
 8005f9c:	460d      	mov	r5, r1
 8005f9e:	4614      	mov	r4, r2
 8005fa0:	b09d      	sub	sp, #116	@ 0x74
 8005fa2:	d510      	bpl.n	8005fc6 <_svfiprintf_r+0x36>
 8005fa4:	690b      	ldr	r3, [r1, #16]
 8005fa6:	b973      	cbnz	r3, 8005fc6 <_svfiprintf_r+0x36>
 8005fa8:	2140      	movs	r1, #64	@ 0x40
 8005faa:	f7ff fe4f 	bl	8005c4c <_malloc_r>
 8005fae:	6028      	str	r0, [r5, #0]
 8005fb0:	6128      	str	r0, [r5, #16]
 8005fb2:	b930      	cbnz	r0, 8005fc2 <_svfiprintf_r+0x32>
 8005fb4:	230c      	movs	r3, #12
 8005fb6:	603b      	str	r3, [r7, #0]
 8005fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fbc:	b01d      	add	sp, #116	@ 0x74
 8005fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc2:	2340      	movs	r3, #64	@ 0x40
 8005fc4:	616b      	str	r3, [r5, #20]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fca:	2320      	movs	r3, #32
 8005fcc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005fd0:	2330      	movs	r3, #48	@ 0x30
 8005fd2:	f04f 0901 	mov.w	r9, #1
 8005fd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fda:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006174 <_svfiprintf_r+0x1e4>
 8005fde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fe2:	4623      	mov	r3, r4
 8005fe4:	469a      	mov	sl, r3
 8005fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fea:	b10a      	cbz	r2, 8005ff0 <_svfiprintf_r+0x60>
 8005fec:	2a25      	cmp	r2, #37	@ 0x25
 8005fee:	d1f9      	bne.n	8005fe4 <_svfiprintf_r+0x54>
 8005ff0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ff4:	d00b      	beq.n	800600e <_svfiprintf_r+0x7e>
 8005ff6:	465b      	mov	r3, fp
 8005ff8:	4622      	mov	r2, r4
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	f7ff ff6b 	bl	8005ed8 <__ssputs_r>
 8006002:	3001      	adds	r0, #1
 8006004:	f000 80a7 	beq.w	8006156 <_svfiprintf_r+0x1c6>
 8006008:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800600a:	445a      	add	r2, fp
 800600c:	9209      	str	r2, [sp, #36]	@ 0x24
 800600e:	f89a 3000 	ldrb.w	r3, [sl]
 8006012:	2b00      	cmp	r3, #0
 8006014:	f000 809f 	beq.w	8006156 <_svfiprintf_r+0x1c6>
 8006018:	2300      	movs	r3, #0
 800601a:	f04f 32ff 	mov.w	r2, #4294967295
 800601e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006022:	f10a 0a01 	add.w	sl, sl, #1
 8006026:	9304      	str	r3, [sp, #16]
 8006028:	9307      	str	r3, [sp, #28]
 800602a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800602e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006030:	4654      	mov	r4, sl
 8006032:	2205      	movs	r2, #5
 8006034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006038:	484e      	ldr	r0, [pc, #312]	@ (8006174 <_svfiprintf_r+0x1e4>)
 800603a:	f000 fa51 	bl	80064e0 <memchr>
 800603e:	9a04      	ldr	r2, [sp, #16]
 8006040:	b9d8      	cbnz	r0, 800607a <_svfiprintf_r+0xea>
 8006042:	06d0      	lsls	r0, r2, #27
 8006044:	bf44      	itt	mi
 8006046:	2320      	movmi	r3, #32
 8006048:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800604c:	0711      	lsls	r1, r2, #28
 800604e:	bf44      	itt	mi
 8006050:	232b      	movmi	r3, #43	@ 0x2b
 8006052:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006056:	f89a 3000 	ldrb.w	r3, [sl]
 800605a:	2b2a      	cmp	r3, #42	@ 0x2a
 800605c:	d015      	beq.n	800608a <_svfiprintf_r+0xfa>
 800605e:	4654      	mov	r4, sl
 8006060:	2000      	movs	r0, #0
 8006062:	f04f 0c0a 	mov.w	ip, #10
 8006066:	9a07      	ldr	r2, [sp, #28]
 8006068:	4621      	mov	r1, r4
 800606a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800606e:	3b30      	subs	r3, #48	@ 0x30
 8006070:	2b09      	cmp	r3, #9
 8006072:	d94b      	bls.n	800610c <_svfiprintf_r+0x17c>
 8006074:	b1b0      	cbz	r0, 80060a4 <_svfiprintf_r+0x114>
 8006076:	9207      	str	r2, [sp, #28]
 8006078:	e014      	b.n	80060a4 <_svfiprintf_r+0x114>
 800607a:	eba0 0308 	sub.w	r3, r0, r8
 800607e:	fa09 f303 	lsl.w	r3, r9, r3
 8006082:	4313      	orrs	r3, r2
 8006084:	46a2      	mov	sl, r4
 8006086:	9304      	str	r3, [sp, #16]
 8006088:	e7d2      	b.n	8006030 <_svfiprintf_r+0xa0>
 800608a:	9b03      	ldr	r3, [sp, #12]
 800608c:	1d19      	adds	r1, r3, #4
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	9103      	str	r1, [sp, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	bfbb      	ittet	lt
 8006096:	425b      	neglt	r3, r3
 8006098:	f042 0202 	orrlt.w	r2, r2, #2
 800609c:	9307      	strge	r3, [sp, #28]
 800609e:	9307      	strlt	r3, [sp, #28]
 80060a0:	bfb8      	it	lt
 80060a2:	9204      	strlt	r2, [sp, #16]
 80060a4:	7823      	ldrb	r3, [r4, #0]
 80060a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80060a8:	d10a      	bne.n	80060c0 <_svfiprintf_r+0x130>
 80060aa:	7863      	ldrb	r3, [r4, #1]
 80060ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80060ae:	d132      	bne.n	8006116 <_svfiprintf_r+0x186>
 80060b0:	9b03      	ldr	r3, [sp, #12]
 80060b2:	3402      	adds	r4, #2
 80060b4:	1d1a      	adds	r2, r3, #4
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	9203      	str	r2, [sp, #12]
 80060ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060be:	9305      	str	r3, [sp, #20]
 80060c0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006178 <_svfiprintf_r+0x1e8>
 80060c4:	2203      	movs	r2, #3
 80060c6:	4650      	mov	r0, sl
 80060c8:	7821      	ldrb	r1, [r4, #0]
 80060ca:	f000 fa09 	bl	80064e0 <memchr>
 80060ce:	b138      	cbz	r0, 80060e0 <_svfiprintf_r+0x150>
 80060d0:	2240      	movs	r2, #64	@ 0x40
 80060d2:	9b04      	ldr	r3, [sp, #16]
 80060d4:	eba0 000a 	sub.w	r0, r0, sl
 80060d8:	4082      	lsls	r2, r0
 80060da:	4313      	orrs	r3, r2
 80060dc:	3401      	adds	r4, #1
 80060de:	9304      	str	r3, [sp, #16]
 80060e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060e4:	2206      	movs	r2, #6
 80060e6:	4825      	ldr	r0, [pc, #148]	@ (800617c <_svfiprintf_r+0x1ec>)
 80060e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060ec:	f000 f9f8 	bl	80064e0 <memchr>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d036      	beq.n	8006162 <_svfiprintf_r+0x1d2>
 80060f4:	4b22      	ldr	r3, [pc, #136]	@ (8006180 <_svfiprintf_r+0x1f0>)
 80060f6:	bb1b      	cbnz	r3, 8006140 <_svfiprintf_r+0x1b0>
 80060f8:	9b03      	ldr	r3, [sp, #12]
 80060fa:	3307      	adds	r3, #7
 80060fc:	f023 0307 	bic.w	r3, r3, #7
 8006100:	3308      	adds	r3, #8
 8006102:	9303      	str	r3, [sp, #12]
 8006104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006106:	4433      	add	r3, r6
 8006108:	9309      	str	r3, [sp, #36]	@ 0x24
 800610a:	e76a      	b.n	8005fe2 <_svfiprintf_r+0x52>
 800610c:	460c      	mov	r4, r1
 800610e:	2001      	movs	r0, #1
 8006110:	fb0c 3202 	mla	r2, ip, r2, r3
 8006114:	e7a8      	b.n	8006068 <_svfiprintf_r+0xd8>
 8006116:	2300      	movs	r3, #0
 8006118:	f04f 0c0a 	mov.w	ip, #10
 800611c:	4619      	mov	r1, r3
 800611e:	3401      	adds	r4, #1
 8006120:	9305      	str	r3, [sp, #20]
 8006122:	4620      	mov	r0, r4
 8006124:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006128:	3a30      	subs	r2, #48	@ 0x30
 800612a:	2a09      	cmp	r2, #9
 800612c:	d903      	bls.n	8006136 <_svfiprintf_r+0x1a6>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0c6      	beq.n	80060c0 <_svfiprintf_r+0x130>
 8006132:	9105      	str	r1, [sp, #20]
 8006134:	e7c4      	b.n	80060c0 <_svfiprintf_r+0x130>
 8006136:	4604      	mov	r4, r0
 8006138:	2301      	movs	r3, #1
 800613a:	fb0c 2101 	mla	r1, ip, r1, r2
 800613e:	e7f0      	b.n	8006122 <_svfiprintf_r+0x192>
 8006140:	ab03      	add	r3, sp, #12
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	462a      	mov	r2, r5
 8006146:	4638      	mov	r0, r7
 8006148:	4b0e      	ldr	r3, [pc, #56]	@ (8006184 <_svfiprintf_r+0x1f4>)
 800614a:	a904      	add	r1, sp, #16
 800614c:	f3af 8000 	nop.w
 8006150:	1c42      	adds	r2, r0, #1
 8006152:	4606      	mov	r6, r0
 8006154:	d1d6      	bne.n	8006104 <_svfiprintf_r+0x174>
 8006156:	89ab      	ldrh	r3, [r5, #12]
 8006158:	065b      	lsls	r3, r3, #25
 800615a:	f53f af2d 	bmi.w	8005fb8 <_svfiprintf_r+0x28>
 800615e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006160:	e72c      	b.n	8005fbc <_svfiprintf_r+0x2c>
 8006162:	ab03      	add	r3, sp, #12
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	462a      	mov	r2, r5
 8006168:	4638      	mov	r0, r7
 800616a:	4b06      	ldr	r3, [pc, #24]	@ (8006184 <_svfiprintf_r+0x1f4>)
 800616c:	a904      	add	r1, sp, #16
 800616e:	f000 f87d 	bl	800626c <_printf_i>
 8006172:	e7ed      	b.n	8006150 <_svfiprintf_r+0x1c0>
 8006174:	080086da 	.word	0x080086da
 8006178:	080086e0 	.word	0x080086e0
 800617c:	080086e4 	.word	0x080086e4
 8006180:	00000000 	.word	0x00000000
 8006184:	08005ed9 	.word	0x08005ed9

08006188 <_printf_common>:
 8006188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800618c:	4616      	mov	r6, r2
 800618e:	4698      	mov	r8, r3
 8006190:	688a      	ldr	r2, [r1, #8]
 8006192:	690b      	ldr	r3, [r1, #16]
 8006194:	4607      	mov	r7, r0
 8006196:	4293      	cmp	r3, r2
 8006198:	bfb8      	it	lt
 800619a:	4613      	movlt	r3, r2
 800619c:	6033      	str	r3, [r6, #0]
 800619e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061a2:	460c      	mov	r4, r1
 80061a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061a8:	b10a      	cbz	r2, 80061ae <_printf_common+0x26>
 80061aa:	3301      	adds	r3, #1
 80061ac:	6033      	str	r3, [r6, #0]
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	0699      	lsls	r1, r3, #26
 80061b2:	bf42      	ittt	mi
 80061b4:	6833      	ldrmi	r3, [r6, #0]
 80061b6:	3302      	addmi	r3, #2
 80061b8:	6033      	strmi	r3, [r6, #0]
 80061ba:	6825      	ldr	r5, [r4, #0]
 80061bc:	f015 0506 	ands.w	r5, r5, #6
 80061c0:	d106      	bne.n	80061d0 <_printf_common+0x48>
 80061c2:	f104 0a19 	add.w	sl, r4, #25
 80061c6:	68e3      	ldr	r3, [r4, #12]
 80061c8:	6832      	ldr	r2, [r6, #0]
 80061ca:	1a9b      	subs	r3, r3, r2
 80061cc:	42ab      	cmp	r3, r5
 80061ce:	dc2b      	bgt.n	8006228 <_printf_common+0xa0>
 80061d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061d4:	6822      	ldr	r2, [r4, #0]
 80061d6:	3b00      	subs	r3, #0
 80061d8:	bf18      	it	ne
 80061da:	2301      	movne	r3, #1
 80061dc:	0692      	lsls	r2, r2, #26
 80061de:	d430      	bmi.n	8006242 <_printf_common+0xba>
 80061e0:	4641      	mov	r1, r8
 80061e2:	4638      	mov	r0, r7
 80061e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80061e8:	47c8      	blx	r9
 80061ea:	3001      	adds	r0, #1
 80061ec:	d023      	beq.n	8006236 <_printf_common+0xae>
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	6922      	ldr	r2, [r4, #16]
 80061f2:	f003 0306 	and.w	r3, r3, #6
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	bf14      	ite	ne
 80061fa:	2500      	movne	r5, #0
 80061fc:	6833      	ldreq	r3, [r6, #0]
 80061fe:	f04f 0600 	mov.w	r6, #0
 8006202:	bf08      	it	eq
 8006204:	68e5      	ldreq	r5, [r4, #12]
 8006206:	f104 041a 	add.w	r4, r4, #26
 800620a:	bf08      	it	eq
 800620c:	1aed      	subeq	r5, r5, r3
 800620e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006212:	bf08      	it	eq
 8006214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006218:	4293      	cmp	r3, r2
 800621a:	bfc4      	itt	gt
 800621c:	1a9b      	subgt	r3, r3, r2
 800621e:	18ed      	addgt	r5, r5, r3
 8006220:	42b5      	cmp	r5, r6
 8006222:	d11a      	bne.n	800625a <_printf_common+0xd2>
 8006224:	2000      	movs	r0, #0
 8006226:	e008      	b.n	800623a <_printf_common+0xb2>
 8006228:	2301      	movs	r3, #1
 800622a:	4652      	mov	r2, sl
 800622c:	4641      	mov	r1, r8
 800622e:	4638      	mov	r0, r7
 8006230:	47c8      	blx	r9
 8006232:	3001      	adds	r0, #1
 8006234:	d103      	bne.n	800623e <_printf_common+0xb6>
 8006236:	f04f 30ff 	mov.w	r0, #4294967295
 800623a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623e:	3501      	adds	r5, #1
 8006240:	e7c1      	b.n	80061c6 <_printf_common+0x3e>
 8006242:	2030      	movs	r0, #48	@ 0x30
 8006244:	18e1      	adds	r1, r4, r3
 8006246:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006250:	4422      	add	r2, r4
 8006252:	3302      	adds	r3, #2
 8006254:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006258:	e7c2      	b.n	80061e0 <_printf_common+0x58>
 800625a:	2301      	movs	r3, #1
 800625c:	4622      	mov	r2, r4
 800625e:	4641      	mov	r1, r8
 8006260:	4638      	mov	r0, r7
 8006262:	47c8      	blx	r9
 8006264:	3001      	adds	r0, #1
 8006266:	d0e6      	beq.n	8006236 <_printf_common+0xae>
 8006268:	3601      	adds	r6, #1
 800626a:	e7d9      	b.n	8006220 <_printf_common+0x98>

0800626c <_printf_i>:
 800626c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006270:	7e0f      	ldrb	r7, [r1, #24]
 8006272:	4691      	mov	r9, r2
 8006274:	2f78      	cmp	r7, #120	@ 0x78
 8006276:	4680      	mov	r8, r0
 8006278:	460c      	mov	r4, r1
 800627a:	469a      	mov	sl, r3
 800627c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800627e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006282:	d807      	bhi.n	8006294 <_printf_i+0x28>
 8006284:	2f62      	cmp	r7, #98	@ 0x62
 8006286:	d80a      	bhi.n	800629e <_printf_i+0x32>
 8006288:	2f00      	cmp	r7, #0
 800628a:	f000 80d3 	beq.w	8006434 <_printf_i+0x1c8>
 800628e:	2f58      	cmp	r7, #88	@ 0x58
 8006290:	f000 80ba 	beq.w	8006408 <_printf_i+0x19c>
 8006294:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006298:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800629c:	e03a      	b.n	8006314 <_printf_i+0xa8>
 800629e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062a2:	2b15      	cmp	r3, #21
 80062a4:	d8f6      	bhi.n	8006294 <_printf_i+0x28>
 80062a6:	a101      	add	r1, pc, #4	@ (adr r1, 80062ac <_printf_i+0x40>)
 80062a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062ac:	08006305 	.word	0x08006305
 80062b0:	08006319 	.word	0x08006319
 80062b4:	08006295 	.word	0x08006295
 80062b8:	08006295 	.word	0x08006295
 80062bc:	08006295 	.word	0x08006295
 80062c0:	08006295 	.word	0x08006295
 80062c4:	08006319 	.word	0x08006319
 80062c8:	08006295 	.word	0x08006295
 80062cc:	08006295 	.word	0x08006295
 80062d0:	08006295 	.word	0x08006295
 80062d4:	08006295 	.word	0x08006295
 80062d8:	0800641b 	.word	0x0800641b
 80062dc:	08006343 	.word	0x08006343
 80062e0:	080063d5 	.word	0x080063d5
 80062e4:	08006295 	.word	0x08006295
 80062e8:	08006295 	.word	0x08006295
 80062ec:	0800643d 	.word	0x0800643d
 80062f0:	08006295 	.word	0x08006295
 80062f4:	08006343 	.word	0x08006343
 80062f8:	08006295 	.word	0x08006295
 80062fc:	08006295 	.word	0x08006295
 8006300:	080063dd 	.word	0x080063dd
 8006304:	6833      	ldr	r3, [r6, #0]
 8006306:	1d1a      	adds	r2, r3, #4
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6032      	str	r2, [r6, #0]
 800630c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006310:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006314:	2301      	movs	r3, #1
 8006316:	e09e      	b.n	8006456 <_printf_i+0x1ea>
 8006318:	6833      	ldr	r3, [r6, #0]
 800631a:	6820      	ldr	r0, [r4, #0]
 800631c:	1d19      	adds	r1, r3, #4
 800631e:	6031      	str	r1, [r6, #0]
 8006320:	0606      	lsls	r6, r0, #24
 8006322:	d501      	bpl.n	8006328 <_printf_i+0xbc>
 8006324:	681d      	ldr	r5, [r3, #0]
 8006326:	e003      	b.n	8006330 <_printf_i+0xc4>
 8006328:	0645      	lsls	r5, r0, #25
 800632a:	d5fb      	bpl.n	8006324 <_printf_i+0xb8>
 800632c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006330:	2d00      	cmp	r5, #0
 8006332:	da03      	bge.n	800633c <_printf_i+0xd0>
 8006334:	232d      	movs	r3, #45	@ 0x2d
 8006336:	426d      	negs	r5, r5
 8006338:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800633c:	230a      	movs	r3, #10
 800633e:	4859      	ldr	r0, [pc, #356]	@ (80064a4 <_printf_i+0x238>)
 8006340:	e011      	b.n	8006366 <_printf_i+0xfa>
 8006342:	6821      	ldr	r1, [r4, #0]
 8006344:	6833      	ldr	r3, [r6, #0]
 8006346:	0608      	lsls	r0, r1, #24
 8006348:	f853 5b04 	ldr.w	r5, [r3], #4
 800634c:	d402      	bmi.n	8006354 <_printf_i+0xe8>
 800634e:	0649      	lsls	r1, r1, #25
 8006350:	bf48      	it	mi
 8006352:	b2ad      	uxthmi	r5, r5
 8006354:	2f6f      	cmp	r7, #111	@ 0x6f
 8006356:	6033      	str	r3, [r6, #0]
 8006358:	bf14      	ite	ne
 800635a:	230a      	movne	r3, #10
 800635c:	2308      	moveq	r3, #8
 800635e:	4851      	ldr	r0, [pc, #324]	@ (80064a4 <_printf_i+0x238>)
 8006360:	2100      	movs	r1, #0
 8006362:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006366:	6866      	ldr	r6, [r4, #4]
 8006368:	2e00      	cmp	r6, #0
 800636a:	bfa8      	it	ge
 800636c:	6821      	ldrge	r1, [r4, #0]
 800636e:	60a6      	str	r6, [r4, #8]
 8006370:	bfa4      	itt	ge
 8006372:	f021 0104 	bicge.w	r1, r1, #4
 8006376:	6021      	strge	r1, [r4, #0]
 8006378:	b90d      	cbnz	r5, 800637e <_printf_i+0x112>
 800637a:	2e00      	cmp	r6, #0
 800637c:	d04b      	beq.n	8006416 <_printf_i+0x1aa>
 800637e:	4616      	mov	r6, r2
 8006380:	fbb5 f1f3 	udiv	r1, r5, r3
 8006384:	fb03 5711 	mls	r7, r3, r1, r5
 8006388:	5dc7      	ldrb	r7, [r0, r7]
 800638a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800638e:	462f      	mov	r7, r5
 8006390:	42bb      	cmp	r3, r7
 8006392:	460d      	mov	r5, r1
 8006394:	d9f4      	bls.n	8006380 <_printf_i+0x114>
 8006396:	2b08      	cmp	r3, #8
 8006398:	d10b      	bne.n	80063b2 <_printf_i+0x146>
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	07df      	lsls	r7, r3, #31
 800639e:	d508      	bpl.n	80063b2 <_printf_i+0x146>
 80063a0:	6923      	ldr	r3, [r4, #16]
 80063a2:	6861      	ldr	r1, [r4, #4]
 80063a4:	4299      	cmp	r1, r3
 80063a6:	bfde      	ittt	le
 80063a8:	2330      	movle	r3, #48	@ 0x30
 80063aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063b2:	1b92      	subs	r2, r2, r6
 80063b4:	6122      	str	r2, [r4, #16]
 80063b6:	464b      	mov	r3, r9
 80063b8:	4621      	mov	r1, r4
 80063ba:	4640      	mov	r0, r8
 80063bc:	f8cd a000 	str.w	sl, [sp]
 80063c0:	aa03      	add	r2, sp, #12
 80063c2:	f7ff fee1 	bl	8006188 <_printf_common>
 80063c6:	3001      	adds	r0, #1
 80063c8:	d14a      	bne.n	8006460 <_printf_i+0x1f4>
 80063ca:	f04f 30ff 	mov.w	r0, #4294967295
 80063ce:	b004      	add	sp, #16
 80063d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d4:	6823      	ldr	r3, [r4, #0]
 80063d6:	f043 0320 	orr.w	r3, r3, #32
 80063da:	6023      	str	r3, [r4, #0]
 80063dc:	2778      	movs	r7, #120	@ 0x78
 80063de:	4832      	ldr	r0, [pc, #200]	@ (80064a8 <_printf_i+0x23c>)
 80063e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	6831      	ldr	r1, [r6, #0]
 80063e8:	061f      	lsls	r7, r3, #24
 80063ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80063ee:	d402      	bmi.n	80063f6 <_printf_i+0x18a>
 80063f0:	065f      	lsls	r7, r3, #25
 80063f2:	bf48      	it	mi
 80063f4:	b2ad      	uxthmi	r5, r5
 80063f6:	6031      	str	r1, [r6, #0]
 80063f8:	07d9      	lsls	r1, r3, #31
 80063fa:	bf44      	itt	mi
 80063fc:	f043 0320 	orrmi.w	r3, r3, #32
 8006400:	6023      	strmi	r3, [r4, #0]
 8006402:	b11d      	cbz	r5, 800640c <_printf_i+0x1a0>
 8006404:	2310      	movs	r3, #16
 8006406:	e7ab      	b.n	8006360 <_printf_i+0xf4>
 8006408:	4826      	ldr	r0, [pc, #152]	@ (80064a4 <_printf_i+0x238>)
 800640a:	e7e9      	b.n	80063e0 <_printf_i+0x174>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	f023 0320 	bic.w	r3, r3, #32
 8006412:	6023      	str	r3, [r4, #0]
 8006414:	e7f6      	b.n	8006404 <_printf_i+0x198>
 8006416:	4616      	mov	r6, r2
 8006418:	e7bd      	b.n	8006396 <_printf_i+0x12a>
 800641a:	6833      	ldr	r3, [r6, #0]
 800641c:	6825      	ldr	r5, [r4, #0]
 800641e:	1d18      	adds	r0, r3, #4
 8006420:	6961      	ldr	r1, [r4, #20]
 8006422:	6030      	str	r0, [r6, #0]
 8006424:	062e      	lsls	r6, r5, #24
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	d501      	bpl.n	800642e <_printf_i+0x1c2>
 800642a:	6019      	str	r1, [r3, #0]
 800642c:	e002      	b.n	8006434 <_printf_i+0x1c8>
 800642e:	0668      	lsls	r0, r5, #25
 8006430:	d5fb      	bpl.n	800642a <_printf_i+0x1be>
 8006432:	8019      	strh	r1, [r3, #0]
 8006434:	2300      	movs	r3, #0
 8006436:	4616      	mov	r6, r2
 8006438:	6123      	str	r3, [r4, #16]
 800643a:	e7bc      	b.n	80063b6 <_printf_i+0x14a>
 800643c:	6833      	ldr	r3, [r6, #0]
 800643e:	2100      	movs	r1, #0
 8006440:	1d1a      	adds	r2, r3, #4
 8006442:	6032      	str	r2, [r6, #0]
 8006444:	681e      	ldr	r6, [r3, #0]
 8006446:	6862      	ldr	r2, [r4, #4]
 8006448:	4630      	mov	r0, r6
 800644a:	f000 f849 	bl	80064e0 <memchr>
 800644e:	b108      	cbz	r0, 8006454 <_printf_i+0x1e8>
 8006450:	1b80      	subs	r0, r0, r6
 8006452:	6060      	str	r0, [r4, #4]
 8006454:	6863      	ldr	r3, [r4, #4]
 8006456:	6123      	str	r3, [r4, #16]
 8006458:	2300      	movs	r3, #0
 800645a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800645e:	e7aa      	b.n	80063b6 <_printf_i+0x14a>
 8006460:	4632      	mov	r2, r6
 8006462:	4649      	mov	r1, r9
 8006464:	4640      	mov	r0, r8
 8006466:	6923      	ldr	r3, [r4, #16]
 8006468:	47d0      	blx	sl
 800646a:	3001      	adds	r0, #1
 800646c:	d0ad      	beq.n	80063ca <_printf_i+0x15e>
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	079b      	lsls	r3, r3, #30
 8006472:	d413      	bmi.n	800649c <_printf_i+0x230>
 8006474:	68e0      	ldr	r0, [r4, #12]
 8006476:	9b03      	ldr	r3, [sp, #12]
 8006478:	4298      	cmp	r0, r3
 800647a:	bfb8      	it	lt
 800647c:	4618      	movlt	r0, r3
 800647e:	e7a6      	b.n	80063ce <_printf_i+0x162>
 8006480:	2301      	movs	r3, #1
 8006482:	4632      	mov	r2, r6
 8006484:	4649      	mov	r1, r9
 8006486:	4640      	mov	r0, r8
 8006488:	47d0      	blx	sl
 800648a:	3001      	adds	r0, #1
 800648c:	d09d      	beq.n	80063ca <_printf_i+0x15e>
 800648e:	3501      	adds	r5, #1
 8006490:	68e3      	ldr	r3, [r4, #12]
 8006492:	9903      	ldr	r1, [sp, #12]
 8006494:	1a5b      	subs	r3, r3, r1
 8006496:	42ab      	cmp	r3, r5
 8006498:	dcf2      	bgt.n	8006480 <_printf_i+0x214>
 800649a:	e7eb      	b.n	8006474 <_printf_i+0x208>
 800649c:	2500      	movs	r5, #0
 800649e:	f104 0619 	add.w	r6, r4, #25
 80064a2:	e7f5      	b.n	8006490 <_printf_i+0x224>
 80064a4:	080086eb 	.word	0x080086eb
 80064a8:	080086fc 	.word	0x080086fc

080064ac <memmove>:
 80064ac:	4288      	cmp	r0, r1
 80064ae:	b510      	push	{r4, lr}
 80064b0:	eb01 0402 	add.w	r4, r1, r2
 80064b4:	d902      	bls.n	80064bc <memmove+0x10>
 80064b6:	4284      	cmp	r4, r0
 80064b8:	4623      	mov	r3, r4
 80064ba:	d807      	bhi.n	80064cc <memmove+0x20>
 80064bc:	1e43      	subs	r3, r0, #1
 80064be:	42a1      	cmp	r1, r4
 80064c0:	d008      	beq.n	80064d4 <memmove+0x28>
 80064c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064ca:	e7f8      	b.n	80064be <memmove+0x12>
 80064cc:	4601      	mov	r1, r0
 80064ce:	4402      	add	r2, r0
 80064d0:	428a      	cmp	r2, r1
 80064d2:	d100      	bne.n	80064d6 <memmove+0x2a>
 80064d4:	bd10      	pop	{r4, pc}
 80064d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064de:	e7f7      	b.n	80064d0 <memmove+0x24>

080064e0 <memchr>:
 80064e0:	4603      	mov	r3, r0
 80064e2:	b510      	push	{r4, lr}
 80064e4:	b2c9      	uxtb	r1, r1
 80064e6:	4402      	add	r2, r0
 80064e8:	4293      	cmp	r3, r2
 80064ea:	4618      	mov	r0, r3
 80064ec:	d101      	bne.n	80064f2 <memchr+0x12>
 80064ee:	2000      	movs	r0, #0
 80064f0:	e003      	b.n	80064fa <memchr+0x1a>
 80064f2:	7804      	ldrb	r4, [r0, #0]
 80064f4:	3301      	adds	r3, #1
 80064f6:	428c      	cmp	r4, r1
 80064f8:	d1f6      	bne.n	80064e8 <memchr+0x8>
 80064fa:	bd10      	pop	{r4, pc}

080064fc <_realloc_r>:
 80064fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006500:	4680      	mov	r8, r0
 8006502:	4615      	mov	r5, r2
 8006504:	460c      	mov	r4, r1
 8006506:	b921      	cbnz	r1, 8006512 <_realloc_r+0x16>
 8006508:	4611      	mov	r1, r2
 800650a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800650e:	f7ff bb9d 	b.w	8005c4c <_malloc_r>
 8006512:	b92a      	cbnz	r2, 8006520 <_realloc_r+0x24>
 8006514:	f7ff fc98 	bl	8005e48 <_free_r>
 8006518:	2400      	movs	r4, #0
 800651a:	4620      	mov	r0, r4
 800651c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006520:	f000 f81a 	bl	8006558 <_malloc_usable_size_r>
 8006524:	4285      	cmp	r5, r0
 8006526:	4606      	mov	r6, r0
 8006528:	d802      	bhi.n	8006530 <_realloc_r+0x34>
 800652a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800652e:	d8f4      	bhi.n	800651a <_realloc_r+0x1e>
 8006530:	4629      	mov	r1, r5
 8006532:	4640      	mov	r0, r8
 8006534:	f7ff fb8a 	bl	8005c4c <_malloc_r>
 8006538:	4607      	mov	r7, r0
 800653a:	2800      	cmp	r0, #0
 800653c:	d0ec      	beq.n	8006518 <_realloc_r+0x1c>
 800653e:	42b5      	cmp	r5, r6
 8006540:	462a      	mov	r2, r5
 8006542:	4621      	mov	r1, r4
 8006544:	bf28      	it	cs
 8006546:	4632      	movcs	r2, r6
 8006548:	f7ff fc70 	bl	8005e2c <memcpy>
 800654c:	4621      	mov	r1, r4
 800654e:	4640      	mov	r0, r8
 8006550:	f7ff fc7a 	bl	8005e48 <_free_r>
 8006554:	463c      	mov	r4, r7
 8006556:	e7e0      	b.n	800651a <_realloc_r+0x1e>

08006558 <_malloc_usable_size_r>:
 8006558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800655c:	1f18      	subs	r0, r3, #4
 800655e:	2b00      	cmp	r3, #0
 8006560:	bfbc      	itt	lt
 8006562:	580b      	ldrlt	r3, [r1, r0]
 8006564:	18c0      	addlt	r0, r0, r3
 8006566:	4770      	bx	lr

08006568 <_init>:
 8006568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656a:	bf00      	nop
 800656c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800656e:	bc08      	pop	{r3}
 8006570:	469e      	mov	lr, r3
 8006572:	4770      	bx	lr

08006574 <_fini>:
 8006574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006576:	bf00      	nop
 8006578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800657a:	bc08      	pop	{r3}
 800657c:	469e      	mov	lr, r3
 800657e:	4770      	bx	lr
